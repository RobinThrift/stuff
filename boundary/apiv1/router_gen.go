// Package apiv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.5-0.20230118012357-f4cf8f9a5703 DO NOT EDIT.
//
//lint:file-ignore SA1029 Ignore because generated code
//lint:file-ignore SA1019 Ignore because generated code
//lint:file-ignore ST1005 Ignore because generated code
package apiv1

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/go-chi/chi/v5"
)

// Defines values for AssetStatus.
const (
	ARCHIVED  AssetStatus = "ARCHIVED"
	INSTORAGE AssetStatus = "IN_STORAGE"
	INUSE     AssetStatus = "IN_USE"
)

// Asset defines model for Asset.
type Asset struct {
	Category        *string             `json:"category,omitempty"`
	CheckedOutTo    *int                `json:"checkedOutTo,omitempty"`
	Children        *[]Asset            `json:"children,omitempty"`
	CreatedAt       openapi_types.Date  `json:"createdAt"`
	CreatedBy       int                 `json:"createdBy"`
	CustomAttrs     []CustomAttr        `json:"customAttrs"`
	Files           []AssetFile         `json:"files"`
	Id              int                 `json:"id"`
	ImageURL        *string             `json:"imageURL,omitempty"`
	Location        *string             `json:"location,omitempty"`
	Manufacturer    *string             `json:"manufacturer,omitempty"`
	Model           *string             `json:"model,omitempty"`
	ModelNo         *string             `json:"modelNo,omitempty"`
	Name            string              `json:"name"`
	Notes           *string             `json:"notes,omitempty"`
	ParentAssetID   *int                `json:"parentAssetID,omitempty"`
	Parts           []AssetPart         `json:"parts"`
	PartsTotalCount *int                `json:"partsTotalCount,omitempty"`
	PositionCode    *string             `json:"positionCode,omitempty"`
	Purchases       []Purchase          `json:"purchases"`
	Quantity        *int                `json:"quantity,omitempty"`
	QuantityUnit    *string             `json:"quantityUnit,omitempty"`
	SerialNo        *string             `json:"serialNo,omitempty"`
	Status          AssetStatus         `json:"status"`
	Tag             string              `json:"tag"`
	ThumbnailURL    *string             `json:"thumbnailURL,omitempty"`
	Type            string              `json:"type"`
	UpdatedAt       openapi_types.Date  `json:"updatedAt"`
	WarrantyUntil   *openapi_types.Date `json:"warrantyUntil,omitempty"`
}

// AssetStatus defines model for Asset.Status.
type AssetStatus string

// AssetFile defines model for AssetFile.
type AssetFile struct {
	AssetID    int                `json:"assetID"`
	CreatedAt  openapi_types.Date `json:"createdAt"`
	CreatedBy  int                `json:"createdBy"`
	Filetype   string             `json:"filetype"`
	Id         int                `json:"id"`
	Name       string             `json:"name"`
	PublicPath string             `json:"publicPath"`
	Sha256     string             `json:"sha256"`
	SizeBytes  int                `json:"sizeBytes"`
	UpdatedAt  openapi_types.Date `json:"updatedAt"`
}

// AssetListPage defines model for AssetListPage.
type AssetListPage struct {
	Assets   []Asset `json:"assets"`
	NumPages int     `json:"numPages"`
	Page     int     `json:"page"`
	PageSize int     `json:"pageSize"`
	Total    int     `json:"total"`
}

// AssetPart defines model for AssetPart.
type AssetPart struct {
	AssetID      int                `json:"assetID"`
	CreatedAt    openapi_types.Date `json:"createdAt"`
	CreatedBy    int                `json:"createdBy"`
	Id           int                `json:"id"`
	Location     *string            `json:"location,omitempty"`
	Name         string             `json:"name"`
	Notes        *string            `json:"notes,omitempty"`
	PositionCode *string            `json:"positionCode,omitempty"`
	Tag          string             `json:"tag"`
	UpdatedAt    openapi_types.Date `json:"updatedAt"`
}

// Category defines model for Category.
type Category struct {
	Name string `json:"name"`
}

// CategoryListPage defines model for CategoryListPage.
type CategoryListPage struct {
	Categories []Category `json:"categories"`
	NumPages   int        `json:"numPages"`
	Page       int        `json:"page"`
	PageSize   int        `json:"pageSize"`
	Total      int        `json:"total"`
}

// CustomAttr defines model for CustomAttr.
type CustomAttr struct {
	Name  string `json:"name"`
	Value any    `json:"value"`
}

// CustomAttrListPage defines model for CustomAttrListPage.
type CustomAttrListPage struct {
	CustomAttrs []CustomAttr `json:"customAttrs"`
	NumPages    int          `json:"numPages"`
	Page        int          `json:"page"`
	PageSize    int          `json:"pageSize"`
	Total       int          `json:"total"`
}

// Error API error object that follow RFC7807 (https://datatracker.ietf.org/doc/html/rfc7807).
type Error struct {
	Code   int    `json:"code"`
	Detail string `json:"detail"`
	Title  string `json:"title"`
	Type   string `json:"type"`
}

// Location defines model for Location.
type Location struct {
	Name string `json:"name"`
}

// LocationListPage defines model for LocationListPage.
type LocationListPage struct {
	Locations []Location `json:"locations"`
	NumPages  int        `json:"numPages"`
	Page      int        `json:"page"`
	PageSize  int        `json:"pageSize"`
	Total     int        `json:"total"`
}

// Manufacturer defines model for Manufacturer.
type Manufacturer struct {
	ModelNo *string `json:"modelNo,omitempty"`
	Name    string  `json:"name"`
}

// ManufacturerListPage defines model for ManufacturerListPage.
type ManufacturerListPage struct {
	Manufacturers []Manufacturer `json:"manufacturers"`
	NumPages      int            `json:"numPages"`
	Page          int            `json:"page"`
	PageSize      int            `json:"pageSize"`
	Total         int            `json:"total"`
}

// Model defines model for Model.
type Model struct {
	ModelNo *string `json:"modelNo,omitempty"`
	Name    string  `json:"name"`
}

// ModelListPage defines model for ModelListPage.
type ModelListPage struct {
	Models   []Model `json:"models"`
	NumPages int     `json:"numPages"`
	Page     int     `json:"page"`
	PageSize int     `json:"pageSize"`
	Total    int     `json:"total"`
}

// PositionCode defines model for PositionCode.
type PositionCode struct {
	Code string `json:"code"`
}

// PositionCodeListPage defines model for PositionCodeListPage.
type PositionCodeListPage struct {
	NumPages      int            `json:"numPages"`
	Page          int            `json:"page"`
	PageSize      int            `json:"pageSize"`
	PositionCodes []PositionCode `json:"positionCodes"`
	Total         int            `json:"total"`
}

// Purchase defines model for Purchase.
type Purchase struct {
	Amount   *int                `json:"amount,omitempty"`
	Currency *string             `json:"currency,omitempty"`
	Date     *openapi_types.Date `json:"date,omitempty"`
	OrderNo  *string             `json:"orderNo,omitempty"`
	Supplier *string             `json:"supplier,omitempty"`
}

// Supplier defines model for Supplier.
type Supplier struct {
	ModelNo *string `json:"modelNo,omitempty"`
	Name    string  `json:"name"`
}

// SupplierListPage defines model for SupplierListPage.
type SupplierListPage struct {
	NumPages  int        `json:"numPages"`
	Page      int        `json:"page"`
	PageSize  int        `json:"pageSize"`
	Suppliers []Supplier `json:"suppliers"`
	Total     int        `json:"total"`
}

// Tag defines model for Tag.
type Tag struct {
	CreatedAt openapi_types.Date `json:"createdAt"`
	Id        int                `json:"id"`
	InUse     bool               `json:"inUse"`
	Tag       string             `json:"tag"`
	UpdatedAt openapi_types.Date `json:"updatedAt"`
}

// TagListPage defines model for TagListPage.
type TagListPage struct {
	NumPages int   `json:"numPages"`
	Page     int   `json:"page"`
	PageSize int   `json:"pageSize"`
	Tags     []Tag `json:"tags"`
	Total    int   `json:"total"`
}

// User defines model for User.
type User struct {
	CreatedAt   openapi_types.Date `json:"createdAt"`
	DisplayName string             `json:"displayName"`
	Id          int64              `json:"id"`
	IsAdmin     bool               `json:"isAdmin"`
	UpdatedAt   openapi_types.Date `json:"updatedAt"`
	Username    string             `json:"username"`
}

// UserListPage defines model for UserListPage.
type UserListPage struct {
	NumPages int    `json:"numPages"`
	Page     int    `json:"page"`
	PageSize int    `json:"pageSize"`
	Total    int    `json:"total"`
	Users    []User `json:"users"`
}

// CreateAssetRequest defines model for CreateAssetRequest.
type CreateAssetRequest struct {
	Category        *string             `json:"category,omitempty"`
	CheckedOutTo    *int                `json:"checkedOutTo,omitempty"`
	CustomAttrs     []CustomAttr        `json:"customAttrs"`
	Location        *string             `json:"location,omitempty"`
	Manufacturer    *string             `json:"manufacturer,omitempty"`
	Model           *string             `json:"model,omitempty"`
	ModelNo         *string             `json:"modelNo,omitempty"`
	Name            string              `json:"name"`
	Notes           *string             `json:"notes,omitempty"`
	ParentAssetID   *int                `json:"parentAssetID,omitempty"`
	Parts           []AssetPart         `json:"parts"`
	PartsTotalCount *int                `json:"partsTotalCount,omitempty"`
	PositionCode    *string             `json:"positionCode,omitempty"`
	Purchases       []Purchase          `json:"purchases"`
	Quantity        *int                `json:"quantity,omitempty"`
	QuantityUnit    *string             `json:"quantityUnit,omitempty"`
	SerialNo        *string             `json:"serialNo,omitempty"`
	Status          AssetStatus         `json:"status"`
	Tag             *string             `json:"tag,omitempty"`
	Type            string              `json:"type"`
	WarrantyUntil   *openapi_types.Date `json:"warrantyUntil,omitempty"`
}

// UpdateAssetRequest defines model for UpdateAssetRequest.
type UpdateAssetRequest struct {
	Category        *string             `json:"category,omitempty"`
	CheckedOutTo    *int                `json:"checkedOutTo,omitempty"`
	CustomAttrs     []CustomAttr        `json:"customAttrs"`
	Location        *string             `json:"location,omitempty"`
	Manufacturer    *string             `json:"manufacturer,omitempty"`
	Model           *string             `json:"model,omitempty"`
	ModelNo         *string             `json:"modelNo,omitempty"`
	Name            string              `json:"name"`
	Notes           *string             `json:"notes,omitempty"`
	ParentAssetID   *int                `json:"parentAssetID,omitempty"`
	Parts           []AssetPart         `json:"parts"`
	PartsTotalCount *int                `json:"partsTotalCount,omitempty"`
	PositionCode    *string             `json:"positionCode,omitempty"`
	Purchases       []Purchase          `json:"purchases"`
	Quantity        *int                `json:"quantity,omitempty"`
	QuantityUnit    *string             `json:"quantityUnit,omitempty"`
	SerialNo        *string             `json:"serialNo,omitempty"`
	Status          AssetStatus         `json:"status"`
	Tag             *string             `json:"tag,omitempty"`
	Type            string              `json:"type"`
	WarrantyUntil   *openapi_types.Date `json:"warrantyUntil,omitempty"`
}

// ListAssetsParams defines parameters for ListAssets.
type ListAssetsParams struct {
	PageSize *int    `form:"page_size,omitempty" json:"page_size,omitempty"`
	Page     *int    `form:"page,omitempty" json:"page,omitempty"`
	Type     *string `form:"type,omitempty" json:"type,omitempty"`
	OrderBy  *string `form:"order_by,omitempty" json:"order_by,omitempty"`
	OrderDir *string `form:"order_dir,omitempty" json:"order_dir,omitempty"`
	Query    *string `form:"query,omitempty" json:"query,omitempty"`
}

// CreateAssetJSONBody defines parameters for CreateAsset.
type CreateAssetJSONBody struct {
	Category        *string             `json:"category,omitempty"`
	CheckedOutTo    *int                `json:"checkedOutTo,omitempty"`
	CustomAttrs     []CustomAttr        `json:"customAttrs"`
	Location        *string             `json:"location,omitempty"`
	Manufacturer    *string             `json:"manufacturer,omitempty"`
	Model           *string             `json:"model,omitempty"`
	ModelNo         *string             `json:"modelNo,omitempty"`
	Name            string              `json:"name"`
	Notes           *string             `json:"notes,omitempty"`
	ParentAssetID   *int                `json:"parentAssetID,omitempty"`
	Parts           []AssetPart         `json:"parts"`
	PartsTotalCount *int                `json:"partsTotalCount,omitempty"`
	PositionCode    *string             `json:"positionCode,omitempty"`
	Purchases       []Purchase          `json:"purchases"`
	Quantity        *int                `json:"quantity,omitempty"`
	QuantityUnit    *string             `json:"quantityUnit,omitempty"`
	SerialNo        *string             `json:"serialNo,omitempty"`
	Status          AssetStatus         `json:"status"`
	Tag             *string             `json:"tag,omitempty"`
	Type            string              `json:"type"`
	WarrantyUntil   *openapi_types.Date `json:"warrantyUntil,omitempty"`
}

// GetAssetParams defines parameters for GetAsset.
type GetAssetParams struct {
	IncludeChildren *bool `form:"include_children,omitempty" json:"include_children,omitempty"`
}

// UpdateAssetJSONBody defines parameters for UpdateAsset.
type UpdateAssetJSONBody struct {
	Category        *string             `json:"category,omitempty"`
	CheckedOutTo    *int                `json:"checkedOutTo,omitempty"`
	CustomAttrs     []CustomAttr        `json:"customAttrs"`
	Location        *string             `json:"location,omitempty"`
	Manufacturer    *string             `json:"manufacturer,omitempty"`
	Model           *string             `json:"model,omitempty"`
	ModelNo         *string             `json:"modelNo,omitempty"`
	Name            string              `json:"name"`
	Notes           *string             `json:"notes,omitempty"`
	ParentAssetID   *int                `json:"parentAssetID,omitempty"`
	Parts           []AssetPart         `json:"parts"`
	PartsTotalCount *int                `json:"partsTotalCount,omitempty"`
	PositionCode    *string             `json:"positionCode,omitempty"`
	Purchases       []Purchase          `json:"purchases"`
	Quantity        *int                `json:"quantity,omitempty"`
	QuantityUnit    *string             `json:"quantityUnit,omitempty"`
	SerialNo        *string             `json:"serialNo,omitempty"`
	Status          AssetStatus         `json:"status"`
	Tag             *string             `json:"tag,omitempty"`
	Type            string              `json:"type"`
	WarrantyUntil   *openapi_types.Date `json:"warrantyUntil,omitempty"`
}

// ListCategoriesParams defines parameters for ListCategories.
type ListCategoriesParams struct {
	PageSize *int    `form:"page_size,omitempty" json:"page_size,omitempty"`
	Page     *int    `form:"page,omitempty" json:"page,omitempty"`
	Query    *string `form:"query,omitempty" json:"query,omitempty"`
}

// ListCustomAttrsParams defines parameters for ListCustomAttrs.
type ListCustomAttrsParams struct {
	PageSize *int    `form:"page_size,omitempty" json:"page_size,omitempty"`
	Page     *int    `form:"page,omitempty" json:"page,omitempty"`
	Query    *string `form:"query,omitempty" json:"query,omitempty"`
}

// ListLocationsParams defines parameters for ListLocations.
type ListLocationsParams struct {
	PageSize *int    `form:"page_size,omitempty" json:"page_size,omitempty"`
	Page     *int    `form:"page,omitempty" json:"page,omitempty"`
	Query    *string `form:"query,omitempty" json:"query,omitempty"`
}

// ListPositionCodesParams defines parameters for ListPositionCodes.
type ListPositionCodesParams struct {
	PageSize *int    `form:"page_size,omitempty" json:"page_size,omitempty"`
	Page     *int    `form:"page,omitempty" json:"page,omitempty"`
	Query    *string `form:"query,omitempty" json:"query,omitempty"`
}

// ListManufacturersParams defines parameters for ListManufacturers.
type ListManufacturersParams struct {
	PageSize *int    `form:"page_size,omitempty" json:"page_size,omitempty"`
	Page     *int    `form:"page,omitempty" json:"page,omitempty"`
	Query    *string `form:"query,omitempty" json:"query,omitempty"`
}

// ListModelsParams defines parameters for ListModels.
type ListModelsParams struct {
	PageSize *int    `form:"page_size,omitempty" json:"page_size,omitempty"`
	Page     *int    `form:"page,omitempty" json:"page,omitempty"`
	Query    *string `form:"query,omitempty" json:"query,omitempty"`
}

// ListSuppliersParams defines parameters for ListSuppliers.
type ListSuppliersParams struct {
	PageSize *int    `form:"page_size,omitempty" json:"page_size,omitempty"`
	Page     *int    `form:"page,omitempty" json:"page,omitempty"`
	Query    *string `form:"query,omitempty" json:"query,omitempty"`
}

// ListTagsParams defines parameters for ListTags.
type ListTagsParams struct {
	PageSize *int    `form:"page_size,omitempty" json:"page_size,omitempty"`
	Page     *int    `form:"page,omitempty" json:"page,omitempty"`
	Query    *string `form:"query,omitempty" json:"query,omitempty"`
}

// ListUsersParams defines parameters for ListUsers.
type ListUsersParams struct {
	PageSize *int    `form:"page_size,omitempty" json:"page_size,omitempty"`
	Page     *int    `form:"page,omitempty" json:"page,omitempty"`
	Type     *string `form:"type,omitempty" json:"type,omitempty"`
	OrderBy  *string `form:"order_by,omitempty" json:"order_by,omitempty"`
	OrderDir *string `form:"order_dir,omitempty" json:"order_dir,omitempty"`
	Query    *string `form:"query,omitempty" json:"query,omitempty"`
}

// CreateAssetJSONRequestBody defines body for CreateAsset for application/json ContentType.
type CreateAssetJSONRequestBody CreateAssetJSONBody

// UpdateAssetJSONRequestBody defines body for UpdateAsset for application/json ContentType.
type UpdateAssetJSONRequestBody UpdateAssetJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /v1/assets)
	ListAssets(w http.ResponseWriter, r *http.Request, params ListAssetsParams)

	// (POST /v1/assets)
	CreateAsset(w http.ResponseWriter, r *http.Request)

	// (DELETE /v1/assets/{tagOrID})
	DeleteAsset(w http.ResponseWriter, r *http.Request, tagOrID string)

	// (GET /v1/assets/{tagOrID})
	GetAsset(w http.ResponseWriter, r *http.Request, tagOrID string, params GetAssetParams)

	// (PUT /v1/assets/{tagOrID})
	UpdateAsset(w http.ResponseWriter, r *http.Request, tagOrID string)

	// (GET /v1/categories)
	ListCategories(w http.ResponseWriter, r *http.Request, params ListCategoriesParams)

	// (GET /v1/custom_attrs)
	ListCustomAttrs(w http.ResponseWriter, r *http.Request, params ListCustomAttrsParams)

	// (GET /v1/locations)
	ListLocations(w http.ResponseWriter, r *http.Request, params ListLocationsParams)

	// (GET /v1/locations/position_codes)
	ListPositionCodes(w http.ResponseWriter, r *http.Request, params ListPositionCodesParams)

	// (GET /v1/manufacturers)
	ListManufacturers(w http.ResponseWriter, r *http.Request, params ListManufacturersParams)

	// (GET /v1/models)
	ListModels(w http.ResponseWriter, r *http.Request, params ListModelsParams)

	// (GET /v1/suppliers)
	ListSuppliers(w http.ResponseWriter, r *http.Request, params ListSuppliersParams)

	// (GET /v1/tags)
	ListTags(w http.ResponseWriter, r *http.Request, params ListTagsParams)

	// (GET /v1/users)
	ListUsers(w http.ResponseWriter, r *http.Request, params ListUsersParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListAssets operation middleware
func (siw *ServerInterfaceWrapper) ListAssets(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAssetsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page_size", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", r.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	// ------------- Optional query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "order_by", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order_by", Err: err})
		return
	}

	// ------------- Optional query parameter "order_dir" -------------

	err = runtime.BindQueryParameter("form", true, false, "order_dir", r.URL.Query(), &params.OrderDir)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order_dir", Err: err})
		return
	}

	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", r.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "query", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAssets(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateAsset operation middleware
func (siw *ServerInterfaceWrapper) CreateAsset(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateAsset(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteAsset operation middleware
func (siw *ServerInterfaceWrapper) DeleteAsset(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "tagOrID" -------------
	var tagOrID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "tagOrID", runtime.ParamLocationPath, chi.URLParam(r, "tagOrID"), &tagOrID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tagOrID", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAsset(w, r, tagOrID)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAsset operation middleware
func (siw *ServerInterfaceWrapper) GetAsset(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "tagOrID" -------------
	var tagOrID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "tagOrID", runtime.ParamLocationPath, chi.URLParam(r, "tagOrID"), &tagOrID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tagOrID", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAssetParams

	// ------------- Optional query parameter "include_children" -------------

	err = runtime.BindQueryParameter("form", true, false, "include_children", r.URL.Query(), &params.IncludeChildren)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "include_children", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAsset(w, r, tagOrID, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateAsset operation middleware
func (siw *ServerInterfaceWrapper) UpdateAsset(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "tagOrID" -------------
	var tagOrID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "tagOrID", runtime.ParamLocationPath, chi.URLParam(r, "tagOrID"), &tagOrID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tagOrID", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateAsset(w, r, tagOrID)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListCategories operation middleware
func (siw *ServerInterfaceWrapper) ListCategories(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCategoriesParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page_size", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", r.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "query", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListCategories(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListCustomAttrs operation middleware
func (siw *ServerInterfaceWrapper) ListCustomAttrs(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCustomAttrsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page_size", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", r.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "query", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListCustomAttrs(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListLocations operation middleware
func (siw *ServerInterfaceWrapper) ListLocations(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListLocationsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page_size", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", r.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "query", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListLocations(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListPositionCodes operation middleware
func (siw *ServerInterfaceWrapper) ListPositionCodes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPositionCodesParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page_size", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", r.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "query", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPositionCodes(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListManufacturers operation middleware
func (siw *ServerInterfaceWrapper) ListManufacturers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListManufacturersParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page_size", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", r.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "query", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListManufacturers(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListModels operation middleware
func (siw *ServerInterfaceWrapper) ListModels(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListModelsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page_size", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", r.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "query", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListModels(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListSuppliers operation middleware
func (siw *ServerInterfaceWrapper) ListSuppliers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSuppliersParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page_size", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", r.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "query", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListSuppliers(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListTags operation middleware
func (siw *ServerInterfaceWrapper) ListTags(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTagsParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page_size", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", r.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "query", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTags(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListUsers operation middleware
func (siw *ServerInterfaceWrapper) ListUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUsersParams

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page_size", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", r.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	// ------------- Optional query parameter "order_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "order_by", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order_by", Err: err})
		return
	}

	// ------------- Optional query parameter "order_dir" -------------

	err = runtime.BindQueryParameter("form", true, false, "order_dir", r.URL.Query(), &params.OrderDir)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order_dir", Err: err})
		return
	}

	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", r.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "query", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListUsers(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/assets", wrapper.ListAssets)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/assets", wrapper.CreateAsset)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/assets/{tagOrID}", wrapper.DeleteAsset)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/assets/{tagOrID}", wrapper.GetAsset)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/v1/assets/{tagOrID}", wrapper.UpdateAsset)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/categories", wrapper.ListCategories)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/custom_attrs", wrapper.ListCustomAttrs)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/locations", wrapper.ListLocations)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/locations/position_codes", wrapper.ListPositionCodes)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/manufacturers", wrapper.ListManufacturers)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/models", wrapper.ListModels)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/suppliers", wrapper.ListSuppliers)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/tags", wrapper.ListTags)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/users", wrapper.ListUsers)
	})

	return r
}

type ListAssetsRequestObject struct {
	Params ListAssetsParams
}

type ListAssetsResponseObject interface {
	VisitListAssetsResponse(w http.ResponseWriter) error
}

type ListAssets200JSONResponse AssetListPage

func (response ListAssets200JSONResponse) VisitListAssetsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateAssetRequestObject struct {
	Body *CreateAssetJSONRequestBody
}

type CreateAssetResponseObject interface {
	VisitCreateAssetResponse(w http.ResponseWriter) error
}

type CreateAsset201JSONResponse Asset

func (response CreateAsset201JSONResponse) VisitCreateAssetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateAsset400JSONResponse Error

func (response CreateAsset400JSONResponse) VisitCreateAssetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateAsset401JSONResponse Error

func (response CreateAsset401JSONResponse) VisitCreateAssetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAssetRequestObject struct {
	TagOrID string `json:"tagOrID"`
}

type DeleteAssetResponseObject interface {
	VisitDeleteAssetResponse(w http.ResponseWriter) error
}

type DeleteAsset204Response struct {
}

func (response DeleteAsset204Response) VisitDeleteAssetResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteAsset401JSONResponse Error

func (response DeleteAsset401JSONResponse) VisitDeleteAssetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAsset404JSONResponse Error

func (response DeleteAsset404JSONResponse) VisitDeleteAssetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAssetRequestObject struct {
	TagOrID string `json:"tagOrID"`
	Params  GetAssetParams
}

type GetAssetResponseObject interface {
	VisitGetAssetResponse(w http.ResponseWriter) error
}

type GetAsset200JSONResponse Asset

func (response GetAsset200JSONResponse) VisitGetAssetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAsset401JSONResponse Error

func (response GetAsset401JSONResponse) VisitGetAssetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAsset404JSONResponse Error

func (response GetAsset404JSONResponse) VisitGetAssetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAssetRequestObject struct {
	TagOrID string `json:"tagOrID"`
	Body    *UpdateAssetJSONRequestBody
}

type UpdateAssetResponseObject interface {
	VisitUpdateAssetResponse(w http.ResponseWriter) error
}

type UpdateAsset200JSONResponse Asset

func (response UpdateAsset200JSONResponse) VisitUpdateAssetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAsset400JSONResponse Error

func (response UpdateAsset400JSONResponse) VisitUpdateAssetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAsset401JSONResponse Error

func (response UpdateAsset401JSONResponse) VisitUpdateAssetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAsset404JSONResponse Error

func (response UpdateAsset404JSONResponse) VisitUpdateAssetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListCategoriesRequestObject struct {
	Params ListCategoriesParams
}

type ListCategoriesResponseObject interface {
	VisitListCategoriesResponse(w http.ResponseWriter) error
}

type ListCategories200JSONResponse CategoryListPage

func (response ListCategories200JSONResponse) VisitListCategoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListCustomAttrsRequestObject struct {
	Params ListCustomAttrsParams
}

type ListCustomAttrsResponseObject interface {
	VisitListCustomAttrsResponse(w http.ResponseWriter) error
}

type ListCustomAttrs200JSONResponse CustomAttrListPage

func (response ListCustomAttrs200JSONResponse) VisitListCustomAttrsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListLocationsRequestObject struct {
	Params ListLocationsParams
}

type ListLocationsResponseObject interface {
	VisitListLocationsResponse(w http.ResponseWriter) error
}

type ListLocations200JSONResponse LocationListPage

func (response ListLocations200JSONResponse) VisitListLocationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListPositionCodesRequestObject struct {
	Params ListPositionCodesParams
}

type ListPositionCodesResponseObject interface {
	VisitListPositionCodesResponse(w http.ResponseWriter) error
}

type ListPositionCodes200JSONResponse PositionCodeListPage

func (response ListPositionCodes200JSONResponse) VisitListPositionCodesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListManufacturersRequestObject struct {
	Params ListManufacturersParams
}

type ListManufacturersResponseObject interface {
	VisitListManufacturersResponse(w http.ResponseWriter) error
}

type ListManufacturers200JSONResponse ManufacturerListPage

func (response ListManufacturers200JSONResponse) VisitListManufacturersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListModelsRequestObject struct {
	Params ListModelsParams
}

type ListModelsResponseObject interface {
	VisitListModelsResponse(w http.ResponseWriter) error
}

type ListModels200JSONResponse ModelListPage

func (response ListModels200JSONResponse) VisitListModelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListSuppliersRequestObject struct {
	Params ListSuppliersParams
}

type ListSuppliersResponseObject interface {
	VisitListSuppliersResponse(w http.ResponseWriter) error
}

type ListSuppliers200JSONResponse SupplierListPage

func (response ListSuppliers200JSONResponse) VisitListSuppliersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListTagsRequestObject struct {
	Params ListTagsParams
}

type ListTagsResponseObject interface {
	VisitListTagsResponse(w http.ResponseWriter) error
}

type ListTags200JSONResponse TagListPage

func (response ListTags200JSONResponse) VisitListTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListUsersRequestObject struct {
	Params ListUsersParams
}

type ListUsersResponseObject interface {
	VisitListUsersResponse(w http.ResponseWriter) error
}

type ListUsers200JSONResponse UserListPage

func (response ListUsers200JSONResponse) VisitListUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /v1/assets)
	ListAssets(ctx context.Context, request ListAssetsRequestObject) (ListAssetsResponseObject, error)

	// (POST /v1/assets)
	CreateAsset(ctx context.Context, request CreateAssetRequestObject) (CreateAssetResponseObject, error)

	// (DELETE /v1/assets/{tagOrID})
	DeleteAsset(ctx context.Context, request DeleteAssetRequestObject) (DeleteAssetResponseObject, error)

	// (GET /v1/assets/{tagOrID})
	GetAsset(ctx context.Context, request GetAssetRequestObject) (GetAssetResponseObject, error)

	// (PUT /v1/assets/{tagOrID})
	UpdateAsset(ctx context.Context, request UpdateAssetRequestObject) (UpdateAssetResponseObject, error)

	// (GET /v1/categories)
	ListCategories(ctx context.Context, request ListCategoriesRequestObject) (ListCategoriesResponseObject, error)

	// (GET /v1/custom_attrs)
	ListCustomAttrs(ctx context.Context, request ListCustomAttrsRequestObject) (ListCustomAttrsResponseObject, error)

	// (GET /v1/locations)
	ListLocations(ctx context.Context, request ListLocationsRequestObject) (ListLocationsResponseObject, error)

	// (GET /v1/locations/position_codes)
	ListPositionCodes(ctx context.Context, request ListPositionCodesRequestObject) (ListPositionCodesResponseObject, error)

	// (GET /v1/manufacturers)
	ListManufacturers(ctx context.Context, request ListManufacturersRequestObject) (ListManufacturersResponseObject, error)

	// (GET /v1/models)
	ListModels(ctx context.Context, request ListModelsRequestObject) (ListModelsResponseObject, error)

	// (GET /v1/suppliers)
	ListSuppliers(ctx context.Context, request ListSuppliersRequestObject) (ListSuppliersResponseObject, error)

	// (GET /v1/tags)
	ListTags(ctx context.Context, request ListTagsRequestObject) (ListTagsResponseObject, error)

	// (GET /v1/users)
	ListUsers(ctx context.Context, request ListUsersRequestObject) (ListUsersResponseObject, error)
}

type StrictHandlerFunc func(ctx context.Context, w http.ResponseWriter, r *http.Request, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ListAssets operation middleware
func (sh *strictHandler) ListAssets(w http.ResponseWriter, r *http.Request, params ListAssetsParams) {
	var request ListAssetsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListAssets(ctx, request.(ListAssetsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListAssets")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListAssetsResponseObject); ok {
		if err := validResponse.VisitListAssetsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// CreateAsset operation middleware
func (sh *strictHandler) CreateAsset(w http.ResponseWriter, r *http.Request) {
	var request CreateAssetRequestObject

	var body CreateAssetJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateAsset(ctx, request.(CreateAssetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateAsset")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateAssetResponseObject); ok {
		if err := validResponse.VisitCreateAssetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// DeleteAsset operation middleware
func (sh *strictHandler) DeleteAsset(w http.ResponseWriter, r *http.Request, tagOrID string) {
	var request DeleteAssetRequestObject

	request.TagOrID = tagOrID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAsset(ctx, request.(DeleteAssetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAsset")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteAssetResponseObject); ok {
		if err := validResponse.VisitDeleteAssetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// GetAsset operation middleware
func (sh *strictHandler) GetAsset(w http.ResponseWriter, r *http.Request, tagOrID string, params GetAssetParams) {
	var request GetAssetRequestObject

	request.TagOrID = tagOrID
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAsset(ctx, request.(GetAssetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAsset")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAssetResponseObject); ok {
		if err := validResponse.VisitGetAssetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// UpdateAsset operation middleware
func (sh *strictHandler) UpdateAsset(w http.ResponseWriter, r *http.Request, tagOrID string) {
	var request UpdateAssetRequestObject

	request.TagOrID = tagOrID

	var body UpdateAssetJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateAsset(ctx, request.(UpdateAssetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateAsset")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateAssetResponseObject); ok {
		if err := validResponse.VisitUpdateAssetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// ListCategories operation middleware
func (sh *strictHandler) ListCategories(w http.ResponseWriter, r *http.Request, params ListCategoriesParams) {
	var request ListCategoriesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListCategories(ctx, request.(ListCategoriesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListCategories")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListCategoriesResponseObject); ok {
		if err := validResponse.VisitListCategoriesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// ListCustomAttrs operation middleware
func (sh *strictHandler) ListCustomAttrs(w http.ResponseWriter, r *http.Request, params ListCustomAttrsParams) {
	var request ListCustomAttrsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListCustomAttrs(ctx, request.(ListCustomAttrsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListCustomAttrs")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListCustomAttrsResponseObject); ok {
		if err := validResponse.VisitListCustomAttrsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// ListLocations operation middleware
func (sh *strictHandler) ListLocations(w http.ResponseWriter, r *http.Request, params ListLocationsParams) {
	var request ListLocationsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListLocations(ctx, request.(ListLocationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListLocations")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListLocationsResponseObject); ok {
		if err := validResponse.VisitListLocationsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// ListPositionCodes operation middleware
func (sh *strictHandler) ListPositionCodes(w http.ResponseWriter, r *http.Request, params ListPositionCodesParams) {
	var request ListPositionCodesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListPositionCodes(ctx, request.(ListPositionCodesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListPositionCodes")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListPositionCodesResponseObject); ok {
		if err := validResponse.VisitListPositionCodesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// ListManufacturers operation middleware
func (sh *strictHandler) ListManufacturers(w http.ResponseWriter, r *http.Request, params ListManufacturersParams) {
	var request ListManufacturersRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListManufacturers(ctx, request.(ListManufacturersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListManufacturers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListManufacturersResponseObject); ok {
		if err := validResponse.VisitListManufacturersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// ListModels operation middleware
func (sh *strictHandler) ListModels(w http.ResponseWriter, r *http.Request, params ListModelsParams) {
	var request ListModelsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListModels(ctx, request.(ListModelsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListModels")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListModelsResponseObject); ok {
		if err := validResponse.VisitListModelsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// ListSuppliers operation middleware
func (sh *strictHandler) ListSuppliers(w http.ResponseWriter, r *http.Request, params ListSuppliersParams) {
	var request ListSuppliersRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListSuppliers(ctx, request.(ListSuppliersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListSuppliers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListSuppliersResponseObject); ok {
		if err := validResponse.VisitListSuppliersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// ListTags operation middleware
func (sh *strictHandler) ListTags(w http.ResponseWriter, r *http.Request, params ListTagsParams) {
	var request ListTagsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListTags(ctx, request.(ListTagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListTags")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListTagsResponseObject); ok {
		if err := validResponse.VisitListTagsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}

// ListUsers operation middleware
func (sh *strictHandler) ListUsers(w http.ResponseWriter, r *http.Request, params ListUsersParams) {
	var request ListUsersRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListUsers(ctx, request.(ListUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListUsers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListUsersResponseObject); ok {
		if err := validResponse.VisitListUsersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("Unexpected response type: %T", response))
	}
}
