// Code generated by BobGen sqlite v0.22.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"github.com/aarondl/opt/null"
	"github.com/jaswdr/faker"
	models "github.com/kodeshack/stuff/storage/database/sqlite/models"
)

type CustomAttrNameMod interface {
	Apply(*CustomAttrNameTemplate)
}

type CustomAttrNameModFunc func(*CustomAttrNameTemplate)

func (f CustomAttrNameModFunc) Apply(n *CustomAttrNameTemplate) {
	f(n)
}

type CustomAttrNameModSlice []CustomAttrNameMod

func (mods CustomAttrNameModSlice) Apply(n *CustomAttrNameTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// CustomAttrNameTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type CustomAttrNameTemplate struct {
	Name func() null.Val[string]
	Type func() null.Val[string]

	f *Factory
}

// Apply mods to the CustomAttrNameTemplate
func (o *CustomAttrNameTemplate) Apply(mods ...CustomAttrNameMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.CustomAttrName
// this does nothing with the relationship templates
func (o CustomAttrNameTemplate) toModel() *models.CustomAttrName {
	m := &models.CustomAttrName{}

	if o.Name != nil {
		m.Name = o.Name()
	}
	if o.Type != nil {
		m.Type = o.Type()
	}

	return m
}

// toModels returns an models.CustomAttrNameSlice
// this does nothing with the relationship templates
func (o CustomAttrNameTemplate) toModels(number int) models.CustomAttrNameSlice {
	m := make(models.CustomAttrNameSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.CustomAttrName
// according to the relationships in the template. Nothing is inserted into the db
func (t CustomAttrNameTemplate) setModelRels(o *models.CustomAttrName) {}

// Build returns an *models.CustomAttrName
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use CustomAttrNameTemplate.Create
func (o CustomAttrNameTemplate) Build() *models.CustomAttrName {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.CustomAttrNameSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use CustomAttrNameTemplate.CreateMany
func (o CustomAttrNameTemplate) BuildMany(number int) models.CustomAttrNameSlice {
	m := make(models.CustomAttrNameSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

// CustomAttrName has methods that act as mods for the CustomAttrNameTemplate
var CustomAttrNameMods customAttrNameMods

type customAttrNameMods struct{}

func (m customAttrNameMods) RandomizeAllColumns(f *faker.Faker) CustomAttrNameMod {
	return CustomAttrNameModSlice{
		CustomAttrNameMods.RandomName(f),
		CustomAttrNameMods.RandomType(f),
	}
}

// Set the model columns to this value
func (m customAttrNameMods) Name(val null.Val[string]) CustomAttrNameMod {
	return CustomAttrNameModFunc(func(o *CustomAttrNameTemplate) {
		o.Name = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m customAttrNameMods) NameFunc(f func() null.Val[string]) CustomAttrNameMod {
	return CustomAttrNameModFunc(func(o *CustomAttrNameTemplate) {
		o.Name = f
	})
}

// Clear any values for the column
func (m customAttrNameMods) UnsetName() CustomAttrNameMod {
	return CustomAttrNameModFunc(func(o *CustomAttrNameTemplate) {
		o.Name = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m customAttrNameMods) RandomName(f *faker.Faker) CustomAttrNameMod {
	return CustomAttrNameModFunc(func(o *CustomAttrNameTemplate) {
		o.Name = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

func (m customAttrNameMods) ensureName(f *faker.Faker) CustomAttrNameMod {
	return CustomAttrNameModFunc(func(o *CustomAttrNameTemplate) {
		if o.Name != nil {
			return
		}

		o.Name = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

// Set the model columns to this value
func (m customAttrNameMods) Type(val null.Val[string]) CustomAttrNameMod {
	return CustomAttrNameModFunc(func(o *CustomAttrNameTemplate) {
		o.Type = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m customAttrNameMods) TypeFunc(f func() null.Val[string]) CustomAttrNameMod {
	return CustomAttrNameModFunc(func(o *CustomAttrNameTemplate) {
		o.Type = f
	})
}

// Clear any values for the column
func (m customAttrNameMods) UnsetType() CustomAttrNameMod {
	return CustomAttrNameModFunc(func(o *CustomAttrNameTemplate) {
		o.Type = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m customAttrNameMods) RandomType(f *faker.Faker) CustomAttrNameMod {
	return CustomAttrNameModFunc(func(o *CustomAttrNameTemplate) {
		o.Type = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

func (m customAttrNameMods) ensureType(f *faker.Faker) CustomAttrNameMod {
	return CustomAttrNameModFunc(func(o *CustomAttrNameTemplate) {
		if o.Type != nil {
			return
		}

		o.Type = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}
