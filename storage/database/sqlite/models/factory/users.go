// Code generated by BobGen sqlite v0.22.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/jaswdr/faker"
	models "github.com/kodeshack/stuff/storage/database/sqlite/models"
	"github.com/kodeshack/stuff/storage/database/sqlite/types"
	"github.com/stephenafamo/bob"
)

type UserMod interface {
	Apply(*UserTemplate)
}

type UserModFunc func(*UserTemplate)

func (f UserModFunc) Apply(n *UserTemplate) {
	f(n)
}

type UserModSlice []UserMod

func (mods UserModSlice) Apply(n *UserTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// UserTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type UserTemplate struct {
	ID          func() int64
	Username    func() string
	DisplayName func() string
	IsAdmin     func() bool
	AuthRef     func() string
	CreatedAt   func() types.SQLiteDatetime
	UpdatedAt   func() types.SQLiteDatetime

	r userR
	f *Factory
}

type userR struct {
	CreatedByAssetFiles []*userRCreatedByAssetFilesR
	CreatedByAssets     []*userRCreatedByAssetsR
	CheckedOutToAssets  []*userRCheckedOutToAssetsR
}

type userRCreatedByAssetFilesR struct {
	number int
	o      *AssetFileTemplate
}
type userRCreatedByAssetsR struct {
	number int
	o      *AssetTemplate
}
type userRCheckedOutToAssetsR struct {
	number int
	o      *AssetTemplate
}

// Apply mods to the UserTemplate
func (o *UserTemplate) Apply(mods ...UserMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.User
// this does nothing with the relationship templates
func (o UserTemplate) toModel() *models.User {
	m := &models.User{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.Username != nil {
		m.Username = o.Username()
	}
	if o.DisplayName != nil {
		m.DisplayName = o.DisplayName()
	}
	if o.IsAdmin != nil {
		m.IsAdmin = o.IsAdmin()
	}
	if o.AuthRef != nil {
		m.AuthRef = o.AuthRef()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}

	return m
}

// toModels returns an models.UserSlice
// this does nothing with the relationship templates
func (o UserTemplate) toModels(number int) models.UserSlice {
	m := make(models.UserSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.User
// according to the relationships in the template. Nothing is inserted into the db
func (t UserTemplate) setModelRels(o *models.User) {
	if t.r.CreatedByAssetFiles != nil {
		rel := models.AssetFileSlice{}
		for _, r := range t.r.CreatedByAssetFiles {
			related := r.o.toModels(r.number)
			for _, rel := range related {
				rel.CreatedBy = o.ID
				rel.R.CreatedByUser = o
			}
			rel = append(rel, related...)
		}
		o.R.CreatedByAssetFiles = rel
	}

	if t.r.CreatedByAssets != nil {
		rel := models.AssetSlice{}
		for _, r := range t.r.CreatedByAssets {
			related := r.o.toModels(r.number)
			for _, rel := range related {
				rel.CreatedBy = o.ID
				rel.R.CreatedByUser = o
			}
			rel = append(rel, related...)
		}
		o.R.CreatedByAssets = rel
	}

	if t.r.CheckedOutToAssets != nil {
		rel := models.AssetSlice{}
		for _, r := range t.r.CheckedOutToAssets {
			related := r.o.toModels(r.number)
			for _, rel := range related {
				rel.CheckedOutTo = null.From(o.ID)
				rel.R.CheckedOutToUser = o
			}
			rel = append(rel, related...)
		}
		o.R.CheckedOutToAssets = rel
	}

}

// BuildSetter returns an *models.UserSetter
// this does nothing with the relationship templates
func (o UserTemplate) BuildSetter() *models.UserSetter {
	m := &models.UserSetter{}

	if o.ID != nil {
		m.ID = omit.From(o.ID())
	}
	if o.Username != nil {
		m.Username = omit.From(o.Username())
	}
	if o.DisplayName != nil {
		m.DisplayName = omit.From(o.DisplayName())
	}
	if o.IsAdmin != nil {
		m.IsAdmin = omit.From(o.IsAdmin())
	}
	if o.AuthRef != nil {
		m.AuthRef = omit.From(o.AuthRef())
	}
	if o.CreatedAt != nil {
		m.CreatedAt = omit.From(o.CreatedAt())
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = omit.From(o.UpdatedAt())
	}

	return m
}

// BuildManySetter returns an []*models.UserSetter
// this does nothing with the relationship templates
func (o UserTemplate) BuildManySetter(number int) []*models.UserSetter {
	m := make([]*models.UserSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.User
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use UserTemplate.Create
func (o UserTemplate) Build() *models.User {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.UserSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use UserTemplate.CreateMany
func (o UserTemplate) BuildMany(number int) models.UserSlice {
	m := make(models.UserSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableUser(m *models.UserSetter) {
	if m.Username.IsUnset() {
		m.Username = omit.From(random[string](nil))
	}
	if m.DisplayName.IsUnset() {
		m.DisplayName = omit.From(random[string](nil))
	}
	if m.AuthRef.IsUnset() {
		m.AuthRef = omit.From(random[string](nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.User
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *UserTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.User) (context.Context, error) {
	var err error

	if o.r.CreatedByAssetFiles != nil {
		for _, r := range o.r.CreatedByAssetFiles {
			var rel0 models.AssetFileSlice
			ctx, rel0, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachCreatedByAssetFiles(ctx, exec, rel0...)
			if err != nil {
				return ctx, err
			}
		}
	}

	if o.r.CreatedByAssets != nil {
		for _, r := range o.r.CreatedByAssets {
			var rel1 models.AssetSlice
			ctx, rel1, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachCreatedByAssets(ctx, exec, rel1...)
			if err != nil {
				return ctx, err
			}
		}
	}

	if o.r.CheckedOutToAssets != nil {
		for _, r := range o.r.CheckedOutToAssets {
			var rel2 models.AssetSlice
			ctx, rel2, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachCheckedOutToAssets(ctx, exec, rel2...)
			if err != nil {
				return ctx, err
			}
		}
	}

	return ctx, err
}

// Create builds a user and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *UserTemplate) Create(ctx context.Context, exec bob.Executor) (*models.User, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// create builds a user and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *UserTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.User, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableUser(opt)

	m, err := models.Users.Insert(ctx, exec, opt)
	if err != nil {
		return ctx, nil, err
	}
	ctx = userCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple users and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o UserTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.UserSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// createMany builds multiple users and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o UserTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.UserSlice, error) {
	var err error
	m := make(models.UserSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// User has methods that act as mods for the UserTemplate
var UserMods userMods

type userMods struct{}

func (m userMods) RandomizeAllColumns(f *faker.Faker) UserMod {
	return UserModSlice{
		UserMods.RandomID(f),
		UserMods.RandomUsername(f),
		UserMods.RandomDisplayName(f),
		UserMods.RandomIsAdmin(f),
		UserMods.RandomAuthRef(f),
		UserMods.RandomCreatedAt(f),
		UserMods.RandomUpdatedAt(f),
	}
}

// Set the model columns to this value
func (m userMods) ID(val int64) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.ID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m userMods) IDFunc(f func() int64) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m userMods) UnsetID() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomID(f *faker.Faker) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.ID = func() int64 {
			return random[int64](f)
		}
	})
}

func (m userMods) ensureID(f *faker.Faker) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		if o.ID != nil {
			return
		}

		o.ID = func() int64 {
			return random[int64](f)
		}
	})
}

// Set the model columns to this value
func (m userMods) Username(val string) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Username = func() string { return val }
	})
}

// Set the Column from the function
func (m userMods) UsernameFunc(f func() string) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Username = f
	})
}

// Clear any values for the column
func (m userMods) UnsetUsername() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Username = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomUsername(f *faker.Faker) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Username = func() string {
			return random[string](f)
		}
	})
}

func (m userMods) ensureUsername(f *faker.Faker) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		if o.Username != nil {
			return
		}

		o.Username = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m userMods) DisplayName(val string) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.DisplayName = func() string { return val }
	})
}

// Set the Column from the function
func (m userMods) DisplayNameFunc(f func() string) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.DisplayName = f
	})
}

// Clear any values for the column
func (m userMods) UnsetDisplayName() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.DisplayName = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomDisplayName(f *faker.Faker) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.DisplayName = func() string {
			return random[string](f)
		}
	})
}

func (m userMods) ensureDisplayName(f *faker.Faker) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		if o.DisplayName != nil {
			return
		}

		o.DisplayName = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m userMods) IsAdmin(val bool) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.IsAdmin = func() bool { return val }
	})
}

// Set the Column from the function
func (m userMods) IsAdminFunc(f func() bool) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.IsAdmin = f
	})
}

// Clear any values for the column
func (m userMods) UnsetIsAdmin() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.IsAdmin = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomIsAdmin(f *faker.Faker) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.IsAdmin = func() bool {
			return random[bool](f)
		}
	})
}

func (m userMods) ensureIsAdmin(f *faker.Faker) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		if o.IsAdmin != nil {
			return
		}

		o.IsAdmin = func() bool {
			return random[bool](f)
		}
	})
}

// Set the model columns to this value
func (m userMods) AuthRef(val string) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.AuthRef = func() string { return val }
	})
}

// Set the Column from the function
func (m userMods) AuthRefFunc(f func() string) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.AuthRef = f
	})
}

// Clear any values for the column
func (m userMods) UnsetAuthRef() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.AuthRef = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomAuthRef(f *faker.Faker) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.AuthRef = func() string {
			return random[string](f)
		}
	})
}

func (m userMods) ensureAuthRef(f *faker.Faker) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		if o.AuthRef != nil {
			return
		}

		o.AuthRef = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m userMods) CreatedAt(val types.SQLiteDatetime) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.CreatedAt = func() types.SQLiteDatetime { return val }
	})
}

// Set the Column from the function
func (m userMods) CreatedAtFunc(f func() types.SQLiteDatetime) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m userMods) UnsetCreatedAt() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomCreatedAt(f *faker.Faker) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.CreatedAt = func() types.SQLiteDatetime {
			return random[types.SQLiteDatetime](f)
		}
	})
}

func (m userMods) ensureCreatedAt(f *faker.Faker) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		if o.CreatedAt != nil {
			return
		}

		o.CreatedAt = func() types.SQLiteDatetime {
			return random[types.SQLiteDatetime](f)
		}
	})
}

// Set the model columns to this value
func (m userMods) UpdatedAt(val types.SQLiteDatetime) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.UpdatedAt = func() types.SQLiteDatetime { return val }
	})
}

// Set the Column from the function
func (m userMods) UpdatedAtFunc(f func() types.SQLiteDatetime) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m userMods) UnsetUpdatedAt() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomUpdatedAt(f *faker.Faker) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.UpdatedAt = func() types.SQLiteDatetime {
			return random[types.SQLiteDatetime](f)
		}
	})
}

func (m userMods) ensureUpdatedAt(f *faker.Faker) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		if o.UpdatedAt != nil {
			return
		}

		o.UpdatedAt = func() types.SQLiteDatetime {
			return random[types.SQLiteDatetime](f)
		}
	})
}

func (m userMods) WithCreatedByAssetFiles(number int, related *AssetFileTemplate) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.CreatedByAssetFiles = []*userRCreatedByAssetFilesR{{
			number: number,
			o:      related,
		}}
	})
}

func (m userMods) WithNewCreatedByAssetFiles(number int, mods ...AssetFileMod) UserMod {
	return UserModFunc(func(o *UserTemplate) {

		related := o.f.NewAssetFile(mods...)
		m.WithCreatedByAssetFiles(number, related).Apply(o)
	})
}

func (m userMods) AddCreatedByAssetFiles(number int, related *AssetFileTemplate) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.CreatedByAssetFiles = append(o.r.CreatedByAssetFiles, &userRCreatedByAssetFilesR{
			number: number,
			o:      related,
		})
	})
}

func (m userMods) AddNewCreatedByAssetFiles(number int, mods ...AssetFileMod) UserMod {
	return UserModFunc(func(o *UserTemplate) {

		related := o.f.NewAssetFile(mods...)
		m.AddCreatedByAssetFiles(number, related).Apply(o)
	})
}

func (m userMods) WithoutCreatedByAssetFiles() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.CreatedByAssetFiles = nil
	})
}

func (m userMods) WithCreatedByAssets(number int, related *AssetTemplate) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.CreatedByAssets = []*userRCreatedByAssetsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m userMods) WithNewCreatedByAssets(number int, mods ...AssetMod) UserMod {
	return UserModFunc(func(o *UserTemplate) {

		related := o.f.NewAsset(mods...)
		m.WithCreatedByAssets(number, related).Apply(o)
	})
}

func (m userMods) AddCreatedByAssets(number int, related *AssetTemplate) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.CreatedByAssets = append(o.r.CreatedByAssets, &userRCreatedByAssetsR{
			number: number,
			o:      related,
		})
	})
}

func (m userMods) AddNewCreatedByAssets(number int, mods ...AssetMod) UserMod {
	return UserModFunc(func(o *UserTemplate) {

		related := o.f.NewAsset(mods...)
		m.AddCreatedByAssets(number, related).Apply(o)
	})
}

func (m userMods) WithoutCreatedByAssets() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.CreatedByAssets = nil
	})
}

func (m userMods) WithCheckedOutToAssets(number int, related *AssetTemplate) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.CheckedOutToAssets = []*userRCheckedOutToAssetsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m userMods) WithNewCheckedOutToAssets(number int, mods ...AssetMod) UserMod {
	return UserModFunc(func(o *UserTemplate) {

		related := o.f.NewAsset(mods...)
		m.WithCheckedOutToAssets(number, related).Apply(o)
	})
}

func (m userMods) AddCheckedOutToAssets(number int, related *AssetTemplate) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.CheckedOutToAssets = append(o.r.CheckedOutToAssets, &userRCheckedOutToAssetsR{
			number: number,
			o:      related,
		})
	})
}

func (m userMods) AddNewCheckedOutToAssets(number int, mods ...AssetMod) UserMod {
	return UserModFunc(func(o *UserTemplate) {

		related := o.f.NewAsset(mods...)
		m.AddCheckedOutToAssets(number, related).Apply(o)
	})
}

func (m userMods) WithoutCheckedOutToAssets() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.CheckedOutToAssets = nil
	})
}
