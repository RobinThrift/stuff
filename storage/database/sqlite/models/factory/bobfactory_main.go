// Code generated by BobGen sqlite v0.22.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"strings"

	"github.com/aarondl/opt/null"
	"github.com/jaswdr/faker"
	models "github.com/kodeshack/stuff/storage/database/sqlite/models"
	"github.com/kodeshack/stuff/storage/database/sqlite/types"
)

type Factory struct {
	baseAssetFileMods       AssetFileModSlice
	baseAssetMods           AssetModSlice
	baseLocalAuthUserMods   LocalAuthUserModSlice
	baseSessionMods         SessionModSlice
	baseTagMods             TagModSlice
	baseUserMods            UserModSlice
	baseCustomAttrNameMods  CustomAttrNameModSlice
	baseManufacturerMods    ManufacturerModSlice
	baseStatusNameMods      StatusNameModSlice
	baseStorageLocationMods StorageLocationModSlice
	baseSupplierMods        SupplierModSlice
}

func New() *Factory {
	return &Factory{}
}

func (f *Factory) NewAssetFile(mods ...AssetFileMod) *AssetFileTemplate {
	o := &AssetFileTemplate{f: f}

	if f != nil {
		f.baseAssetFileMods.Apply(o)
	}

	AssetFileModSlice(mods).Apply(o)

	return o
}

func (f *Factory) NewAsset(mods ...AssetMod) *AssetTemplate {
	o := &AssetTemplate{f: f}

	if f != nil {
		f.baseAssetMods.Apply(o)
	}

	AssetModSlice(mods).Apply(o)

	return o
}

func (f *Factory) NewLocalAuthUser(mods ...LocalAuthUserMod) *LocalAuthUserTemplate {
	o := &LocalAuthUserTemplate{f: f}

	if f != nil {
		f.baseLocalAuthUserMods.Apply(o)
	}

	LocalAuthUserModSlice(mods).Apply(o)

	return o
}

func (f *Factory) NewSession(mods ...SessionMod) *SessionTemplate {
	o := &SessionTemplate{f: f}

	if f != nil {
		f.baseSessionMods.Apply(o)
	}

	SessionModSlice(mods).Apply(o)

	return o
}

func (f *Factory) NewTag(mods ...TagMod) *TagTemplate {
	o := &TagTemplate{f: f}

	if f != nil {
		f.baseTagMods.Apply(o)
	}

	TagModSlice(mods).Apply(o)

	return o
}

func (f *Factory) NewUser(mods ...UserMod) *UserTemplate {
	o := &UserTemplate{f: f}

	if f != nil {
		f.baseUserMods.Apply(o)
	}

	UserModSlice(mods).Apply(o)

	return o
}

func (f *Factory) NewCustomAttrName(mods ...CustomAttrNameMod) *CustomAttrNameTemplate {
	o := &CustomAttrNameTemplate{f: f}

	if f != nil {
		f.baseCustomAttrNameMods.Apply(o)
	}

	CustomAttrNameModSlice(mods).Apply(o)

	return o
}

func (f *Factory) NewManufacturer(mods ...ManufacturerMod) *ManufacturerTemplate {
	o := &ManufacturerTemplate{f: f}

	if f != nil {
		f.baseManufacturerMods.Apply(o)
	}

	ManufacturerModSlice(mods).Apply(o)

	return o
}

func (f *Factory) NewStatusName(mods ...StatusNameMod) *StatusNameTemplate {
	o := &StatusNameTemplate{f: f}

	if f != nil {
		f.baseStatusNameMods.Apply(o)
	}

	StatusNameModSlice(mods).Apply(o)

	return o
}

func (f *Factory) NewStorageLocation(mods ...StorageLocationMod) *StorageLocationTemplate {
	o := &StorageLocationTemplate{f: f}

	if f != nil {
		f.baseStorageLocationMods.Apply(o)
	}

	StorageLocationModSlice(mods).Apply(o)

	return o
}

func (f *Factory) NewSupplier(mods ...SupplierMod) *SupplierTemplate {
	o := &SupplierTemplate{f: f}

	if f != nil {
		f.baseSupplierMods.Apply(o)
	}

	SupplierModSlice(mods).Apply(o)

	return o
}

func (f *Factory) ClearBaseAssetFileMods() {
	f.baseAssetFileMods = nil
}

func (f *Factory) AddBaseAssetFileMod(mods ...AssetFileMod) {
	f.baseAssetFileMods = append(f.baseAssetFileMods, mods...)
}

func (f *Factory) ClearBaseAssetMods() {
	f.baseAssetMods = nil
}

func (f *Factory) AddBaseAssetMod(mods ...AssetMod) {
	f.baseAssetMods = append(f.baseAssetMods, mods...)
}

func (f *Factory) ClearBaseLocalAuthUserMods() {
	f.baseLocalAuthUserMods = nil
}

func (f *Factory) AddBaseLocalAuthUserMod(mods ...LocalAuthUserMod) {
	f.baseLocalAuthUserMods = append(f.baseLocalAuthUserMods, mods...)
}

func (f *Factory) ClearBaseSessionMods() {
	f.baseSessionMods = nil
}

func (f *Factory) AddBaseSessionMod(mods ...SessionMod) {
	f.baseSessionMods = append(f.baseSessionMods, mods...)
}

func (f *Factory) ClearBaseTagMods() {
	f.baseTagMods = nil
}

func (f *Factory) AddBaseTagMod(mods ...TagMod) {
	f.baseTagMods = append(f.baseTagMods, mods...)
}

func (f *Factory) ClearBaseUserMods() {
	f.baseUserMods = nil
}

func (f *Factory) AddBaseUserMod(mods ...UserMod) {
	f.baseUserMods = append(f.baseUserMods, mods...)
}

func (f *Factory) ClearBaseCustomAttrNameMods() {
	f.baseCustomAttrNameMods = nil
}

func (f *Factory) AddBaseCustomAttrNameMod(mods ...CustomAttrNameMod) {
	f.baseCustomAttrNameMods = append(f.baseCustomAttrNameMods, mods...)
}

func (f *Factory) ClearBaseManufacturerMods() {
	f.baseManufacturerMods = nil
}

func (f *Factory) AddBaseManufacturerMod(mods ...ManufacturerMod) {
	f.baseManufacturerMods = append(f.baseManufacturerMods, mods...)
}

func (f *Factory) ClearBaseStatusNameMods() {
	f.baseStatusNameMods = nil
}

func (f *Factory) AddBaseStatusNameMod(mods ...StatusNameMod) {
	f.baseStatusNameMods = append(f.baseStatusNameMods, mods...)
}

func (f *Factory) ClearBaseStorageLocationMods() {
	f.baseStorageLocationMods = nil
}

func (f *Factory) AddBaseStorageLocationMod(mods ...StorageLocationMod) {
	f.baseStorageLocationMods = append(f.baseStorageLocationMods, mods...)
}

func (f *Factory) ClearBaseSupplierMods() {
	f.baseSupplierMods = nil
}

func (f *Factory) AddBaseSupplierMod(mods ...SupplierMod) {
	f.baseSupplierMods = append(f.baseSupplierMods, mods...)
}

type contextKey string

var (
	assetFileCtx       = newContextual[*models.AssetFile]("assetFile")
	assetCtx           = newContextual[*models.Asset]("asset")
	localAuthUserCtx   = newContextual[*models.LocalAuthUser]("localAuthUser")
	sessionCtx         = newContextual[*models.Session]("session")
	tagCtx             = newContextual[*models.Tag]("tag")
	userCtx            = newContextual[*models.User]("user")
	customAttrNameCtx  = newContextual[*models.CustomAttrName]("customAttrName")
	manufacturerCtx    = newContextual[*models.Manufacturer]("manufacturer")
	statusNameCtx      = newContextual[*models.StatusName]("statusName")
	storageLocationCtx = newContextual[*models.StorageLocation]("storageLocation")
	supplierCtx        = newContextual[*models.Supplier]("supplier")
)

type contextual[V any] struct {
	key contextKey
}

// This could be weird because of type inference not handling `K` due to `V` having to be manual.
func newContextual[V any](key string) contextual[V] {
	return contextual[V]{key: contextKey(key)}
}

func (k contextual[V]) WithValue(ctx context.Context, val V) context.Context {
	return context.WithValue(ctx, k.key, val)
}

func (k contextual[V]) Value(ctx context.Context) (V, bool) {
	v, ok := ctx.Value(k.key).(V)
	return v, ok
}

var defaultFaker = faker.New()

// random returns a random value for the given type, using the faker
// * If the given faker is nil, the default faker is used
// * The zero value is returned if the type cannot be handled
func random[T any](f *faker.Faker) T {
	if f == nil {
		f = &defaultFaker
	}

	var val T
	switch any(val).(type) {
	default:
		return val
	case string:
		return any(string(strings.Join(f.Lorem().Words(5), " "))).(T)

	case bool:
		return any(bool(f.BoolWithChance(50))).(T)

	case int:
		return any(int(f.Int())).(T)

	case int64:
		return val

	case []byte:
		return val

	case types.SQLiteDatetime:
		return val

	}
}

// randomNull is like [Random], but for null types
func randomNull[T any](f *faker.Faker) null.Val[T] {
	return null.From(random[T](f))
}
