// Code generated by BobGen sqlite v0.22.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"

	"github.com/aarondl/opt/omit"
	"github.com/jaswdr/faker"
	models "github.com/kodeshack/stuff/storage/database/sqlite/models"
	"github.com/kodeshack/stuff/storage/database/sqlite/types"
	"github.com/stephenafamo/bob"
)

type LocalAuthUserMod interface {
	Apply(*LocalAuthUserTemplate)
}

type LocalAuthUserModFunc func(*LocalAuthUserTemplate)

func (f LocalAuthUserModFunc) Apply(n *LocalAuthUserTemplate) {
	f(n)
}

type LocalAuthUserModSlice []LocalAuthUserMod

func (mods LocalAuthUserModSlice) Apply(n *LocalAuthUserTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// LocalAuthUserTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type LocalAuthUserTemplate struct {
	ID                     func() int64
	Username               func() string
	Algorithm              func() string
	Params                 func() string
	Salt                   func() []byte
	Password               func() []byte
	RequiresPasswordChange func() bool
	CreatedAt              func() types.SQLiteDatetime
	UpdatedAt              func() types.SQLiteDatetime

	f *Factory
}

// Apply mods to the LocalAuthUserTemplate
func (o *LocalAuthUserTemplate) Apply(mods ...LocalAuthUserMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.LocalAuthUser
// this does nothing with the relationship templates
func (o LocalAuthUserTemplate) toModel() *models.LocalAuthUser {
	m := &models.LocalAuthUser{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.Username != nil {
		m.Username = o.Username()
	}
	if o.Algorithm != nil {
		m.Algorithm = o.Algorithm()
	}
	if o.Params != nil {
		m.Params = o.Params()
	}
	if o.Salt != nil {
		m.Salt = o.Salt()
	}
	if o.Password != nil {
		m.Password = o.Password()
	}
	if o.RequiresPasswordChange != nil {
		m.RequiresPasswordChange = o.RequiresPasswordChange()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}

	return m
}

// toModels returns an models.LocalAuthUserSlice
// this does nothing with the relationship templates
func (o LocalAuthUserTemplate) toModels(number int) models.LocalAuthUserSlice {
	m := make(models.LocalAuthUserSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.LocalAuthUser
// according to the relationships in the template. Nothing is inserted into the db
func (t LocalAuthUserTemplate) setModelRels(o *models.LocalAuthUser) {}

// BuildSetter returns an *models.LocalAuthUserSetter
// this does nothing with the relationship templates
func (o LocalAuthUserTemplate) BuildSetter() *models.LocalAuthUserSetter {
	m := &models.LocalAuthUserSetter{}

	if o.ID != nil {
		m.ID = omit.From(o.ID())
	}
	if o.Username != nil {
		m.Username = omit.From(o.Username())
	}
	if o.Algorithm != nil {
		m.Algorithm = omit.From(o.Algorithm())
	}
	if o.Params != nil {
		m.Params = omit.From(o.Params())
	}
	if o.Salt != nil {
		m.Salt = omit.From(o.Salt())
	}
	if o.Password != nil {
		m.Password = omit.From(o.Password())
	}
	if o.RequiresPasswordChange != nil {
		m.RequiresPasswordChange = omit.From(o.RequiresPasswordChange())
	}
	if o.CreatedAt != nil {
		m.CreatedAt = omit.From(o.CreatedAt())
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = omit.From(o.UpdatedAt())
	}

	return m
}

// BuildManySetter returns an []*models.LocalAuthUserSetter
// this does nothing with the relationship templates
func (o LocalAuthUserTemplate) BuildManySetter(number int) []*models.LocalAuthUserSetter {
	m := make([]*models.LocalAuthUserSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.LocalAuthUser
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use LocalAuthUserTemplate.Create
func (o LocalAuthUserTemplate) Build() *models.LocalAuthUser {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.LocalAuthUserSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use LocalAuthUserTemplate.CreateMany
func (o LocalAuthUserTemplate) BuildMany(number int) models.LocalAuthUserSlice {
	m := make(models.LocalAuthUserSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableLocalAuthUser(m *models.LocalAuthUserSetter) {
	if m.Username.IsUnset() {
		m.Username = omit.From(random[string](nil))
	}
	if m.Algorithm.IsUnset() {
		m.Algorithm = omit.From(random[string](nil))
	}
	if m.Params.IsUnset() {
		m.Params = omit.From(random[string](nil))
	}
	if m.Salt.IsUnset() {
		m.Salt = omit.From(random[[]byte](nil))
	}
	if m.Password.IsUnset() {
		m.Password = omit.From(random[[]byte](nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.LocalAuthUser
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *LocalAuthUserTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.LocalAuthUser) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a localAuthUser and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *LocalAuthUserTemplate) Create(ctx context.Context, exec bob.Executor) (*models.LocalAuthUser, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// create builds a localAuthUser and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *LocalAuthUserTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.LocalAuthUser, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableLocalAuthUser(opt)

	m, err := models.LocalAuthUsers.Insert(ctx, exec, opt)
	if err != nil {
		return ctx, nil, err
	}
	ctx = localAuthUserCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple localAuthUsers and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o LocalAuthUserTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.LocalAuthUserSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// createMany builds multiple localAuthUsers and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o LocalAuthUserTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.LocalAuthUserSlice, error) {
	var err error
	m := make(models.LocalAuthUserSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// LocalAuthUser has methods that act as mods for the LocalAuthUserTemplate
var LocalAuthUserMods localAuthUserMods

type localAuthUserMods struct{}

func (m localAuthUserMods) RandomizeAllColumns(f *faker.Faker) LocalAuthUserMod {
	return LocalAuthUserModSlice{
		LocalAuthUserMods.RandomID(f),
		LocalAuthUserMods.RandomUsername(f),
		LocalAuthUserMods.RandomAlgorithm(f),
		LocalAuthUserMods.RandomParams(f),
		LocalAuthUserMods.RandomSalt(f),
		LocalAuthUserMods.RandomPassword(f),
		LocalAuthUserMods.RandomRequiresPasswordChange(f),
		LocalAuthUserMods.RandomCreatedAt(f),
		LocalAuthUserMods.RandomUpdatedAt(f),
	}
}

// Set the model columns to this value
func (m localAuthUserMods) ID(val int64) LocalAuthUserMod {
	return LocalAuthUserModFunc(func(o *LocalAuthUserTemplate) {
		o.ID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m localAuthUserMods) IDFunc(f func() int64) LocalAuthUserMod {
	return LocalAuthUserModFunc(func(o *LocalAuthUserTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m localAuthUserMods) UnsetID() LocalAuthUserMod {
	return LocalAuthUserModFunc(func(o *LocalAuthUserTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m localAuthUserMods) RandomID(f *faker.Faker) LocalAuthUserMod {
	return LocalAuthUserModFunc(func(o *LocalAuthUserTemplate) {
		o.ID = func() int64 {
			return random[int64](f)
		}
	})
}

func (m localAuthUserMods) ensureID(f *faker.Faker) LocalAuthUserMod {
	return LocalAuthUserModFunc(func(o *LocalAuthUserTemplate) {
		if o.ID != nil {
			return
		}

		o.ID = func() int64 {
			return random[int64](f)
		}
	})
}

// Set the model columns to this value
func (m localAuthUserMods) Username(val string) LocalAuthUserMod {
	return LocalAuthUserModFunc(func(o *LocalAuthUserTemplate) {
		o.Username = func() string { return val }
	})
}

// Set the Column from the function
func (m localAuthUserMods) UsernameFunc(f func() string) LocalAuthUserMod {
	return LocalAuthUserModFunc(func(o *LocalAuthUserTemplate) {
		o.Username = f
	})
}

// Clear any values for the column
func (m localAuthUserMods) UnsetUsername() LocalAuthUserMod {
	return LocalAuthUserModFunc(func(o *LocalAuthUserTemplate) {
		o.Username = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m localAuthUserMods) RandomUsername(f *faker.Faker) LocalAuthUserMod {
	return LocalAuthUserModFunc(func(o *LocalAuthUserTemplate) {
		o.Username = func() string {
			return random[string](f)
		}
	})
}

func (m localAuthUserMods) ensureUsername(f *faker.Faker) LocalAuthUserMod {
	return LocalAuthUserModFunc(func(o *LocalAuthUserTemplate) {
		if o.Username != nil {
			return
		}

		o.Username = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m localAuthUserMods) Algorithm(val string) LocalAuthUserMod {
	return LocalAuthUserModFunc(func(o *LocalAuthUserTemplate) {
		o.Algorithm = func() string { return val }
	})
}

// Set the Column from the function
func (m localAuthUserMods) AlgorithmFunc(f func() string) LocalAuthUserMod {
	return LocalAuthUserModFunc(func(o *LocalAuthUserTemplate) {
		o.Algorithm = f
	})
}

// Clear any values for the column
func (m localAuthUserMods) UnsetAlgorithm() LocalAuthUserMod {
	return LocalAuthUserModFunc(func(o *LocalAuthUserTemplate) {
		o.Algorithm = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m localAuthUserMods) RandomAlgorithm(f *faker.Faker) LocalAuthUserMod {
	return LocalAuthUserModFunc(func(o *LocalAuthUserTemplate) {
		o.Algorithm = func() string {
			return random[string](f)
		}
	})
}

func (m localAuthUserMods) ensureAlgorithm(f *faker.Faker) LocalAuthUserMod {
	return LocalAuthUserModFunc(func(o *LocalAuthUserTemplate) {
		if o.Algorithm != nil {
			return
		}

		o.Algorithm = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m localAuthUserMods) Params(val string) LocalAuthUserMod {
	return LocalAuthUserModFunc(func(o *LocalAuthUserTemplate) {
		o.Params = func() string { return val }
	})
}

// Set the Column from the function
func (m localAuthUserMods) ParamsFunc(f func() string) LocalAuthUserMod {
	return LocalAuthUserModFunc(func(o *LocalAuthUserTemplate) {
		o.Params = f
	})
}

// Clear any values for the column
func (m localAuthUserMods) UnsetParams() LocalAuthUserMod {
	return LocalAuthUserModFunc(func(o *LocalAuthUserTemplate) {
		o.Params = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m localAuthUserMods) RandomParams(f *faker.Faker) LocalAuthUserMod {
	return LocalAuthUserModFunc(func(o *LocalAuthUserTemplate) {
		o.Params = func() string {
			return random[string](f)
		}
	})
}

func (m localAuthUserMods) ensureParams(f *faker.Faker) LocalAuthUserMod {
	return LocalAuthUserModFunc(func(o *LocalAuthUserTemplate) {
		if o.Params != nil {
			return
		}

		o.Params = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m localAuthUserMods) Salt(val []byte) LocalAuthUserMod {
	return LocalAuthUserModFunc(func(o *LocalAuthUserTemplate) {
		o.Salt = func() []byte { return val }
	})
}

// Set the Column from the function
func (m localAuthUserMods) SaltFunc(f func() []byte) LocalAuthUserMod {
	return LocalAuthUserModFunc(func(o *LocalAuthUserTemplate) {
		o.Salt = f
	})
}

// Clear any values for the column
func (m localAuthUserMods) UnsetSalt() LocalAuthUserMod {
	return LocalAuthUserModFunc(func(o *LocalAuthUserTemplate) {
		o.Salt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m localAuthUserMods) RandomSalt(f *faker.Faker) LocalAuthUserMod {
	return LocalAuthUserModFunc(func(o *LocalAuthUserTemplate) {
		o.Salt = func() []byte {
			return random[[]byte](f)
		}
	})
}

func (m localAuthUserMods) ensureSalt(f *faker.Faker) LocalAuthUserMod {
	return LocalAuthUserModFunc(func(o *LocalAuthUserTemplate) {
		if o.Salt != nil {
			return
		}

		o.Salt = func() []byte {
			return random[[]byte](f)
		}
	})
}

// Set the model columns to this value
func (m localAuthUserMods) Password(val []byte) LocalAuthUserMod {
	return LocalAuthUserModFunc(func(o *LocalAuthUserTemplate) {
		o.Password = func() []byte { return val }
	})
}

// Set the Column from the function
func (m localAuthUserMods) PasswordFunc(f func() []byte) LocalAuthUserMod {
	return LocalAuthUserModFunc(func(o *LocalAuthUserTemplate) {
		o.Password = f
	})
}

// Clear any values for the column
func (m localAuthUserMods) UnsetPassword() LocalAuthUserMod {
	return LocalAuthUserModFunc(func(o *LocalAuthUserTemplate) {
		o.Password = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m localAuthUserMods) RandomPassword(f *faker.Faker) LocalAuthUserMod {
	return LocalAuthUserModFunc(func(o *LocalAuthUserTemplate) {
		o.Password = func() []byte {
			return random[[]byte](f)
		}
	})
}

func (m localAuthUserMods) ensurePassword(f *faker.Faker) LocalAuthUserMod {
	return LocalAuthUserModFunc(func(o *LocalAuthUserTemplate) {
		if o.Password != nil {
			return
		}

		o.Password = func() []byte {
			return random[[]byte](f)
		}
	})
}

// Set the model columns to this value
func (m localAuthUserMods) RequiresPasswordChange(val bool) LocalAuthUserMod {
	return LocalAuthUserModFunc(func(o *LocalAuthUserTemplate) {
		o.RequiresPasswordChange = func() bool { return val }
	})
}

// Set the Column from the function
func (m localAuthUserMods) RequiresPasswordChangeFunc(f func() bool) LocalAuthUserMod {
	return LocalAuthUserModFunc(func(o *LocalAuthUserTemplate) {
		o.RequiresPasswordChange = f
	})
}

// Clear any values for the column
func (m localAuthUserMods) UnsetRequiresPasswordChange() LocalAuthUserMod {
	return LocalAuthUserModFunc(func(o *LocalAuthUserTemplate) {
		o.RequiresPasswordChange = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m localAuthUserMods) RandomRequiresPasswordChange(f *faker.Faker) LocalAuthUserMod {
	return LocalAuthUserModFunc(func(o *LocalAuthUserTemplate) {
		o.RequiresPasswordChange = func() bool {
			return random[bool](f)
		}
	})
}

func (m localAuthUserMods) ensureRequiresPasswordChange(f *faker.Faker) LocalAuthUserMod {
	return LocalAuthUserModFunc(func(o *LocalAuthUserTemplate) {
		if o.RequiresPasswordChange != nil {
			return
		}

		o.RequiresPasswordChange = func() bool {
			return random[bool](f)
		}
	})
}

// Set the model columns to this value
func (m localAuthUserMods) CreatedAt(val types.SQLiteDatetime) LocalAuthUserMod {
	return LocalAuthUserModFunc(func(o *LocalAuthUserTemplate) {
		o.CreatedAt = func() types.SQLiteDatetime { return val }
	})
}

// Set the Column from the function
func (m localAuthUserMods) CreatedAtFunc(f func() types.SQLiteDatetime) LocalAuthUserMod {
	return LocalAuthUserModFunc(func(o *LocalAuthUserTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m localAuthUserMods) UnsetCreatedAt() LocalAuthUserMod {
	return LocalAuthUserModFunc(func(o *LocalAuthUserTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m localAuthUserMods) RandomCreatedAt(f *faker.Faker) LocalAuthUserMod {
	return LocalAuthUserModFunc(func(o *LocalAuthUserTemplate) {
		o.CreatedAt = func() types.SQLiteDatetime {
			return random[types.SQLiteDatetime](f)
		}
	})
}

func (m localAuthUserMods) ensureCreatedAt(f *faker.Faker) LocalAuthUserMod {
	return LocalAuthUserModFunc(func(o *LocalAuthUserTemplate) {
		if o.CreatedAt != nil {
			return
		}

		o.CreatedAt = func() types.SQLiteDatetime {
			return random[types.SQLiteDatetime](f)
		}
	})
}

// Set the model columns to this value
func (m localAuthUserMods) UpdatedAt(val types.SQLiteDatetime) LocalAuthUserMod {
	return LocalAuthUserModFunc(func(o *LocalAuthUserTemplate) {
		o.UpdatedAt = func() types.SQLiteDatetime { return val }
	})
}

// Set the Column from the function
func (m localAuthUserMods) UpdatedAtFunc(f func() types.SQLiteDatetime) LocalAuthUserMod {
	return LocalAuthUserModFunc(func(o *LocalAuthUserTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m localAuthUserMods) UnsetUpdatedAt() LocalAuthUserMod {
	return LocalAuthUserModFunc(func(o *LocalAuthUserTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m localAuthUserMods) RandomUpdatedAt(f *faker.Faker) LocalAuthUserMod {
	return LocalAuthUserModFunc(func(o *LocalAuthUserTemplate) {
		o.UpdatedAt = func() types.SQLiteDatetime {
			return random[types.SQLiteDatetime](f)
		}
	})
}

func (m localAuthUserMods) ensureUpdatedAt(f *faker.Faker) LocalAuthUserMod {
	return LocalAuthUserModFunc(func(o *LocalAuthUserTemplate) {
		if o.UpdatedAt != nil {
			return
		}

		o.UpdatedAt = func() types.SQLiteDatetime {
			return random[types.SQLiteDatetime](f)
		}
	})
}
