// Code generated by BobGen sqlite v0.22.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/jaswdr/faker"
	models "github.com/kodeshack/stuff/storage/database/sqlite/models"
	"github.com/kodeshack/stuff/storage/database/sqlite/types"
	"github.com/stephenafamo/bob"
)

type AssetMod interface {
	Apply(*AssetTemplate)
}

type AssetModFunc func(*AssetTemplate)

func (f AssetModFunc) Apply(n *AssetTemplate) {
	f(n)
}

type AssetModSlice []AssetMod

func (mods AssetModSlice) Apply(n *AssetTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// AssetTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type AssetTemplate struct {
	ID               func() int64
	ParentAssetID    func() null.Val[int64]
	Status           func() string
	Name             func() string
	SerialNo         func() null.Val[string]
	ModelNo          func() null.Val[string]
	Manufacturer     func() null.Val[string]
	Notes            func() null.Val[string]
	ImageURL         func() null.Val[string]
	ThumbnailURL     func() null.Val[string]
	WarrantyUntil    func() null.Val[string]
	CustomAttrs      func() null.Val[string]
	TagID            func() null.Val[int64]
	CheckedOutTo     func() null.Val[int64]
	StorageLocation  func() null.Val[string]
	StorageShelf     func() null.Val[string]
	PurchaseSupplier func() null.Val[string]
	PurchaseOrderNo  func() null.Val[string]
	PurchaseDate     func() null.Val[string]
	PurchaseAmount   func() null.Val[string]
	PurchaseCurrency func() null.Val[string]
	CreatedBy        func() int64
	CreatedAt        func() types.SQLiteDatetime
	UpdatedAt        func() types.SQLiteDatetime

	r assetR
	f *Factory
}

type assetR struct {
	CreatedByUser       *assetRCreatedByUserR
	CheckedOutToUser    *assetRCheckedOutToUserR
	Tag                 *assetRTagR
	ParentAsset         *assetRParentAssetR
	ReverseParentAssets []*assetRReverseParentAssetsR
}

type assetRCreatedByUserR struct {
	o *UserTemplate
}
type assetRCheckedOutToUserR struct {
	o *UserTemplate
}
type assetRTagR struct {
	o *TagTemplate
}
type assetRParentAssetR struct {
	o *AssetTemplate
}
type assetRReverseParentAssetsR struct {
	number int
	o      *AssetTemplate
}

// Apply mods to the AssetTemplate
func (o *AssetTemplate) Apply(mods ...AssetMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.Asset
// this does nothing with the relationship templates
func (o AssetTemplate) toModel() *models.Asset {
	m := &models.Asset{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.ParentAssetID != nil {
		m.ParentAssetID = o.ParentAssetID()
	}
	if o.Status != nil {
		m.Status = o.Status()
	}
	if o.Name != nil {
		m.Name = o.Name()
	}
	if o.SerialNo != nil {
		m.SerialNo = o.SerialNo()
	}
	if o.ModelNo != nil {
		m.ModelNo = o.ModelNo()
	}
	if o.Manufacturer != nil {
		m.Manufacturer = o.Manufacturer()
	}
	if o.Notes != nil {
		m.Notes = o.Notes()
	}
	if o.ImageURL != nil {
		m.ImageURL = o.ImageURL()
	}
	if o.ThumbnailURL != nil {
		m.ThumbnailURL = o.ThumbnailURL()
	}
	if o.WarrantyUntil != nil {
		m.WarrantyUntil = o.WarrantyUntil()
	}
	if o.CustomAttrs != nil {
		m.CustomAttrs = o.CustomAttrs()
	}
	if o.TagID != nil {
		m.TagID = o.TagID()
	}
	if o.CheckedOutTo != nil {
		m.CheckedOutTo = o.CheckedOutTo()
	}
	if o.StorageLocation != nil {
		m.StorageLocation = o.StorageLocation()
	}
	if o.StorageShelf != nil {
		m.StorageShelf = o.StorageShelf()
	}
	if o.PurchaseSupplier != nil {
		m.PurchaseSupplier = o.PurchaseSupplier()
	}
	if o.PurchaseOrderNo != nil {
		m.PurchaseOrderNo = o.PurchaseOrderNo()
	}
	if o.PurchaseDate != nil {
		m.PurchaseDate = o.PurchaseDate()
	}
	if o.PurchaseAmount != nil {
		m.PurchaseAmount = o.PurchaseAmount()
	}
	if o.PurchaseCurrency != nil {
		m.PurchaseCurrency = o.PurchaseCurrency()
	}
	if o.CreatedBy != nil {
		m.CreatedBy = o.CreatedBy()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}

	return m
}

// toModels returns an models.AssetSlice
// this does nothing with the relationship templates
func (o AssetTemplate) toModels(number int) models.AssetSlice {
	m := make(models.AssetSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.Asset
// according to the relationships in the template. Nothing is inserted into the db
func (t AssetTemplate) setModelRels(o *models.Asset) {
	if t.r.CreatedByUser != nil {
		rel := t.r.CreatedByUser.o.toModel()
		rel.R.CreatedByAssets = append(rel.R.CreatedByAssets, o)
		o.CreatedBy = rel.ID
		o.R.CreatedByUser = rel
	}

	if t.r.CheckedOutToUser != nil {
		rel := t.r.CheckedOutToUser.o.toModel()
		rel.R.CheckedOutToAssets = append(rel.R.CheckedOutToAssets, o)
		o.CheckedOutTo = null.From(rel.ID)
		o.R.CheckedOutToUser = rel
	}

	if t.r.Tag != nil {
		rel := t.r.Tag.o.toModel()
		rel.R.Assets = append(rel.R.Assets, o)
		o.TagID = null.From(rel.ID)
		o.R.Tag = rel
	}

	if t.r.ParentAsset != nil {
		rel := t.r.ParentAsset.o.toModel()
		rel.R.ParentAsset = o
		o.ParentAssetID = null.From(rel.ID)
		o.R.ParentAsset = rel
	}

	if t.r.ReverseParentAssets != nil {
		rel := models.AssetSlice{}
		for _, r := range t.r.ReverseParentAssets {
			related := r.o.toModels(r.number)
			for _, rel := range related {
				rel.ParentAssetID = null.From(o.ID)
				rel.R.ReverseParentAssets = append(rel.R.ReverseParentAssets, o)
			}
			rel = append(rel, related...)
		}
		o.R.ReverseParentAssets = rel
	}

}

// BuildSetter returns an *models.AssetSetter
// this does nothing with the relationship templates
func (o AssetTemplate) BuildSetter() *models.AssetSetter {
	m := &models.AssetSetter{}

	if o.ID != nil {
		m.ID = omit.From(o.ID())
	}
	if o.ParentAssetID != nil {
		m.ParentAssetID = omitnull.FromNull(o.ParentAssetID())
	}
	if o.Status != nil {
		m.Status = omit.From(o.Status())
	}
	if o.Name != nil {
		m.Name = omit.From(o.Name())
	}
	if o.SerialNo != nil {
		m.SerialNo = omitnull.FromNull(o.SerialNo())
	}
	if o.ModelNo != nil {
		m.ModelNo = omitnull.FromNull(o.ModelNo())
	}
	if o.Manufacturer != nil {
		m.Manufacturer = omitnull.FromNull(o.Manufacturer())
	}
	if o.Notes != nil {
		m.Notes = omitnull.FromNull(o.Notes())
	}
	if o.ImageURL != nil {
		m.ImageURL = omitnull.FromNull(o.ImageURL())
	}
	if o.ThumbnailURL != nil {
		m.ThumbnailURL = omitnull.FromNull(o.ThumbnailURL())
	}
	if o.WarrantyUntil != nil {
		m.WarrantyUntil = omitnull.FromNull(o.WarrantyUntil())
	}
	if o.CustomAttrs != nil {
		m.CustomAttrs = omitnull.FromNull(o.CustomAttrs())
	}
	if o.TagID != nil {
		m.TagID = omitnull.FromNull(o.TagID())
	}
	if o.CheckedOutTo != nil {
		m.CheckedOutTo = omitnull.FromNull(o.CheckedOutTo())
	}
	if o.StorageLocation != nil {
		m.StorageLocation = omitnull.FromNull(o.StorageLocation())
	}
	if o.StorageShelf != nil {
		m.StorageShelf = omitnull.FromNull(o.StorageShelf())
	}
	if o.PurchaseSupplier != nil {
		m.PurchaseSupplier = omitnull.FromNull(o.PurchaseSupplier())
	}
	if o.PurchaseOrderNo != nil {
		m.PurchaseOrderNo = omitnull.FromNull(o.PurchaseOrderNo())
	}
	if o.PurchaseDate != nil {
		m.PurchaseDate = omitnull.FromNull(o.PurchaseDate())
	}
	if o.PurchaseAmount != nil {
		m.PurchaseAmount = omitnull.FromNull(o.PurchaseAmount())
	}
	if o.PurchaseCurrency != nil {
		m.PurchaseCurrency = omitnull.FromNull(o.PurchaseCurrency())
	}
	if o.CreatedBy != nil {
		m.CreatedBy = omit.From(o.CreatedBy())
	}
	if o.CreatedAt != nil {
		m.CreatedAt = omit.From(o.CreatedAt())
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = omit.From(o.UpdatedAt())
	}

	return m
}

// BuildManySetter returns an []*models.AssetSetter
// this does nothing with the relationship templates
func (o AssetTemplate) BuildManySetter(number int) []*models.AssetSetter {
	m := make([]*models.AssetSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Asset
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use AssetTemplate.Create
func (o AssetTemplate) Build() *models.Asset {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.AssetSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use AssetTemplate.CreateMany
func (o AssetTemplate) BuildMany(number int) models.AssetSlice {
	m := make(models.AssetSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableAsset(m *models.AssetSetter) {
	if m.Status.IsUnset() {
		m.Status = omit.From(random[string](nil))
	}
	if m.Name.IsUnset() {
		m.Name = omit.From(random[string](nil))
	}
	if m.CreatedBy.IsUnset() {
		m.CreatedBy = omit.From(random[int64](nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.Asset
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *AssetTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Asset) (context.Context, error) {
	var err error

	if o.r.CheckedOutToUser != nil {
		var rel1 *models.User
		ctx, rel1, err = o.r.CheckedOutToUser.o.create(ctx, exec)
		if err != nil {
			return ctx, err
		}
		err = m.AttachCheckedOutToUser(ctx, exec, rel1)
		if err != nil {
			return ctx, err
		}
	}

	if o.r.Tag != nil {
		var rel2 *models.Tag
		ctx, rel2, err = o.r.Tag.o.create(ctx, exec)
		if err != nil {
			return ctx, err
		}
		err = m.AttachTag(ctx, exec, rel2)
		if err != nil {
			return ctx, err
		}
	}

	if o.r.ParentAsset != nil {
		var rel3 *models.Asset
		ctx, rel3, err = o.r.ParentAsset.o.create(ctx, exec)
		if err != nil {
			return ctx, err
		}
		err = m.AttachParentAsset(ctx, exec, rel3)
		if err != nil {
			return ctx, err
		}
	}

	if o.r.ReverseParentAssets != nil {
		for _, r := range o.r.ReverseParentAssets {
			var rel4 models.AssetSlice
			ctx, rel4, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachReverseParentAssets(ctx, exec, rel4...)
			if err != nil {
				return ctx, err
			}
		}
	}

	return ctx, err
}

// Create builds a asset and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *AssetTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Asset, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// create builds a asset and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *AssetTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Asset, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableAsset(opt)

	var rel0 *models.User
	if o.r.CreatedByUser == nil {
		var ok bool
		rel0, ok = userCtx.Value(ctx)
		if !ok {
			AssetMods.WithNewCreatedByUser().Apply(o)
		}
	}
	if o.r.CreatedByUser != nil {
		ctx, rel0, err = o.r.CreatedByUser.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}
	opt.CreatedBy = omit.From(rel0.ID)

	m, err := models.Assets.Insert(ctx, exec, opt)
	if err != nil {
		return ctx, nil, err
	}
	ctx = assetCtx.WithValue(ctx, m)

	m.R.CreatedByUser = rel0

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple assets and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o AssetTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.AssetSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// createMany builds multiple assets and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o AssetTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.AssetSlice, error) {
	var err error
	m := make(models.AssetSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Asset has methods that act as mods for the AssetTemplate
var AssetMods assetMods

type assetMods struct{}

func (m assetMods) RandomizeAllColumns(f *faker.Faker) AssetMod {
	return AssetModSlice{
		AssetMods.RandomID(f),
		AssetMods.RandomParentAssetID(f),
		AssetMods.RandomStatus(f),
		AssetMods.RandomName(f),
		AssetMods.RandomSerialNo(f),
		AssetMods.RandomModelNo(f),
		AssetMods.RandomManufacturer(f),
		AssetMods.RandomNotes(f),
		AssetMods.RandomImageURL(f),
		AssetMods.RandomThumbnailURL(f),
		AssetMods.RandomWarrantyUntil(f),
		AssetMods.RandomCustomAttrs(f),
		AssetMods.RandomTagID(f),
		AssetMods.RandomCheckedOutTo(f),
		AssetMods.RandomStorageLocation(f),
		AssetMods.RandomStorageShelf(f),
		AssetMods.RandomPurchaseSupplier(f),
		AssetMods.RandomPurchaseOrderNo(f),
		AssetMods.RandomPurchaseDate(f),
		AssetMods.RandomPurchaseAmount(f),
		AssetMods.RandomPurchaseCurrency(f),
		AssetMods.RandomCreatedBy(f),
		AssetMods.RandomCreatedAt(f),
		AssetMods.RandomUpdatedAt(f),
	}
}

// Set the model columns to this value
func (m assetMods) ID(val int64) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.ID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m assetMods) IDFunc(f func() int64) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m assetMods) UnsetID() AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m assetMods) RandomID(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.ID = func() int64 {
			return random[int64](f)
		}
	})
}

func (m assetMods) ensureID(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		if o.ID != nil {
			return
		}

		o.ID = func() int64 {
			return random[int64](f)
		}
	})
}

// Set the model columns to this value
func (m assetMods) ParentAssetID(val null.Val[int64]) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.ParentAssetID = func() null.Val[int64] { return val }
	})
}

// Set the Column from the function
func (m assetMods) ParentAssetIDFunc(f func() null.Val[int64]) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.ParentAssetID = f
	})
}

// Clear any values for the column
func (m assetMods) UnsetParentAssetID() AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.ParentAssetID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m assetMods) RandomParentAssetID(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.ParentAssetID = func() null.Val[int64] {
			return randomNull[int64](f)
		}
	})
}

func (m assetMods) ensureParentAssetID(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		if o.ParentAssetID != nil {
			return
		}

		o.ParentAssetID = func() null.Val[int64] {
			return randomNull[int64](f)
		}
	})
}

// Set the model columns to this value
func (m assetMods) Status(val string) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.Status = func() string { return val }
	})
}

// Set the Column from the function
func (m assetMods) StatusFunc(f func() string) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.Status = f
	})
}

// Clear any values for the column
func (m assetMods) UnsetStatus() AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.Status = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m assetMods) RandomStatus(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.Status = func() string {
			return random[string](f)
		}
	})
}

func (m assetMods) ensureStatus(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		if o.Status != nil {
			return
		}

		o.Status = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m assetMods) Name(val string) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.Name = func() string { return val }
	})
}

// Set the Column from the function
func (m assetMods) NameFunc(f func() string) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.Name = f
	})
}

// Clear any values for the column
func (m assetMods) UnsetName() AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.Name = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m assetMods) RandomName(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.Name = func() string {
			return random[string](f)
		}
	})
}

func (m assetMods) ensureName(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		if o.Name != nil {
			return
		}

		o.Name = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m assetMods) SerialNo(val null.Val[string]) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.SerialNo = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m assetMods) SerialNoFunc(f func() null.Val[string]) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.SerialNo = f
	})
}

// Clear any values for the column
func (m assetMods) UnsetSerialNo() AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.SerialNo = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m assetMods) RandomSerialNo(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.SerialNo = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

func (m assetMods) ensureSerialNo(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		if o.SerialNo != nil {
			return
		}

		o.SerialNo = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

// Set the model columns to this value
func (m assetMods) ModelNo(val null.Val[string]) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.ModelNo = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m assetMods) ModelNoFunc(f func() null.Val[string]) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.ModelNo = f
	})
}

// Clear any values for the column
func (m assetMods) UnsetModelNo() AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.ModelNo = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m assetMods) RandomModelNo(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.ModelNo = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

func (m assetMods) ensureModelNo(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		if o.ModelNo != nil {
			return
		}

		o.ModelNo = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

// Set the model columns to this value
func (m assetMods) Manufacturer(val null.Val[string]) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.Manufacturer = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m assetMods) ManufacturerFunc(f func() null.Val[string]) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.Manufacturer = f
	})
}

// Clear any values for the column
func (m assetMods) UnsetManufacturer() AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.Manufacturer = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m assetMods) RandomManufacturer(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.Manufacturer = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

func (m assetMods) ensureManufacturer(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		if o.Manufacturer != nil {
			return
		}

		o.Manufacturer = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

// Set the model columns to this value
func (m assetMods) Notes(val null.Val[string]) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.Notes = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m assetMods) NotesFunc(f func() null.Val[string]) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.Notes = f
	})
}

// Clear any values for the column
func (m assetMods) UnsetNotes() AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.Notes = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m assetMods) RandomNotes(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.Notes = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

func (m assetMods) ensureNotes(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		if o.Notes != nil {
			return
		}

		o.Notes = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

// Set the model columns to this value
func (m assetMods) ImageURL(val null.Val[string]) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.ImageURL = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m assetMods) ImageURLFunc(f func() null.Val[string]) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.ImageURL = f
	})
}

// Clear any values for the column
func (m assetMods) UnsetImageURL() AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.ImageURL = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m assetMods) RandomImageURL(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.ImageURL = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

func (m assetMods) ensureImageURL(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		if o.ImageURL != nil {
			return
		}

		o.ImageURL = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

// Set the model columns to this value
func (m assetMods) ThumbnailURL(val null.Val[string]) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.ThumbnailURL = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m assetMods) ThumbnailURLFunc(f func() null.Val[string]) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.ThumbnailURL = f
	})
}

// Clear any values for the column
func (m assetMods) UnsetThumbnailURL() AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.ThumbnailURL = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m assetMods) RandomThumbnailURL(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.ThumbnailURL = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

func (m assetMods) ensureThumbnailURL(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		if o.ThumbnailURL != nil {
			return
		}

		o.ThumbnailURL = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

// Set the model columns to this value
func (m assetMods) WarrantyUntil(val null.Val[string]) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.WarrantyUntil = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m assetMods) WarrantyUntilFunc(f func() null.Val[string]) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.WarrantyUntil = f
	})
}

// Clear any values for the column
func (m assetMods) UnsetWarrantyUntil() AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.WarrantyUntil = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m assetMods) RandomWarrantyUntil(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.WarrantyUntil = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

func (m assetMods) ensureWarrantyUntil(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		if o.WarrantyUntil != nil {
			return
		}

		o.WarrantyUntil = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

// Set the model columns to this value
func (m assetMods) CustomAttrs(val null.Val[string]) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.CustomAttrs = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m assetMods) CustomAttrsFunc(f func() null.Val[string]) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.CustomAttrs = f
	})
}

// Clear any values for the column
func (m assetMods) UnsetCustomAttrs() AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.CustomAttrs = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m assetMods) RandomCustomAttrs(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.CustomAttrs = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

func (m assetMods) ensureCustomAttrs(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		if o.CustomAttrs != nil {
			return
		}

		o.CustomAttrs = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

// Set the model columns to this value
func (m assetMods) TagID(val null.Val[int64]) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.TagID = func() null.Val[int64] { return val }
	})
}

// Set the Column from the function
func (m assetMods) TagIDFunc(f func() null.Val[int64]) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.TagID = f
	})
}

// Clear any values for the column
func (m assetMods) UnsetTagID() AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.TagID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m assetMods) RandomTagID(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.TagID = func() null.Val[int64] {
			return randomNull[int64](f)
		}
	})
}

func (m assetMods) ensureTagID(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		if o.TagID != nil {
			return
		}

		o.TagID = func() null.Val[int64] {
			return randomNull[int64](f)
		}
	})
}

// Set the model columns to this value
func (m assetMods) CheckedOutTo(val null.Val[int64]) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.CheckedOutTo = func() null.Val[int64] { return val }
	})
}

// Set the Column from the function
func (m assetMods) CheckedOutToFunc(f func() null.Val[int64]) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.CheckedOutTo = f
	})
}

// Clear any values for the column
func (m assetMods) UnsetCheckedOutTo() AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.CheckedOutTo = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m assetMods) RandomCheckedOutTo(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.CheckedOutTo = func() null.Val[int64] {
			return randomNull[int64](f)
		}
	})
}

func (m assetMods) ensureCheckedOutTo(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		if o.CheckedOutTo != nil {
			return
		}

		o.CheckedOutTo = func() null.Val[int64] {
			return randomNull[int64](f)
		}
	})
}

// Set the model columns to this value
func (m assetMods) StorageLocation(val null.Val[string]) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.StorageLocation = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m assetMods) StorageLocationFunc(f func() null.Val[string]) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.StorageLocation = f
	})
}

// Clear any values for the column
func (m assetMods) UnsetStorageLocation() AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.StorageLocation = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m assetMods) RandomStorageLocation(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.StorageLocation = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

func (m assetMods) ensureStorageLocation(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		if o.StorageLocation != nil {
			return
		}

		o.StorageLocation = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

// Set the model columns to this value
func (m assetMods) StorageShelf(val null.Val[string]) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.StorageShelf = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m assetMods) StorageShelfFunc(f func() null.Val[string]) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.StorageShelf = f
	})
}

// Clear any values for the column
func (m assetMods) UnsetStorageShelf() AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.StorageShelf = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m assetMods) RandomStorageShelf(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.StorageShelf = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

func (m assetMods) ensureStorageShelf(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		if o.StorageShelf != nil {
			return
		}

		o.StorageShelf = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

// Set the model columns to this value
func (m assetMods) PurchaseSupplier(val null.Val[string]) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.PurchaseSupplier = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m assetMods) PurchaseSupplierFunc(f func() null.Val[string]) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.PurchaseSupplier = f
	})
}

// Clear any values for the column
func (m assetMods) UnsetPurchaseSupplier() AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.PurchaseSupplier = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m assetMods) RandomPurchaseSupplier(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.PurchaseSupplier = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

func (m assetMods) ensurePurchaseSupplier(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		if o.PurchaseSupplier != nil {
			return
		}

		o.PurchaseSupplier = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

// Set the model columns to this value
func (m assetMods) PurchaseOrderNo(val null.Val[string]) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.PurchaseOrderNo = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m assetMods) PurchaseOrderNoFunc(f func() null.Val[string]) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.PurchaseOrderNo = f
	})
}

// Clear any values for the column
func (m assetMods) UnsetPurchaseOrderNo() AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.PurchaseOrderNo = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m assetMods) RandomPurchaseOrderNo(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.PurchaseOrderNo = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

func (m assetMods) ensurePurchaseOrderNo(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		if o.PurchaseOrderNo != nil {
			return
		}

		o.PurchaseOrderNo = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

// Set the model columns to this value
func (m assetMods) PurchaseDate(val null.Val[string]) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.PurchaseDate = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m assetMods) PurchaseDateFunc(f func() null.Val[string]) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.PurchaseDate = f
	})
}

// Clear any values for the column
func (m assetMods) UnsetPurchaseDate() AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.PurchaseDate = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m assetMods) RandomPurchaseDate(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.PurchaseDate = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

func (m assetMods) ensurePurchaseDate(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		if o.PurchaseDate != nil {
			return
		}

		o.PurchaseDate = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

// Set the model columns to this value
func (m assetMods) PurchaseAmount(val null.Val[string]) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.PurchaseAmount = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m assetMods) PurchaseAmountFunc(f func() null.Val[string]) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.PurchaseAmount = f
	})
}

// Clear any values for the column
func (m assetMods) UnsetPurchaseAmount() AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.PurchaseAmount = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m assetMods) RandomPurchaseAmount(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.PurchaseAmount = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

func (m assetMods) ensurePurchaseAmount(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		if o.PurchaseAmount != nil {
			return
		}

		o.PurchaseAmount = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

// Set the model columns to this value
func (m assetMods) PurchaseCurrency(val null.Val[string]) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.PurchaseCurrency = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m assetMods) PurchaseCurrencyFunc(f func() null.Val[string]) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.PurchaseCurrency = f
	})
}

// Clear any values for the column
func (m assetMods) UnsetPurchaseCurrency() AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.PurchaseCurrency = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m assetMods) RandomPurchaseCurrency(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.PurchaseCurrency = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

func (m assetMods) ensurePurchaseCurrency(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		if o.PurchaseCurrency != nil {
			return
		}

		o.PurchaseCurrency = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

// Set the model columns to this value
func (m assetMods) CreatedBy(val int64) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.CreatedBy = func() int64 { return val }
	})
}

// Set the Column from the function
func (m assetMods) CreatedByFunc(f func() int64) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.CreatedBy = f
	})
}

// Clear any values for the column
func (m assetMods) UnsetCreatedBy() AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.CreatedBy = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m assetMods) RandomCreatedBy(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.CreatedBy = func() int64 {
			return random[int64](f)
		}
	})
}

func (m assetMods) ensureCreatedBy(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		if o.CreatedBy != nil {
			return
		}

		o.CreatedBy = func() int64 {
			return random[int64](f)
		}
	})
}

// Set the model columns to this value
func (m assetMods) CreatedAt(val types.SQLiteDatetime) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.CreatedAt = func() types.SQLiteDatetime { return val }
	})
}

// Set the Column from the function
func (m assetMods) CreatedAtFunc(f func() types.SQLiteDatetime) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m assetMods) UnsetCreatedAt() AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m assetMods) RandomCreatedAt(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.CreatedAt = func() types.SQLiteDatetime {
			return random[types.SQLiteDatetime](f)
		}
	})
}

func (m assetMods) ensureCreatedAt(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		if o.CreatedAt != nil {
			return
		}

		o.CreatedAt = func() types.SQLiteDatetime {
			return random[types.SQLiteDatetime](f)
		}
	})
}

// Set the model columns to this value
func (m assetMods) UpdatedAt(val types.SQLiteDatetime) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.UpdatedAt = func() types.SQLiteDatetime { return val }
	})
}

// Set the Column from the function
func (m assetMods) UpdatedAtFunc(f func() types.SQLiteDatetime) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m assetMods) UnsetUpdatedAt() AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m assetMods) RandomUpdatedAt(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.UpdatedAt = func() types.SQLiteDatetime {
			return random[types.SQLiteDatetime](f)
		}
	})
}

func (m assetMods) ensureUpdatedAt(f *faker.Faker) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		if o.UpdatedAt != nil {
			return
		}

		o.UpdatedAt = func() types.SQLiteDatetime {
			return random[types.SQLiteDatetime](f)
		}
	})
}

func (m assetMods) WithCreatedByUser(rel *UserTemplate) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.r.CreatedByUser = &assetRCreatedByUserR{
			o: rel,
		}
	})
}

func (m assetMods) WithNewCreatedByUser(mods ...UserMod) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {

		related := o.f.NewUser(mods...)

		m.WithCreatedByUser(related).Apply(o)
	})
}

func (m assetMods) WithoutCreatedByUser() AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.r.CreatedByUser = nil
	})
}

func (m assetMods) WithCheckedOutToUser(rel *UserTemplate) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.r.CheckedOutToUser = &assetRCheckedOutToUserR{
			o: rel,
		}
	})
}

func (m assetMods) WithNewCheckedOutToUser(mods ...UserMod) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {

		related := o.f.NewUser(mods...)

		m.WithCheckedOutToUser(related).Apply(o)
	})
}

func (m assetMods) WithoutCheckedOutToUser() AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.r.CheckedOutToUser = nil
	})
}

func (m assetMods) WithTag(rel *TagTemplate) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.r.Tag = &assetRTagR{
			o: rel,
		}
	})
}

func (m assetMods) WithNewTag(mods ...TagMod) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {

		related := o.f.NewTag(mods...)

		m.WithTag(related).Apply(o)
	})
}

func (m assetMods) WithoutTag() AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.r.Tag = nil
	})
}

func (m assetMods) WithParentAsset(rel *AssetTemplate) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.r.ParentAsset = &assetRParentAssetR{
			o: rel,
		}
	})
}

func (m assetMods) WithNewParentAsset(mods ...AssetMod) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {

		related := o.f.NewAsset(mods...)

		m.WithParentAsset(related).Apply(o)
	})
}

func (m assetMods) WithoutParentAsset() AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.r.ParentAsset = nil
	})
}

func (m assetMods) WithReverseParentAssets(number int, related *AssetTemplate) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.r.ReverseParentAssets = []*assetRReverseParentAssetsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m assetMods) WithNewReverseParentAssets(number int, mods ...AssetMod) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {

		related := o.f.NewAsset(mods...)
		m.WithReverseParentAssets(number, related).Apply(o)
	})
}

func (m assetMods) AddReverseParentAssets(number int, related *AssetTemplate) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.r.ReverseParentAssets = append(o.r.ReverseParentAssets, &assetRReverseParentAssetsR{
			number: number,
			o:      related,
		})
	})
}

func (m assetMods) AddNewReverseParentAssets(number int, mods ...AssetMod) AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {

		related := o.f.NewAsset(mods...)
		m.AddReverseParentAssets(number, related).Apply(o)
	})
}

func (m assetMods) WithoutReverseParentAssets() AssetMod {
	return AssetModFunc(func(o *AssetTemplate) {
		o.r.ReverseParentAssets = nil
	})
}
