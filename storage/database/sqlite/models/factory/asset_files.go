// Code generated by BobGen sqlite v0.22.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"

	"github.com/aarondl/opt/omit"
	"github.com/jaswdr/faker"
	models "github.com/kodeshack/stuff/storage/database/sqlite/models"
	"github.com/kodeshack/stuff/storage/database/sqlite/types"
	"github.com/stephenafamo/bob"
)

type AssetFileMod interface {
	Apply(*AssetFileTemplate)
}

type AssetFileModFunc func(*AssetFileTemplate)

func (f AssetFileModFunc) Apply(n *AssetFileTemplate) {
	f(n)
}

type AssetFileModSlice []AssetFileMod

func (mods AssetFileModSlice) Apply(n *AssetFileTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// AssetFileTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type AssetFileTemplate struct {
	ID        func() int64
	AssetID   func() int64
	Name      func() string
	Filetype  func() string
	Sha256    func() []byte
	SizeBytes func() int64
	CreatedBy func() int64
	CreatedAt func() types.SQLiteDatetime
	UpdatedAt func() types.SQLiteDatetime

	r assetFileR
	f *Factory
}

type assetFileR struct {
	CreatedByUser *assetFileRCreatedByUserR
}

type assetFileRCreatedByUserR struct {
	o *UserTemplate
}

// Apply mods to the AssetFileTemplate
func (o *AssetFileTemplate) Apply(mods ...AssetFileMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.AssetFile
// this does nothing with the relationship templates
func (o AssetFileTemplate) toModel() *models.AssetFile {
	m := &models.AssetFile{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.AssetID != nil {
		m.AssetID = o.AssetID()
	}
	if o.Name != nil {
		m.Name = o.Name()
	}
	if o.Filetype != nil {
		m.Filetype = o.Filetype()
	}
	if o.Sha256 != nil {
		m.Sha256 = o.Sha256()
	}
	if o.SizeBytes != nil {
		m.SizeBytes = o.SizeBytes()
	}
	if o.CreatedBy != nil {
		m.CreatedBy = o.CreatedBy()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}

	return m
}

// toModels returns an models.AssetFileSlice
// this does nothing with the relationship templates
func (o AssetFileTemplate) toModels(number int) models.AssetFileSlice {
	m := make(models.AssetFileSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.AssetFile
// according to the relationships in the template. Nothing is inserted into the db
func (t AssetFileTemplate) setModelRels(o *models.AssetFile) {
	if t.r.CreatedByUser != nil {
		rel := t.r.CreatedByUser.o.toModel()
		rel.R.CreatedByAssetFiles = append(rel.R.CreatedByAssetFiles, o)
		o.CreatedBy = rel.ID
		o.R.CreatedByUser = rel
	}

}

// BuildSetter returns an *models.AssetFileSetter
// this does nothing with the relationship templates
func (o AssetFileTemplate) BuildSetter() *models.AssetFileSetter {
	m := &models.AssetFileSetter{}

	if o.ID != nil {
		m.ID = omit.From(o.ID())
	}
	if o.AssetID != nil {
		m.AssetID = omit.From(o.AssetID())
	}
	if o.Name != nil {
		m.Name = omit.From(o.Name())
	}
	if o.Filetype != nil {
		m.Filetype = omit.From(o.Filetype())
	}
	if o.Sha256 != nil {
		m.Sha256 = omit.From(o.Sha256())
	}
	if o.SizeBytes != nil {
		m.SizeBytes = omit.From(o.SizeBytes())
	}
	if o.CreatedBy != nil {
		m.CreatedBy = omit.From(o.CreatedBy())
	}
	if o.CreatedAt != nil {
		m.CreatedAt = omit.From(o.CreatedAt())
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = omit.From(o.UpdatedAt())
	}

	return m
}

// BuildManySetter returns an []*models.AssetFileSetter
// this does nothing with the relationship templates
func (o AssetFileTemplate) BuildManySetter(number int) []*models.AssetFileSetter {
	m := make([]*models.AssetFileSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.AssetFile
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use AssetFileTemplate.Create
func (o AssetFileTemplate) Build() *models.AssetFile {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.AssetFileSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use AssetFileTemplate.CreateMany
func (o AssetFileTemplate) BuildMany(number int) models.AssetFileSlice {
	m := make(models.AssetFileSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableAssetFile(m *models.AssetFileSetter) {
	if m.AssetID.IsUnset() {
		m.AssetID = omit.From(random[int64](nil))
	}
	if m.Name.IsUnset() {
		m.Name = omit.From(random[string](nil))
	}
	if m.Filetype.IsUnset() {
		m.Filetype = omit.From(random[string](nil))
	}
	if m.Sha256.IsUnset() {
		m.Sha256 = omit.From(random[[]byte](nil))
	}
	if m.SizeBytes.IsUnset() {
		m.SizeBytes = omit.From(random[int64](nil))
	}
	if m.CreatedBy.IsUnset() {
		m.CreatedBy = omit.From(random[int64](nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.AssetFile
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *AssetFileTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.AssetFile) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a assetFile and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *AssetFileTemplate) Create(ctx context.Context, exec bob.Executor) (*models.AssetFile, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// create builds a assetFile and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *AssetFileTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.AssetFile, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableAssetFile(opt)

	var rel0 *models.User
	if o.r.CreatedByUser == nil {
		var ok bool
		rel0, ok = userCtx.Value(ctx)
		if !ok {
			AssetFileMods.WithNewCreatedByUser().Apply(o)
		}
	}
	if o.r.CreatedByUser != nil {
		ctx, rel0, err = o.r.CreatedByUser.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}
	opt.CreatedBy = omit.From(rel0.ID)

	m, err := models.AssetFiles.Insert(ctx, exec, opt)
	if err != nil {
		return ctx, nil, err
	}
	ctx = assetFileCtx.WithValue(ctx, m)

	m.R.CreatedByUser = rel0

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple assetFiles and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o AssetFileTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.AssetFileSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// createMany builds multiple assetFiles and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o AssetFileTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.AssetFileSlice, error) {
	var err error
	m := make(models.AssetFileSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// AssetFile has methods that act as mods for the AssetFileTemplate
var AssetFileMods assetFileMods

type assetFileMods struct{}

func (m assetFileMods) RandomizeAllColumns(f *faker.Faker) AssetFileMod {
	return AssetFileModSlice{
		AssetFileMods.RandomID(f),
		AssetFileMods.RandomAssetID(f),
		AssetFileMods.RandomName(f),
		AssetFileMods.RandomFiletype(f),
		AssetFileMods.RandomSha256(f),
		AssetFileMods.RandomSizeBytes(f),
		AssetFileMods.RandomCreatedBy(f),
		AssetFileMods.RandomCreatedAt(f),
		AssetFileMods.RandomUpdatedAt(f),
	}
}

// Set the model columns to this value
func (m assetFileMods) ID(val int64) AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		o.ID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m assetFileMods) IDFunc(f func() int64) AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m assetFileMods) UnsetID() AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m assetFileMods) RandomID(f *faker.Faker) AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		o.ID = func() int64 {
			return random[int64](f)
		}
	})
}

func (m assetFileMods) ensureID(f *faker.Faker) AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		if o.ID != nil {
			return
		}

		o.ID = func() int64 {
			return random[int64](f)
		}
	})
}

// Set the model columns to this value
func (m assetFileMods) AssetID(val int64) AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		o.AssetID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m assetFileMods) AssetIDFunc(f func() int64) AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		o.AssetID = f
	})
}

// Clear any values for the column
func (m assetFileMods) UnsetAssetID() AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		o.AssetID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m assetFileMods) RandomAssetID(f *faker.Faker) AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		o.AssetID = func() int64 {
			return random[int64](f)
		}
	})
}

func (m assetFileMods) ensureAssetID(f *faker.Faker) AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		if o.AssetID != nil {
			return
		}

		o.AssetID = func() int64 {
			return random[int64](f)
		}
	})
}

// Set the model columns to this value
func (m assetFileMods) Name(val string) AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		o.Name = func() string { return val }
	})
}

// Set the Column from the function
func (m assetFileMods) NameFunc(f func() string) AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		o.Name = f
	})
}

// Clear any values for the column
func (m assetFileMods) UnsetName() AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		o.Name = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m assetFileMods) RandomName(f *faker.Faker) AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		o.Name = func() string {
			return random[string](f)
		}
	})
}

func (m assetFileMods) ensureName(f *faker.Faker) AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		if o.Name != nil {
			return
		}

		o.Name = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m assetFileMods) Filetype(val string) AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		o.Filetype = func() string { return val }
	})
}

// Set the Column from the function
func (m assetFileMods) FiletypeFunc(f func() string) AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		o.Filetype = f
	})
}

// Clear any values for the column
func (m assetFileMods) UnsetFiletype() AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		o.Filetype = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m assetFileMods) RandomFiletype(f *faker.Faker) AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		o.Filetype = func() string {
			return random[string](f)
		}
	})
}

func (m assetFileMods) ensureFiletype(f *faker.Faker) AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		if o.Filetype != nil {
			return
		}

		o.Filetype = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m assetFileMods) Sha256(val []byte) AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		o.Sha256 = func() []byte { return val }
	})
}

// Set the Column from the function
func (m assetFileMods) Sha256Func(f func() []byte) AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		o.Sha256 = f
	})
}

// Clear any values for the column
func (m assetFileMods) UnsetSha256() AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		o.Sha256 = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m assetFileMods) RandomSha256(f *faker.Faker) AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		o.Sha256 = func() []byte {
			return random[[]byte](f)
		}
	})
}

func (m assetFileMods) ensureSha256(f *faker.Faker) AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		if o.Sha256 != nil {
			return
		}

		o.Sha256 = func() []byte {
			return random[[]byte](f)
		}
	})
}

// Set the model columns to this value
func (m assetFileMods) SizeBytes(val int64) AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		o.SizeBytes = func() int64 { return val }
	})
}

// Set the Column from the function
func (m assetFileMods) SizeBytesFunc(f func() int64) AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		o.SizeBytes = f
	})
}

// Clear any values for the column
func (m assetFileMods) UnsetSizeBytes() AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		o.SizeBytes = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m assetFileMods) RandomSizeBytes(f *faker.Faker) AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		o.SizeBytes = func() int64 {
			return random[int64](f)
		}
	})
}

func (m assetFileMods) ensureSizeBytes(f *faker.Faker) AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		if o.SizeBytes != nil {
			return
		}

		o.SizeBytes = func() int64 {
			return random[int64](f)
		}
	})
}

// Set the model columns to this value
func (m assetFileMods) CreatedBy(val int64) AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		o.CreatedBy = func() int64 { return val }
	})
}

// Set the Column from the function
func (m assetFileMods) CreatedByFunc(f func() int64) AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		o.CreatedBy = f
	})
}

// Clear any values for the column
func (m assetFileMods) UnsetCreatedBy() AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		o.CreatedBy = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m assetFileMods) RandomCreatedBy(f *faker.Faker) AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		o.CreatedBy = func() int64 {
			return random[int64](f)
		}
	})
}

func (m assetFileMods) ensureCreatedBy(f *faker.Faker) AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		if o.CreatedBy != nil {
			return
		}

		o.CreatedBy = func() int64 {
			return random[int64](f)
		}
	})
}

// Set the model columns to this value
func (m assetFileMods) CreatedAt(val types.SQLiteDatetime) AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		o.CreatedAt = func() types.SQLiteDatetime { return val }
	})
}

// Set the Column from the function
func (m assetFileMods) CreatedAtFunc(f func() types.SQLiteDatetime) AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m assetFileMods) UnsetCreatedAt() AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m assetFileMods) RandomCreatedAt(f *faker.Faker) AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		o.CreatedAt = func() types.SQLiteDatetime {
			return random[types.SQLiteDatetime](f)
		}
	})
}

func (m assetFileMods) ensureCreatedAt(f *faker.Faker) AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		if o.CreatedAt != nil {
			return
		}

		o.CreatedAt = func() types.SQLiteDatetime {
			return random[types.SQLiteDatetime](f)
		}
	})
}

// Set the model columns to this value
func (m assetFileMods) UpdatedAt(val types.SQLiteDatetime) AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		o.UpdatedAt = func() types.SQLiteDatetime { return val }
	})
}

// Set the Column from the function
func (m assetFileMods) UpdatedAtFunc(f func() types.SQLiteDatetime) AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m assetFileMods) UnsetUpdatedAt() AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m assetFileMods) RandomUpdatedAt(f *faker.Faker) AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		o.UpdatedAt = func() types.SQLiteDatetime {
			return random[types.SQLiteDatetime](f)
		}
	})
}

func (m assetFileMods) ensureUpdatedAt(f *faker.Faker) AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		if o.UpdatedAt != nil {
			return
		}

		o.UpdatedAt = func() types.SQLiteDatetime {
			return random[types.SQLiteDatetime](f)
		}
	})
}

func (m assetFileMods) WithCreatedByUser(rel *UserTemplate) AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		o.r.CreatedByUser = &assetFileRCreatedByUserR{
			o: rel,
		}
	})
}

func (m assetFileMods) WithNewCreatedByUser(mods ...UserMod) AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {

		related := o.f.NewUser(mods...)

		m.WithCreatedByUser(related).Apply(o)
	})
}

func (m assetFileMods) WithoutCreatedByUser() AssetFileMod {
	return AssetFileModFunc(func(o *AssetFileTemplate) {
		o.r.CreatedByUser = nil
	})
}
