// Code generated by BobGen sqlite v0.22.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"github.com/aarondl/opt/null"
	"github.com/jaswdr/faker"
	models "github.com/kodeshack/stuff/storage/database/sqlite/models"
)

type StorageLocationMod interface {
	Apply(*StorageLocationTemplate)
}

type StorageLocationModFunc func(*StorageLocationTemplate)

func (f StorageLocationModFunc) Apply(n *StorageLocationTemplate) {
	f(n)
}

type StorageLocationModSlice []StorageLocationMod

func (mods StorageLocationModSlice) Apply(n *StorageLocationTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// StorageLocationTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type StorageLocationTemplate struct {
	Name func() null.Val[string]

	f *Factory
}

// Apply mods to the StorageLocationTemplate
func (o *StorageLocationTemplate) Apply(mods ...StorageLocationMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.StorageLocation
// this does nothing with the relationship templates
func (o StorageLocationTemplate) toModel() *models.StorageLocation {
	m := &models.StorageLocation{}

	if o.Name != nil {
		m.Name = o.Name()
	}

	return m
}

// toModels returns an models.StorageLocationSlice
// this does nothing with the relationship templates
func (o StorageLocationTemplate) toModels(number int) models.StorageLocationSlice {
	m := make(models.StorageLocationSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.StorageLocation
// according to the relationships in the template. Nothing is inserted into the db
func (t StorageLocationTemplate) setModelRels(o *models.StorageLocation) {}

// Build returns an *models.StorageLocation
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use StorageLocationTemplate.Create
func (o StorageLocationTemplate) Build() *models.StorageLocation {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.StorageLocationSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use StorageLocationTemplate.CreateMany
func (o StorageLocationTemplate) BuildMany(number int) models.StorageLocationSlice {
	m := make(models.StorageLocationSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

// StorageLocation has methods that act as mods for the StorageLocationTemplate
var StorageLocationMods storageLocationMods

type storageLocationMods struct{}

func (m storageLocationMods) RandomizeAllColumns(f *faker.Faker) StorageLocationMod {
	return StorageLocationModSlice{
		StorageLocationMods.RandomName(f),
	}
}

// Set the model columns to this value
func (m storageLocationMods) Name(val null.Val[string]) StorageLocationMod {
	return StorageLocationModFunc(func(o *StorageLocationTemplate) {
		o.Name = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m storageLocationMods) NameFunc(f func() null.Val[string]) StorageLocationMod {
	return StorageLocationModFunc(func(o *StorageLocationTemplate) {
		o.Name = f
	})
}

// Clear any values for the column
func (m storageLocationMods) UnsetName() StorageLocationMod {
	return StorageLocationModFunc(func(o *StorageLocationTemplate) {
		o.Name = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m storageLocationMods) RandomName(f *faker.Faker) StorageLocationMod {
	return StorageLocationModFunc(func(o *StorageLocationTemplate) {
		o.Name = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

func (m storageLocationMods) ensureName(f *faker.Faker) StorageLocationMod {
	return StorageLocationModFunc(func(o *StorageLocationTemplate) {
		if o.Name != nil {
			return
		}

		o.Name = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}
