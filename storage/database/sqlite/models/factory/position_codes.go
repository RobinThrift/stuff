// Code generated by BobGen sqlite v0.22.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"github.com/aarondl/opt/null"
	"github.com/jaswdr/faker"
	models "github.com/kodeshack/stuff/storage/database/sqlite/models"
)

type PositionCodeMod interface {
	Apply(*PositionCodeTemplate)
}

type PositionCodeModFunc func(*PositionCodeTemplate)

func (f PositionCodeModFunc) Apply(n *PositionCodeTemplate) {
	f(n)
}

type PositionCodeModSlice []PositionCodeMod

func (mods PositionCodeModSlice) Apply(n *PositionCodeTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// PositionCodeTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type PositionCodeTemplate struct {
	Code func() null.Val[string]

	f *Factory
}

// Apply mods to the PositionCodeTemplate
func (o *PositionCodeTemplate) Apply(mods ...PositionCodeMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.PositionCode
// this does nothing with the relationship templates
func (o PositionCodeTemplate) toModel() *models.PositionCode {
	m := &models.PositionCode{}

	if o.Code != nil {
		m.Code = o.Code()
	}

	return m
}

// toModels returns an models.PositionCodeSlice
// this does nothing with the relationship templates
func (o PositionCodeTemplate) toModels(number int) models.PositionCodeSlice {
	m := make(models.PositionCodeSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.PositionCode
// according to the relationships in the template. Nothing is inserted into the db
func (t PositionCodeTemplate) setModelRels(o *models.PositionCode) {}

// Build returns an *models.PositionCode
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use PositionCodeTemplate.Create
func (o PositionCodeTemplate) Build() *models.PositionCode {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.PositionCodeSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use PositionCodeTemplate.CreateMany
func (o PositionCodeTemplate) BuildMany(number int) models.PositionCodeSlice {
	m := make(models.PositionCodeSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

// PositionCode has methods that act as mods for the PositionCodeTemplate
var PositionCodeMods positionCodeMods

type positionCodeMods struct{}

func (m positionCodeMods) RandomizeAllColumns(f *faker.Faker) PositionCodeMod {
	return PositionCodeModSlice{
		PositionCodeMods.RandomCode(f),
	}
}

// Set the model columns to this value
func (m positionCodeMods) Code(val null.Val[string]) PositionCodeMod {
	return PositionCodeModFunc(func(o *PositionCodeTemplate) {
		o.Code = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m positionCodeMods) CodeFunc(f func() null.Val[string]) PositionCodeMod {
	return PositionCodeModFunc(func(o *PositionCodeTemplate) {
		o.Code = f
	})
}

// Clear any values for the column
func (m positionCodeMods) UnsetCode() PositionCodeMod {
	return PositionCodeModFunc(func(o *PositionCodeTemplate) {
		o.Code = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m positionCodeMods) RandomCode(f *faker.Faker) PositionCodeMod {
	return PositionCodeModFunc(func(o *PositionCodeTemplate) {
		o.Code = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

func (m positionCodeMods) ensureCode(f *faker.Faker) PositionCodeMod {
	return PositionCodeModFunc(func(o *PositionCodeTemplate) {
		if o.Code != nil {
			return
		}

		o.Code = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}
