// Code generated by BobGen sqlite v0.22.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"

	"github.com/stephenafamo/bob/dialect/sqlite"
	"github.com/stephenafamo/bob/dialect/sqlite/dialect"
)

var TableNames = struct {
	AssetFiles      string
	Assets          string
	LocalAuthUsers  string
	Sessions        string
	Tags            string
	Users           string
	Categories      string
	CustomAttrNames string
	Locations       string
	Manufacturers   string
	PositionCodes   string
	Suppliers       string
}{
	AssetFiles:      "asset_files",
	Assets:          "assets",
	LocalAuthUsers:  "local_auth_users",
	Sessions:        "sessions",
	Tags:            "tags",
	Users:           "users",
	Categories:      "categories",
	CustomAttrNames: "custom_attr_names",
	Locations:       "locations",
	Manufacturers:   "manufacturers",
	PositionCodes:   "position_codes",
	Suppliers:       "suppliers",
}

var ColumnNames = struct {
	AssetFiles      assetFileColumnNames
	Assets          assetColumnNames
	LocalAuthUsers  localAuthUserColumnNames
	Sessions        sessionColumnNames
	Tags            tagColumnNames
	Users           userColumnNames
	Categories      categoryColumnNames
	CustomAttrNames customAttrNameColumnNames
	Locations       locationColumnNames
	Manufacturers   manufacturerColumnNames
	PositionCodes   positionCodeColumnNames
	Suppliers       supplierColumnNames
}{
	AssetFiles: assetFileColumnNames{
		ID:        "id",
		AssetID:   "asset_id",
		Name:      "name",
		Filetype:  "filetype",
		Sha256:    "sha256",
		SizeBytes: "size_bytes",
		CreatedBy: "created_by",
		CreatedAt: "created_at",
		UpdatedAt: "updated_at",
	},
	Assets: assetColumnNames{
		ID:               "id",
		ParentAssetID:    "parent_asset_id",
		Status:           "status",
		Tag:              "tag",
		Name:             "name",
		Category:         "category",
		Model:            "model",
		ModelNo:          "model_no",
		SerialNo:         "serial_no",
		Manufacturer:     "manufacturer",
		Notes:            "notes",
		ImageURL:         "image_url",
		ThumbnailURL:     "thumbnail_url",
		WarrantyUntil:    "warranty_until",
		CustomAttrs:      "custom_attrs",
		CheckedOutTo:     "checked_out_to",
		Location:         "location",
		PositionCode:     "position_code",
		PurchaseSupplier: "purchase_supplier",
		PurchaseOrderNo:  "purchase_order_no",
		PurchaseDate:     "purchase_date",
		PurchaseAmount:   "purchase_amount",
		PurchaseCurrency: "purchase_currency",
		CreatedBy:        "created_by",
		CreatedAt:        "created_at",
		UpdatedAt:        "updated_at",
	},
	LocalAuthUsers: localAuthUserColumnNames{
		ID:                     "id",
		Username:               "username",
		Algorithm:              "algorithm",
		Params:                 "params",
		Salt:                   "salt",
		Password:               "password",
		RequiresPasswordChange: "requires_password_change",
		CreatedAt:              "created_at",
		UpdatedAt:              "updated_at",
	},
	Sessions: sessionColumnNames{
		ID:        "id",
		Token:     "token",
		Data:      "data",
		ExpiresAt: "expires_at",
	},
	Tags: tagColumnNames{
		ID:        "id",
		Tag:       "tag",
		CreatedAt: "created_at",
		UpdatedAt: "updated_at",
	},
	Users: userColumnNames{
		ID:          "id",
		Username:    "username",
		DisplayName: "display_name",
		IsAdmin:     "is_admin",
		AuthRef:     "auth_ref",
		CreatedAt:   "created_at",
		UpdatedAt:   "updated_at",
	},
	Categories: categoryColumnNames{
		Name: "name",
	},
	CustomAttrNames: customAttrNameColumnNames{
		Name: "name",
		Type: "type",
	},
	Locations: locationColumnNames{
		Name: "name",
	},
	Manufacturers: manufacturerColumnNames{
		Name: "name",
	},
	PositionCodes: positionCodeColumnNames{
		Code: "code",
	},
	Suppliers: supplierColumnNames{
		Name: "name",
	},
}

var (
	SelectWhere = Where[*dialect.SelectQuery]()
	InsertWhere = Where[*dialect.InsertQuery]()
	UpdateWhere = Where[*dialect.UpdateQuery]()
	DeleteWhere = Where[*dialect.DeleteQuery]()
)

func Where[Q sqlite.Filterable]() struct {
	AssetFiles      assetFileWhere[Q]
	Assets          assetWhere[Q]
	LocalAuthUsers  localAuthUserWhere[Q]
	Sessions        sessionWhere[Q]
	Tags            tagWhere[Q]
	Users           userWhere[Q]
	Categories      categoryWhere[Q]
	CustomAttrNames customAttrNameWhere[Q]
	Locations       locationWhere[Q]
	Manufacturers   manufacturerWhere[Q]
	PositionCodes   positionCodeWhere[Q]
	Suppliers       supplierWhere[Q]
} {
	return struct {
		AssetFiles      assetFileWhere[Q]
		Assets          assetWhere[Q]
		LocalAuthUsers  localAuthUserWhere[Q]
		Sessions        sessionWhere[Q]
		Tags            tagWhere[Q]
		Users           userWhere[Q]
		Categories      categoryWhere[Q]
		CustomAttrNames customAttrNameWhere[Q]
		Locations       locationWhere[Q]
		Manufacturers   manufacturerWhere[Q]
		PositionCodes   positionCodeWhere[Q]
		Suppliers       supplierWhere[Q]
	}{
		AssetFiles:      AssetFileWhere[Q](),
		Assets:          AssetWhere[Q](),
		LocalAuthUsers:  LocalAuthUserWhere[Q](),
		Sessions:        SessionWhere[Q](),
		Tags:            TagWhere[Q](),
		Users:           UserWhere[Q](),
		Categories:      CategoryWhere[Q](),
		CustomAttrNames: CustomAttrNameWhere[Q](),
		Locations:       LocationWhere[Q](),
		Manufacturers:   ManufacturerWhere[Q](),
		PositionCodes:   PositionCodeWhere[Q](),
		Suppliers:       SupplierWhere[Q](),
	}
}

var (
	SelectJoins = getJoins[*dialect.SelectQuery]
	UpdateJoins = getJoins[*dialect.UpdateQuery]
)

type joinSet[Q any] struct {
	InnerJoin Q
	LeftJoin  Q
	RightJoin Q
}

type joins[Q dialect.Joinable] struct {
	AssetFiles joinSet[assetFileRelationshipJoins[Q]]
	Assets     joinSet[assetRelationshipJoins[Q]]
	Tags       joinSet[tagRelationshipJoins[Q]]
	Users      joinSet[userRelationshipJoins[Q]]
}

func getJoins[Q dialect.Joinable](ctx context.Context) joins[Q] {
	return joins[Q]{
		AssetFiles: assetFilesJoin[Q](ctx),
		Assets:     assetsJoin[Q](ctx),
		Tags:       tagsJoin[Q](ctx),
		Users:      usersJoin[Q](ctx),
	}
}
