// Code generated by BobGen sqlite v0.22.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"

	"github.com/stephenafamo/bob/dialect/sqlite"
	"github.com/stephenafamo/bob/dialect/sqlite/dialect"
)

var TableNames = struct {
	AssetFiles      string
	AssetParts      string
	AssetPurchases  string
	Assets          string
	AssetsFTS       string
	LocalAuthUsers  string
	Sessions        string
	Tags            string
	Users           string
	Categories      string
	CustomAttrNames string
	Locations       string
	Manufacturers   string
	Models          string
	PositionCodes   string
	Suppliers       string
}{
	AssetFiles:      "asset_files",
	AssetParts:      "asset_parts",
	AssetPurchases:  "asset_purchases",
	Assets:          "assets",
	AssetsFTS:       "assets_fts",
	LocalAuthUsers:  "local_auth_users",
	Sessions:        "sessions",
	Tags:            "tags",
	Users:           "users",
	Categories:      "categories",
	CustomAttrNames: "custom_attr_names",
	Locations:       "locations",
	Manufacturers:   "manufacturers",
	Models:          "models",
	PositionCodes:   "position_codes",
	Suppliers:       "suppliers",
}

var ColumnNames = struct {
	AssetFiles      assetFileColumnNames
	AssetParts      assetPartColumnNames
	AssetPurchases  assetPurchaseColumnNames
	Assets          assetColumnNames
	AssetsFTS       assetsFTColumnNames
	LocalAuthUsers  localAuthUserColumnNames
	Sessions        sessionColumnNames
	Tags            tagColumnNames
	Users           userColumnNames
	Categories      categoryColumnNames
	CustomAttrNames customAttrNameColumnNames
	Locations       locationColumnNames
	Manufacturers   manufacturerColumnNames
	Models          modelColumnNames
	PositionCodes   positionCodeColumnNames
	Suppliers       supplierColumnNames
}{
	AssetFiles: assetFileColumnNames{
		ID:         "id",
		AssetID:    "asset_id",
		Name:       "name",
		Filetype:   "filetype",
		Sha256:     "sha256",
		SizeBytes:  "size_bytes",
		CreatedBy:  "created_by",
		CreatedAt:  "created_at",
		UpdatedAt:  "updated_at",
		FullPath:   "full_path",
		PublicPath: "public_path",
	},
	AssetParts: assetPartColumnNames{
		ID:           "id",
		AssetID:      "asset_id",
		Tag:          "tag",
		Name:         "name",
		Location:     "location",
		PositionCode: "position_code",
		Notes:        "notes",
		CreatedBy:    "created_by",
		CreatedAt:    "created_at",
		UpdatedAt:    "updated_at",
	},
	AssetPurchases: assetPurchaseColumnNames{
		ID:        "id",
		AssetID:   "asset_id",
		Supplier:  "supplier",
		OrderNo:   "order_no",
		OrderDate: "order_date",
		Amount:    "amount",
		Currency:  "currency",
		CreatedBy: "created_by",
		CreatedAt: "created_at",
		UpdatedAt: "updated_at",
	},
	Assets: assetColumnNames{
		ID:                "id",
		ParentAssetID:     "parent_asset_id",
		Status:            "status",
		Tag:               "tag",
		Name:              "name",
		Category:          "category",
		Model:             "model",
		ModelNo:           "model_no",
		SerialNo:          "serial_no",
		Manufacturer:      "manufacturer",
		Notes:             "notes",
		ImageURL:          "image_url",
		ThumbnailURL:      "thumbnail_url",
		WarrantyUntil:     "warranty_until",
		CustomAttrs:       "custom_attrs",
		CheckedOutTo:      "checked_out_to",
		Location:          "location",
		PositionCode:      "position_code",
		PartsTotalCounter: "parts_total_counter",
		CreatedBy:         "created_by",
		CreatedAt:         "created_at",
		UpdatedAt:         "updated_at",
		Type:              "type",
		Quantity:          "quantity",
		QuantityUnit:      "quantity_unit",
	},
	AssetsFTS: assetsFTColumnNames{
		ID:           "id",
		Name:         "name",
		Tag:          "tag",
		Category:     "category",
		Model:        "model",
		ModelNo:      "model_no",
		SerialNo:     "serial_no",
		Manufacturer: "manufacturer",
		Notes:        "notes",
		CustomAttrs:  "custom_attrs",
		AssetsFTS:    "assets_fts",
		Rank:         "rank",
	},
	LocalAuthUsers: localAuthUserColumnNames{
		ID:                     "id",
		Username:               "username",
		Algorithm:              "algorithm",
		Params:                 "params",
		Salt:                   "salt",
		Password:               "password",
		RequiresPasswordChange: "requires_password_change",
		CreatedAt:              "created_at",
		UpdatedAt:              "updated_at",
	},
	Sessions: sessionColumnNames{
		ID:        "id",
		Token:     "token",
		Data:      "data",
		ExpiresAt: "expires_at",
	},
	Tags: tagColumnNames{
		ID:        "id",
		Tag:       "tag",
		InUse:     "in_use",
		CreatedAt: "created_at",
		UpdatedAt: "updated_at",
	},
	Users: userColumnNames{
		ID:          "id",
		Username:    "username",
		DisplayName: "display_name",
		IsAdmin:     "is_admin",
		AuthRef:     "auth_ref",
		CreatedAt:   "created_at",
		UpdatedAt:   "updated_at",
	},
	Categories: categoryColumnNames{
		CatName: "cat_name",
	},
	CustomAttrNames: customAttrNameColumnNames{
		AttrName: "attr_name",
	},
	Locations: locationColumnNames{
		LocName: "loc_name",
	},
	Manufacturers: manufacturerColumnNames{
		Name: "name",
	},
	Models: modelColumnNames{
		Model:   "model",
		ModelNo: "model_no",
	},
	PositionCodes: positionCodeColumnNames{
		PosCode: "pos_code",
	},
	Suppliers: supplierColumnNames{
		Name: "name",
	},
}

var (
	SelectWhere = Where[*dialect.SelectQuery]()
	InsertWhere = Where[*dialect.InsertQuery]()
	UpdateWhere = Where[*dialect.UpdateQuery]()
	DeleteWhere = Where[*dialect.DeleteQuery]()
)

func Where[Q sqlite.Filterable]() struct {
	AssetFiles      assetFileWhere[Q]
	AssetParts      assetPartWhere[Q]
	AssetPurchases  assetPurchaseWhere[Q]
	Assets          assetWhere[Q]
	AssetsFTS       assetsFTWhere[Q]
	LocalAuthUsers  localAuthUserWhere[Q]
	Sessions        sessionWhere[Q]
	Tags            tagWhere[Q]
	Users           userWhere[Q]
	Categories      categoryWhere[Q]
	CustomAttrNames customAttrNameWhere[Q]
	Locations       locationWhere[Q]
	Manufacturers   manufacturerWhere[Q]
	Models          modelWhere[Q]
	PositionCodes   positionCodeWhere[Q]
	Suppliers       supplierWhere[Q]
} {
	return struct {
		AssetFiles      assetFileWhere[Q]
		AssetParts      assetPartWhere[Q]
		AssetPurchases  assetPurchaseWhere[Q]
		Assets          assetWhere[Q]
		AssetsFTS       assetsFTWhere[Q]
		LocalAuthUsers  localAuthUserWhere[Q]
		Sessions        sessionWhere[Q]
		Tags            tagWhere[Q]
		Users           userWhere[Q]
		Categories      categoryWhere[Q]
		CustomAttrNames customAttrNameWhere[Q]
		Locations       locationWhere[Q]
		Manufacturers   manufacturerWhere[Q]
		Models          modelWhere[Q]
		PositionCodes   positionCodeWhere[Q]
		Suppliers       supplierWhere[Q]
	}{
		AssetFiles:      AssetFileWhere[Q](),
		AssetParts:      AssetPartWhere[Q](),
		AssetPurchases:  AssetPurchaseWhere[Q](),
		Assets:          AssetWhere[Q](),
		AssetsFTS:       AssetsFTWhere[Q](),
		LocalAuthUsers:  LocalAuthUserWhere[Q](),
		Sessions:        SessionWhere[Q](),
		Tags:            TagWhere[Q](),
		Users:           UserWhere[Q](),
		Categories:      CategoryWhere[Q](),
		CustomAttrNames: CustomAttrNameWhere[Q](),
		Locations:       LocationWhere[Q](),
		Manufacturers:   ManufacturerWhere[Q](),
		Models:          ModelWhere[Q](),
		PositionCodes:   PositionCodeWhere[Q](),
		Suppliers:       SupplierWhere[Q](),
	}
}

var (
	SelectJoins = getJoins[*dialect.SelectQuery]
	UpdateJoins = getJoins[*dialect.UpdateQuery]
)

type joinSet[Q any] struct {
	InnerJoin Q
	LeftJoin  Q
	RightJoin Q
}

type joins[Q dialect.Joinable] struct {
	AssetFiles     joinSet[assetFileRelationshipJoins[Q]]
	AssetParts     joinSet[assetPartRelationshipJoins[Q]]
	AssetPurchases joinSet[assetPurchaseRelationshipJoins[Q]]
	Assets         joinSet[assetRelationshipJoins[Q]]
	Tags           joinSet[tagRelationshipJoins[Q]]
	Users          joinSet[userRelationshipJoins[Q]]
}

func getJoins[Q dialect.Joinable](ctx context.Context) joins[Q] {
	return joins[Q]{
		AssetFiles:     assetFilesJoin[Q](ctx),
		AssetParts:     assetPartsJoin[Q](ctx),
		AssetPurchases: assetPurchasesJoin[Q](ctx),
		Assets:         assetsJoin[Q](ctx),
		Tags:           tagsJoin[Q](ctx),
		Users:          usersJoin[Q](ctx),
	}
}
