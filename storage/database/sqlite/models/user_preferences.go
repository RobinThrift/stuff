// Code generated by BobGen sqlite v0.22.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"

	"github.com/RobinThrift/stuff/storage/database/sqlite/types"
	"github.com/aarondl/opt/omit"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/clause"
	"github.com/stephenafamo/bob/dialect/sqlite"
	"github.com/stephenafamo/bob/dialect/sqlite/dialect"
	"github.com/stephenafamo/bob/dialect/sqlite/im"
	"github.com/stephenafamo/bob/dialect/sqlite/sm"
	"github.com/stephenafamo/bob/dialect/sqlite/um"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// UserPreference is an object representing the database table.
type UserPreference struct {
	ID        int64                `db:"id,pk" `
	UserID    int64                `db:"user_id" `
	Key       string               `db:"key" `
	Value     []byte               `db:"value" `
	CreatedAt types.SQLiteDatetime `db:"created_at" `
	UpdatedAt types.SQLiteDatetime `db:"updated_at" `

	R userPreferenceR `db:"-" `
}

// UserPreferenceSlice is an alias for a slice of pointers to UserPreference.
// This should almost always be used instead of []*UserPreference.
type UserPreferenceSlice []*UserPreference

// UserPreferences contains methods to work with the user_preferences table
var UserPreferences = sqlite.NewTablex[*UserPreference, UserPreferenceSlice, *UserPreferenceSetter]("", "user_preferences")

// UserPreferencesQuery is a query on the user_preferences table
type UserPreferencesQuery = *sqlite.ViewQuery[*UserPreference, UserPreferenceSlice]

// UserPreferencesStmt is a prepared statment on user_preferences
type UserPreferencesStmt = bob.QueryStmt[*UserPreference, UserPreferenceSlice]

// userPreferenceR is where relationships are stored.
type userPreferenceR struct {
	User *User // fk_user_preferences_0
}

// UserPreferenceSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type UserPreferenceSetter struct {
	ID        omit.Val[int64]                `db:"id,pk"`
	UserID    omit.Val[int64]                `db:"user_id"`
	Key       omit.Val[string]               `db:"key"`
	Value     omit.Val[[]byte]               `db:"value"`
	CreatedAt omit.Val[types.SQLiteDatetime] `db:"created_at"`
	UpdatedAt omit.Val[types.SQLiteDatetime] `db:"updated_at"`
}

func (s UserPreferenceSetter) SetColumns() []string {
	vals := make([]string, 0, 6)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.UserID.IsUnset() {
		vals = append(vals, "user_id")
	}

	if !s.Key.IsUnset() {
		vals = append(vals, "key")
	}

	if !s.Value.IsUnset() {
		vals = append(vals, "value")
	}

	if !s.CreatedAt.IsUnset() {
		vals = append(vals, "created_at")
	}

	if !s.UpdatedAt.IsUnset() {
		vals = append(vals, "updated_at")
	}

	return vals
}

func (s UserPreferenceSetter) Overwrite(t *UserPreference) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.UserID.IsUnset() {
		t.UserID, _ = s.UserID.Get()
	}
	if !s.Key.IsUnset() {
		t.Key, _ = s.Key.Get()
	}
	if !s.Value.IsUnset() {
		t.Value, _ = s.Value.Get()
	}
	if !s.CreatedAt.IsUnset() {
		t.CreatedAt, _ = s.CreatedAt.Get()
	}
	if !s.UpdatedAt.IsUnset() {
		t.UpdatedAt, _ = s.UpdatedAt.Get()
	}
}

func (s UserPreferenceSetter) Apply(q *dialect.UpdateQuery) {
	if !s.ID.IsUnset() {
		um.Set("id").ToArg(s.ID).Apply(q)
	}
	if !s.UserID.IsUnset() {
		um.Set("user_id").ToArg(s.UserID).Apply(q)
	}
	if !s.Key.IsUnset() {
		um.Set("key").ToArg(s.Key).Apply(q)
	}
	if !s.Value.IsUnset() {
		um.Set("value").ToArg(s.Value).Apply(q)
	}
	if !s.CreatedAt.IsUnset() {
		um.Set("created_at").ToArg(s.CreatedAt).Apply(q)
	}
	if !s.UpdatedAt.IsUnset() {
		um.Set("updated_at").ToArg(s.UpdatedAt).Apply(q)
	}
}

func (s UserPreferenceSetter) Insert() bob.Mod[*dialect.InsertQuery] {
	vals := make([]bob.Expression, 0, 6)
	if !s.ID.IsUnset() {
		vals = append(vals, sqlite.Arg(s.ID))
	}

	if !s.UserID.IsUnset() {
		vals = append(vals, sqlite.Arg(s.UserID))
	}

	if !s.Key.IsUnset() {
		vals = append(vals, sqlite.Arg(s.Key))
	}

	if !s.Value.IsUnset() {
		vals = append(vals, sqlite.Arg(s.Value))
	}

	if !s.CreatedAt.IsUnset() {
		vals = append(vals, sqlite.Arg(s.CreatedAt))
	}

	if !s.UpdatedAt.IsUnset() {
		vals = append(vals, sqlite.Arg(s.UpdatedAt))
	}

	return im.Values(vals...)
}

type userPreferenceColumnNames struct {
	ID        string
	UserID    string
	Key       string
	Value     string
	CreatedAt string
	UpdatedAt string
}

type userPreferenceRelationshipJoins[Q dialect.Joinable] struct {
	User bob.Mod[Q]
}

func builduserPreferenceRelationshipJoins[Q dialect.Joinable](ctx context.Context, typ string) userPreferenceRelationshipJoins[Q] {
	return userPreferenceRelationshipJoins[Q]{
		User: userPreferencesJoinUser[Q](ctx, typ),
	}
}

func userPreferencesJoin[Q dialect.Joinable](ctx context.Context) joinSet[userPreferenceRelationshipJoins[Q]] {
	return joinSet[userPreferenceRelationshipJoins[Q]]{
		InnerJoin: builduserPreferenceRelationshipJoins[Q](ctx, clause.InnerJoin),
		LeftJoin:  builduserPreferenceRelationshipJoins[Q](ctx, clause.LeftJoin),
		RightJoin: builduserPreferenceRelationshipJoins[Q](ctx, clause.RightJoin),
	}
}

var UserPreferenceColumns = struct {
	ID        sqlite.Expression
	UserID    sqlite.Expression
	Key       sqlite.Expression
	Value     sqlite.Expression
	CreatedAt sqlite.Expression
	UpdatedAt sqlite.Expression
}{
	ID:        sqlite.Quote("user_preferences", "id"),
	UserID:    sqlite.Quote("user_preferences", "user_id"),
	Key:       sqlite.Quote("user_preferences", "key"),
	Value:     sqlite.Quote("user_preferences", "value"),
	CreatedAt: sqlite.Quote("user_preferences", "created_at"),
	UpdatedAt: sqlite.Quote("user_preferences", "updated_at"),
}

type userPreferenceWhere[Q sqlite.Filterable] struct {
	ID        sqlite.WhereMod[Q, int64]
	UserID    sqlite.WhereMod[Q, int64]
	Key       sqlite.WhereMod[Q, string]
	Value     sqlite.WhereMod[Q, []byte]
	CreatedAt sqlite.WhereMod[Q, types.SQLiteDatetime]
	UpdatedAt sqlite.WhereMod[Q, types.SQLiteDatetime]
}

func UserPreferenceWhere[Q sqlite.Filterable]() userPreferenceWhere[Q] {
	return userPreferenceWhere[Q]{
		ID:        sqlite.Where[Q, int64](UserPreferenceColumns.ID),
		UserID:    sqlite.Where[Q, int64](UserPreferenceColumns.UserID),
		Key:       sqlite.Where[Q, string](UserPreferenceColumns.Key),
		Value:     sqlite.Where[Q, []byte](UserPreferenceColumns.Value),
		CreatedAt: sqlite.Where[Q, types.SQLiteDatetime](UserPreferenceColumns.CreatedAt),
		UpdatedAt: sqlite.Where[Q, types.SQLiteDatetime](UserPreferenceColumns.UpdatedAt),
	}
}

// FindUserPreference retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindUserPreference(ctx context.Context, exec bob.Executor, IDPK int64, cols ...string) (*UserPreference, error) {
	if len(cols) == 0 {
		return UserPreferences.Query(
			ctx, exec,
			SelectWhere.UserPreferences.ID.EQ(IDPK),
		).One()
	}

	return UserPreferences.Query(
		ctx, exec,
		SelectWhere.UserPreferences.ID.EQ(IDPK),
		sm.Columns(UserPreferences.Columns().Only(cols...)),
	).One()
}

// UserPreferenceExists checks the presence of a single record by primary key
func UserPreferenceExists(ctx context.Context, exec bob.Executor, IDPK int64) (bool, error) {
	return UserPreferences.Query(
		ctx, exec,
		SelectWhere.UserPreferences.ID.EQ(IDPK),
	).Exists()
}

// PrimaryKeyVals returns the primary key values of the UserPreference
func (o *UserPreference) PrimaryKeyVals() bob.Expression {
	return sqlite.Arg(o.ID)
}

// Update uses an executor to update the UserPreference
func (o *UserPreference) Update(ctx context.Context, exec bob.Executor, s *UserPreferenceSetter) error {
	return UserPreferences.Update(ctx, exec, s, o)
}

// Delete deletes a single UserPreference record with an executor
func (o *UserPreference) Delete(ctx context.Context, exec bob.Executor) error {
	return UserPreferences.Delete(ctx, exec, o)
}

// Reload refreshes the UserPreference using the executor
func (o *UserPreference) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := UserPreferences.Query(
		ctx, exec,
		SelectWhere.UserPreferences.ID.EQ(o.ID),
	).One()
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

func (o UserPreferenceSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals UserPreferenceSetter) error {
	return UserPreferences.Update(ctx, exec, &vals, o...)
}

func (o UserPreferenceSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	return UserPreferences.Delete(ctx, exec, o...)
}

func (o UserPreferenceSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	IDPK := make([]int64, len(o))

	for i, o := range o {
		IDPK[i] = o.ID
	}

	mods = append(mods,
		SelectWhere.UserPreferences.ID.In(IDPK...),
	)

	o2, err := UserPreferences.Query(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			*old = *new
			break
		}
	}

	return nil
}

func userPreferencesJoinUser[Q dialect.Joinable](ctx context.Context, typ string) bob.Mod[Q] {
	return mods.QueryMods[Q]{
		dialect.Join[Q](typ, Users.Name(ctx)).On(
			UserColumns.ID.EQ(UserPreferenceColumns.UserID),
		),
	}
}

// User starts a query for related objects on users
func (o *UserPreference) User(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(ctx, exec, append(mods,
		sm.Where(UserColumns.ID.EQ(sqlite.Arg(o.UserID))),
	)...)
}

func (os UserPreferenceSlice) User(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = sqlite.ArgGroup(o.UserID)
	}

	return Users.Query(ctx, exec, append(mods,
		sm.Where(sqlite.Group(UserColumns.ID).In(PKArgs...)),
	)...)
}

func (o *UserPreference) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "User":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("userPreference cannot load %T as %q", retrieved, name)
		}

		o.R.User = rel

		return nil
	default:
		return fmt.Errorf("userPreference has no relationship %q", name)
	}
}

func PreloadUserPreferenceUser(opts ...sqlite.PreloadOption) sqlite.Preloader {
	return sqlite.Preload[*User, UserSlice](orm.Relationship{
		Name: "User",
		Sides: []orm.RelSide{
			{
				From: "user_preferences",
				To:   TableNames.Users,
				ToExpr: func(ctx context.Context) bob.Expression {
					return Users.Name(ctx)
				},
				FromColumns: []string{
					ColumnNames.UserPreferences.UserID,
				},
				ToColumns: []string{
					ColumnNames.Users.ID,
				},
			},
		},
	}, Users.Columns().Names(), opts...)
}

func ThenLoadUserPreferenceUser(queryMods ...bob.Mod[*dialect.SelectQuery]) sqlite.Loader {
	return sqlite.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadUserPreferenceUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load UserPreferenceUser", retrieved)
		}

		err := loader.LoadUserPreferenceUser(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadUserPreferenceUser loads the userPreference's User into the .R struct
func (o *UserPreference) LoadUserPreferenceUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.User = nil

	related, err := o.User(ctx, exec, mods...).One()
	if err != nil {
		return err
	}

	o.R.User = related
	return nil
}

// LoadUserPreferenceUser loads the userPreference's User into the .R struct
func (os UserPreferenceSlice) LoadUserPreferenceUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.User(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.UserID != rel.ID {
				continue
			}

			o.R.User = rel
			break
		}
	}

	return nil
}

func attachUserPreferenceUser0(ctx context.Context, exec bob.Executor, userPreference0 *UserPreference, user1 *User) error {
	setter := &UserPreferenceSetter{
		UserID: omit.From(user1.ID),
	}

	err := UserPreferences.Update(ctx, exec, setter, userPreference0)
	if err != nil {
		return fmt.Errorf("attachUserPreferenceUser0: %w", err)
	}

	return nil
}

func (userPreference0 *UserPreference) InsertUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := Users.Insert(ctx, exec, related)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	err = attachUserPreferenceUser0(ctx, exec, userPreference0, user1)
	if err != nil {
		return err
	}

	userPreference0.R.User = user1

	return nil
}

func (userPreference0 *UserPreference) AttachUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	err = attachUserPreferenceUser0(ctx, exec, userPreference0, user1)
	if err != nil {
		return err
	}

	userPreference0.R.User = user1

	return nil
}
