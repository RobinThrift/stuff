// Code generated by BobGen sqlite v0.22.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"

	"github.com/RobinThrift/stuff/storage/database/sqlite/types"
	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/clause"
	"github.com/stephenafamo/bob/dialect/sqlite"
	"github.com/stephenafamo/bob/dialect/sqlite/dialect"
	"github.com/stephenafamo/bob/dialect/sqlite/im"
	"github.com/stephenafamo/bob/dialect/sqlite/sm"
	"github.com/stephenafamo/bob/dialect/sqlite/um"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// AssetPart is an object representing the database table.
type AssetPart struct {
	ID           int64                `db:"id,pk" `
	AssetID      int64                `db:"asset_id" `
	Tag          string               `db:"tag" `
	Name         string               `db:"name" `
	Location     null.Val[string]     `db:"location" `
	PositionCode null.Val[string]     `db:"position_code" `
	Notes        null.Val[string]     `db:"notes" `
	CreatedBy    int64                `db:"created_by" `
	CreatedAt    types.SQLiteDatetime `db:"created_at" `
	UpdatedAt    types.SQLiteDatetime `db:"updated_at" `

	R assetPartR `db:"-" `
}

// AssetPartSlice is an alias for a slice of pointers to AssetPart.
// This should almost always be used instead of []*AssetPart.
type AssetPartSlice []*AssetPart

// AssetParts contains methods to work with the asset_parts table
var AssetParts = sqlite.NewTablex[*AssetPart, AssetPartSlice, *AssetPartSetter]("", "asset_parts")

// AssetPartsQuery is a query on the asset_parts table
type AssetPartsQuery = *sqlite.ViewQuery[*AssetPart, AssetPartSlice]

// AssetPartsStmt is a prepared statment on asset_parts
type AssetPartsStmt = bob.QueryStmt[*AssetPart, AssetPartSlice]

// assetPartR is where relationships are stored.
type assetPartR struct {
	CreatedByUser *User  // fk_asset_parts_0
	Tag           *Tag   // fk_asset_parts_1
	Asset         *Asset // fk_asset_parts_2
}

// AssetPartSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type AssetPartSetter struct {
	ID           omit.Val[int64]                `db:"id,pk"`
	AssetID      omit.Val[int64]                `db:"asset_id"`
	Tag          omit.Val[string]               `db:"tag"`
	Name         omit.Val[string]               `db:"name"`
	Location     omitnull.Val[string]           `db:"location"`
	PositionCode omitnull.Val[string]           `db:"position_code"`
	Notes        omitnull.Val[string]           `db:"notes"`
	CreatedBy    omit.Val[int64]                `db:"created_by"`
	CreatedAt    omit.Val[types.SQLiteDatetime] `db:"created_at"`
	UpdatedAt    omit.Val[types.SQLiteDatetime] `db:"updated_at"`
}

func (s AssetPartSetter) SetColumns() []string {
	vals := make([]string, 0, 10)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.AssetID.IsUnset() {
		vals = append(vals, "asset_id")
	}

	if !s.Tag.IsUnset() {
		vals = append(vals, "tag")
	}

	if !s.Name.IsUnset() {
		vals = append(vals, "name")
	}

	if !s.Location.IsUnset() {
		vals = append(vals, "location")
	}

	if !s.PositionCode.IsUnset() {
		vals = append(vals, "position_code")
	}

	if !s.Notes.IsUnset() {
		vals = append(vals, "notes")
	}

	if !s.CreatedBy.IsUnset() {
		vals = append(vals, "created_by")
	}

	if !s.CreatedAt.IsUnset() {
		vals = append(vals, "created_at")
	}

	if !s.UpdatedAt.IsUnset() {
		vals = append(vals, "updated_at")
	}

	return vals
}

func (s AssetPartSetter) Overwrite(t *AssetPart) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.AssetID.IsUnset() {
		t.AssetID, _ = s.AssetID.Get()
	}
	if !s.Tag.IsUnset() {
		t.Tag, _ = s.Tag.Get()
	}
	if !s.Name.IsUnset() {
		t.Name, _ = s.Name.Get()
	}
	if !s.Location.IsUnset() {
		t.Location, _ = s.Location.GetNull()
	}
	if !s.PositionCode.IsUnset() {
		t.PositionCode, _ = s.PositionCode.GetNull()
	}
	if !s.Notes.IsUnset() {
		t.Notes, _ = s.Notes.GetNull()
	}
	if !s.CreatedBy.IsUnset() {
		t.CreatedBy, _ = s.CreatedBy.Get()
	}
	if !s.CreatedAt.IsUnset() {
		t.CreatedAt, _ = s.CreatedAt.Get()
	}
	if !s.UpdatedAt.IsUnset() {
		t.UpdatedAt, _ = s.UpdatedAt.Get()
	}
}

func (s AssetPartSetter) Apply(q *dialect.UpdateQuery) {
	if !s.ID.IsUnset() {
		um.Set("id").ToArg(s.ID).Apply(q)
	}
	if !s.AssetID.IsUnset() {
		um.Set("asset_id").ToArg(s.AssetID).Apply(q)
	}
	if !s.Tag.IsUnset() {
		um.Set("tag").ToArg(s.Tag).Apply(q)
	}
	if !s.Name.IsUnset() {
		um.Set("name").ToArg(s.Name).Apply(q)
	}
	if !s.Location.IsUnset() {
		um.Set("location").ToArg(s.Location).Apply(q)
	}
	if !s.PositionCode.IsUnset() {
		um.Set("position_code").ToArg(s.PositionCode).Apply(q)
	}
	if !s.Notes.IsUnset() {
		um.Set("notes").ToArg(s.Notes).Apply(q)
	}
	if !s.CreatedBy.IsUnset() {
		um.Set("created_by").ToArg(s.CreatedBy).Apply(q)
	}
	if !s.CreatedAt.IsUnset() {
		um.Set("created_at").ToArg(s.CreatedAt).Apply(q)
	}
	if !s.UpdatedAt.IsUnset() {
		um.Set("updated_at").ToArg(s.UpdatedAt).Apply(q)
	}
}

func (s AssetPartSetter) Insert() bob.Mod[*dialect.InsertQuery] {
	vals := make([]bob.Expression, 0, 10)
	if !s.ID.IsUnset() {
		vals = append(vals, sqlite.Arg(s.ID))
	}

	if !s.AssetID.IsUnset() {
		vals = append(vals, sqlite.Arg(s.AssetID))
	}

	if !s.Tag.IsUnset() {
		vals = append(vals, sqlite.Arg(s.Tag))
	}

	if !s.Name.IsUnset() {
		vals = append(vals, sqlite.Arg(s.Name))
	}

	if !s.Location.IsUnset() {
		vals = append(vals, sqlite.Arg(s.Location))
	}

	if !s.PositionCode.IsUnset() {
		vals = append(vals, sqlite.Arg(s.PositionCode))
	}

	if !s.Notes.IsUnset() {
		vals = append(vals, sqlite.Arg(s.Notes))
	}

	if !s.CreatedBy.IsUnset() {
		vals = append(vals, sqlite.Arg(s.CreatedBy))
	}

	if !s.CreatedAt.IsUnset() {
		vals = append(vals, sqlite.Arg(s.CreatedAt))
	}

	if !s.UpdatedAt.IsUnset() {
		vals = append(vals, sqlite.Arg(s.UpdatedAt))
	}

	return im.Values(vals...)
}

type assetPartColumnNames struct {
	ID           string
	AssetID      string
	Tag          string
	Name         string
	Location     string
	PositionCode string
	Notes        string
	CreatedBy    string
	CreatedAt    string
	UpdatedAt    string
}

type assetPartRelationshipJoins[Q dialect.Joinable] struct {
	CreatedByUser bob.Mod[Q]
	Tag           bob.Mod[Q]
	Asset         bob.Mod[Q]
}

func buildassetPartRelationshipJoins[Q dialect.Joinable](ctx context.Context, typ string) assetPartRelationshipJoins[Q] {
	return assetPartRelationshipJoins[Q]{
		CreatedByUser: assetPartsJoinCreatedByUser[Q](ctx, typ),
		Tag:           assetPartsJoinTag[Q](ctx, typ),
		Asset:         assetPartsJoinAsset[Q](ctx, typ),
	}
}

func assetPartsJoin[Q dialect.Joinable](ctx context.Context) joinSet[assetPartRelationshipJoins[Q]] {
	return joinSet[assetPartRelationshipJoins[Q]]{
		InnerJoin: buildassetPartRelationshipJoins[Q](ctx, clause.InnerJoin),
		LeftJoin:  buildassetPartRelationshipJoins[Q](ctx, clause.LeftJoin),
		RightJoin: buildassetPartRelationshipJoins[Q](ctx, clause.RightJoin),
	}
}

var AssetPartColumns = struct {
	ID           sqlite.Expression
	AssetID      sqlite.Expression
	Tag          sqlite.Expression
	Name         sqlite.Expression
	Location     sqlite.Expression
	PositionCode sqlite.Expression
	Notes        sqlite.Expression
	CreatedBy    sqlite.Expression
	CreatedAt    sqlite.Expression
	UpdatedAt    sqlite.Expression
}{
	ID:           sqlite.Quote("asset_parts", "id"),
	AssetID:      sqlite.Quote("asset_parts", "asset_id"),
	Tag:          sqlite.Quote("asset_parts", "tag"),
	Name:         sqlite.Quote("asset_parts", "name"),
	Location:     sqlite.Quote("asset_parts", "location"),
	PositionCode: sqlite.Quote("asset_parts", "position_code"),
	Notes:        sqlite.Quote("asset_parts", "notes"),
	CreatedBy:    sqlite.Quote("asset_parts", "created_by"),
	CreatedAt:    sqlite.Quote("asset_parts", "created_at"),
	UpdatedAt:    sqlite.Quote("asset_parts", "updated_at"),
}

type assetPartWhere[Q sqlite.Filterable] struct {
	ID           sqlite.WhereMod[Q, int64]
	AssetID      sqlite.WhereMod[Q, int64]
	Tag          sqlite.WhereMod[Q, string]
	Name         sqlite.WhereMod[Q, string]
	Location     sqlite.WhereNullMod[Q, string]
	PositionCode sqlite.WhereNullMod[Q, string]
	Notes        sqlite.WhereNullMod[Q, string]
	CreatedBy    sqlite.WhereMod[Q, int64]
	CreatedAt    sqlite.WhereMod[Q, types.SQLiteDatetime]
	UpdatedAt    sqlite.WhereMod[Q, types.SQLiteDatetime]
}

func AssetPartWhere[Q sqlite.Filterable]() assetPartWhere[Q] {
	return assetPartWhere[Q]{
		ID:           sqlite.Where[Q, int64](AssetPartColumns.ID),
		AssetID:      sqlite.Where[Q, int64](AssetPartColumns.AssetID),
		Tag:          sqlite.Where[Q, string](AssetPartColumns.Tag),
		Name:         sqlite.Where[Q, string](AssetPartColumns.Name),
		Location:     sqlite.WhereNull[Q, string](AssetPartColumns.Location),
		PositionCode: sqlite.WhereNull[Q, string](AssetPartColumns.PositionCode),
		Notes:        sqlite.WhereNull[Q, string](AssetPartColumns.Notes),
		CreatedBy:    sqlite.Where[Q, int64](AssetPartColumns.CreatedBy),
		CreatedAt:    sqlite.Where[Q, types.SQLiteDatetime](AssetPartColumns.CreatedAt),
		UpdatedAt:    sqlite.Where[Q, types.SQLiteDatetime](AssetPartColumns.UpdatedAt),
	}
}

// FindAssetPart retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindAssetPart(ctx context.Context, exec bob.Executor, IDPK int64, cols ...string) (*AssetPart, error) {
	if len(cols) == 0 {
		return AssetParts.Query(
			ctx, exec,
			SelectWhere.AssetParts.ID.EQ(IDPK),
		).One()
	}

	return AssetParts.Query(
		ctx, exec,
		SelectWhere.AssetParts.ID.EQ(IDPK),
		sm.Columns(AssetParts.Columns().Only(cols...)),
	).One()
}

// AssetPartExists checks the presence of a single record by primary key
func AssetPartExists(ctx context.Context, exec bob.Executor, IDPK int64) (bool, error) {
	return AssetParts.Query(
		ctx, exec,
		SelectWhere.AssetParts.ID.EQ(IDPK),
	).Exists()
}

// PrimaryKeyVals returns the primary key values of the AssetPart
func (o *AssetPart) PrimaryKeyVals() bob.Expression {
	return sqlite.Arg(o.ID)
}

// Update uses an executor to update the AssetPart
func (o *AssetPart) Update(ctx context.Context, exec bob.Executor, s *AssetPartSetter) error {
	return AssetParts.Update(ctx, exec, s, o)
}

// Delete deletes a single AssetPart record with an executor
func (o *AssetPart) Delete(ctx context.Context, exec bob.Executor) error {
	return AssetParts.Delete(ctx, exec, o)
}

// Reload refreshes the AssetPart using the executor
func (o *AssetPart) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := AssetParts.Query(
		ctx, exec,
		SelectWhere.AssetParts.ID.EQ(o.ID),
	).One()
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

func (o AssetPartSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals AssetPartSetter) error {
	return AssetParts.Update(ctx, exec, &vals, o...)
}

func (o AssetPartSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	return AssetParts.Delete(ctx, exec, o...)
}

func (o AssetPartSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	IDPK := make([]int64, len(o))

	for i, o := range o {
		IDPK[i] = o.ID
	}

	mods = append(mods,
		SelectWhere.AssetParts.ID.In(IDPK...),
	)

	o2, err := AssetParts.Query(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			*old = *new
			break
		}
	}

	return nil
}

func assetPartsJoinCreatedByUser[Q dialect.Joinable](ctx context.Context, typ string) bob.Mod[Q] {
	return mods.QueryMods[Q]{
		dialect.Join[Q](typ, Users.Name(ctx)).On(
			UserColumns.ID.EQ(AssetPartColumns.CreatedBy),
		),
	}
}
func assetPartsJoinTag[Q dialect.Joinable](ctx context.Context, typ string) bob.Mod[Q] {
	return mods.QueryMods[Q]{
		dialect.Join[Q](typ, Tags.Name(ctx)).On(
			TagColumns.Tag.EQ(AssetPartColumns.Tag),
		),
	}
}
func assetPartsJoinAsset[Q dialect.Joinable](ctx context.Context, typ string) bob.Mod[Q] {
	return mods.QueryMods[Q]{
		dialect.Join[Q](typ, Assets.Name(ctx)).On(
			AssetColumns.ID.EQ(AssetPartColumns.AssetID),
		),
	}
}

// CreatedByUser starts a query for related objects on users
func (o *AssetPart) CreatedByUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(ctx, exec, append(mods,
		sm.Where(UserColumns.ID.EQ(sqlite.Arg(o.CreatedBy))),
	)...)
}

func (os AssetPartSlice) CreatedByUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = sqlite.ArgGroup(o.CreatedBy)
	}

	return Users.Query(ctx, exec, append(mods,
		sm.Where(sqlite.Group(UserColumns.ID).In(PKArgs...)),
	)...)
}

// Tag starts a query for related objects on tags
func (o *AssetPart) RelatedTag(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) TagsQuery {
	return Tags.Query(ctx, exec, append(mods,
		sm.Where(TagColumns.Tag.EQ(sqlite.Arg(o.Tag))),
	)...)
}

func (os AssetPartSlice) RelatedTag(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) TagsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = sqlite.ArgGroup(o.Tag)
	}

	return Tags.Query(ctx, exec, append(mods,
		sm.Where(sqlite.Group(TagColumns.Tag).In(PKArgs...)),
	)...)
}

// Asset starts a query for related objects on assets
func (o *AssetPart) Asset(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) AssetsQuery {
	return Assets.Query(ctx, exec, append(mods,
		sm.Where(AssetColumns.ID.EQ(sqlite.Arg(o.AssetID))),
	)...)
}

func (os AssetPartSlice) Asset(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) AssetsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = sqlite.ArgGroup(o.AssetID)
	}

	return Assets.Query(ctx, exec, append(mods,
		sm.Where(sqlite.Group(AssetColumns.ID).In(PKArgs...)),
	)...)
}

func (o *AssetPart) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "CreatedByUser":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("assetPart cannot load %T as %q", retrieved, name)
		}

		o.R.CreatedByUser = rel

		return nil
	case "Tag":
		rel, ok := retrieved.(*Tag)
		if !ok {
			return fmt.Errorf("assetPart cannot load %T as %q", retrieved, name)
		}

		o.R.Tag = rel

		return nil
	case "Asset":
		rel, ok := retrieved.(*Asset)
		if !ok {
			return fmt.Errorf("assetPart cannot load %T as %q", retrieved, name)
		}

		o.R.Asset = rel

		return nil
	default:
		return fmt.Errorf("assetPart has no relationship %q", name)
	}
}

func PreloadAssetPartCreatedByUser(opts ...sqlite.PreloadOption) sqlite.Preloader {
	return sqlite.Preload[*User, UserSlice](orm.Relationship{
		Name: "CreatedByUser",
		Sides: []orm.RelSide{
			{
				From: "asset_parts",
				To:   TableNames.Users,
				ToExpr: func(ctx context.Context) bob.Expression {
					return Users.Name(ctx)
				},
				FromColumns: []string{
					ColumnNames.AssetParts.CreatedBy,
				},
				ToColumns: []string{
					ColumnNames.Users.ID,
				},
			},
		},
	}, Users.Columns().Names(), opts...)
}

func ThenLoadAssetPartCreatedByUser(queryMods ...bob.Mod[*dialect.SelectQuery]) sqlite.Loader {
	return sqlite.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadAssetPartCreatedByUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load AssetPartCreatedByUser", retrieved)
		}

		err := loader.LoadAssetPartCreatedByUser(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadAssetPartCreatedByUser loads the assetPart's CreatedByUser into the .R struct
func (o *AssetPart) LoadAssetPartCreatedByUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.CreatedByUser = nil

	related, err := o.CreatedByUser(ctx, exec, mods...).One()
	if err != nil {
		return err
	}

	o.R.CreatedByUser = related
	return nil
}

// LoadAssetPartCreatedByUser loads the assetPart's CreatedByUser into the .R struct
func (os AssetPartSlice) LoadAssetPartCreatedByUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.CreatedByUser(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.CreatedBy != rel.ID {
				continue
			}

			o.R.CreatedByUser = rel
			break
		}
	}

	return nil
}

func PreloadAssetPartTag(opts ...sqlite.PreloadOption) sqlite.Preloader {
	return sqlite.Preload[*Tag, TagSlice](orm.Relationship{
		Name: "Tag",
		Sides: []orm.RelSide{
			{
				From: "asset_parts",
				To:   TableNames.Tags,
				ToExpr: func(ctx context.Context) bob.Expression {
					return Tags.Name(ctx)
				},
				FromColumns: []string{
					ColumnNames.AssetParts.Tag,
				},
				ToColumns: []string{
					ColumnNames.Tags.Tag,
				},
			},
		},
	}, Tags.Columns().Names(), opts...)
}

func ThenLoadAssetPartTag(queryMods ...bob.Mod[*dialect.SelectQuery]) sqlite.Loader {
	return sqlite.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadAssetPartTag(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load AssetPartTag", retrieved)
		}

		err := loader.LoadAssetPartTag(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadAssetPartTag loads the assetPart's Tag into the .R struct
func (o *AssetPart) LoadAssetPartTag(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Tag = nil

	related, err := o.RelatedTag(ctx, exec, mods...).One()
	if err != nil {
		return err
	}

	o.R.Tag = related
	return nil
}

// LoadAssetPartTag loads the assetPart's Tag into the .R struct
func (os AssetPartSlice) LoadAssetPartTag(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	tags, err := os.RelatedTag(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range tags {
			if o.Tag != rel.Tag {
				continue
			}

			o.R.Tag = rel
			break
		}
	}

	return nil
}

func PreloadAssetPartAsset(opts ...sqlite.PreloadOption) sqlite.Preloader {
	return sqlite.Preload[*Asset, AssetSlice](orm.Relationship{
		Name: "Asset",
		Sides: []orm.RelSide{
			{
				From: "asset_parts",
				To:   TableNames.Assets,
				ToExpr: func(ctx context.Context) bob.Expression {
					return Assets.Name(ctx)
				},
				FromColumns: []string{
					ColumnNames.AssetParts.AssetID,
				},
				ToColumns: []string{
					ColumnNames.Assets.ID,
				},
			},
		},
	}, Assets.Columns().Names(), opts...)
}

func ThenLoadAssetPartAsset(queryMods ...bob.Mod[*dialect.SelectQuery]) sqlite.Loader {
	return sqlite.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadAssetPartAsset(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load AssetPartAsset", retrieved)
		}

		err := loader.LoadAssetPartAsset(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadAssetPartAsset loads the assetPart's Asset into the .R struct
func (o *AssetPart) LoadAssetPartAsset(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Asset = nil

	related, err := o.Asset(ctx, exec, mods...).One()
	if err != nil {
		return err
	}

	o.R.Asset = related
	return nil
}

// LoadAssetPartAsset loads the assetPart's Asset into the .R struct
func (os AssetPartSlice) LoadAssetPartAsset(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	assets, err := os.Asset(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range assets {
			if o.AssetID != rel.ID {
				continue
			}

			o.R.Asset = rel
			break
		}
	}

	return nil
}

func attachAssetPartCreatedByUser0(ctx context.Context, exec bob.Executor, assetPart0 *AssetPart, user1 *User) error {
	setter := &AssetPartSetter{
		CreatedBy: omit.From(user1.ID),
	}

	err := AssetParts.Update(ctx, exec, setter, assetPart0)
	if err != nil {
		return fmt.Errorf("attachAssetPartCreatedByUser0: %w", err)
	}

	return nil
}

func (assetPart0 *AssetPart) InsertCreatedByUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := Users.Insert(ctx, exec, related)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	err = attachAssetPartCreatedByUser0(ctx, exec, assetPart0, user1)
	if err != nil {
		return err
	}

	assetPart0.R.CreatedByUser = user1

	return nil
}

func (assetPart0 *AssetPart) AttachCreatedByUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	err = attachAssetPartCreatedByUser0(ctx, exec, assetPart0, user1)
	if err != nil {
		return err
	}

	assetPart0.R.CreatedByUser = user1

	return nil
}

func attachAssetPartTag0(ctx context.Context, exec bob.Executor, assetPart0 *AssetPart, tag1 *Tag) error {
	setter := &AssetPartSetter{
		Tag: omit.From(tag1.Tag),
	}

	err := AssetParts.Update(ctx, exec, setter, assetPart0)
	if err != nil {
		return fmt.Errorf("attachAssetPartTag0: %w", err)
	}

	return nil
}

func (assetPart0 *AssetPart) InsertTag(ctx context.Context, exec bob.Executor, related *TagSetter) error {
	tag1, err := Tags.Insert(ctx, exec, related)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	err = attachAssetPartTag0(ctx, exec, assetPart0, tag1)
	if err != nil {
		return err
	}

	assetPart0.R.Tag = tag1

	return nil
}

func (assetPart0 *AssetPart) AttachTag(ctx context.Context, exec bob.Executor, tag1 *Tag) error {
	var err error

	err = attachAssetPartTag0(ctx, exec, assetPart0, tag1)
	if err != nil {
		return err
	}

	assetPart0.R.Tag = tag1

	return nil
}

func attachAssetPartAsset0(ctx context.Context, exec bob.Executor, assetPart0 *AssetPart, asset1 *Asset) error {
	setter := &AssetPartSetter{
		AssetID: omit.From(asset1.ID),
	}

	err := AssetParts.Update(ctx, exec, setter, assetPart0)
	if err != nil {
		return fmt.Errorf("attachAssetPartAsset0: %w", err)
	}

	return nil
}

func (assetPart0 *AssetPart) InsertAsset(ctx context.Context, exec bob.Executor, related *AssetSetter) error {
	asset1, err := Assets.Insert(ctx, exec, related)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	err = attachAssetPartAsset0(ctx, exec, assetPart0, asset1)
	if err != nil {
		return err
	}

	assetPart0.R.Asset = asset1

	return nil
}

func (assetPart0 *AssetPart) AttachAsset(ctx context.Context, exec bob.Executor, asset1 *Asset) error {
	var err error

	err = attachAssetPartAsset0(ctx, exec, assetPart0, asset1)
	if err != nil {
		return err
	}

	assetPart0.R.Asset = asset1

	return nil
}
