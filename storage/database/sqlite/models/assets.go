// Code generated by BobGen sqlite v0.22.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/kodeshack/stuff/storage/database/sqlite/types"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/clause"
	"github.com/stephenafamo/bob/dialect/sqlite"
	"github.com/stephenafamo/bob/dialect/sqlite/dialect"
	"github.com/stephenafamo/bob/dialect/sqlite/im"
	"github.com/stephenafamo/bob/dialect/sqlite/sm"
	"github.com/stephenafamo/bob/dialect/sqlite/um"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// Asset is an object representing the database table.
type Asset struct {
	ID               int64                `db:"id,pk" `
	ParentAssetID    null.Val[int64]      `db:"parent_asset_id" `
	Status           string               `db:"status" `
	Name             string               `db:"name" `
	SerialNo         null.Val[string]     `db:"serial_no" `
	ModelNo          null.Val[string]     `db:"model_no" `
	Manufacturer     null.Val[string]     `db:"manufacturer" `
	Notes            null.Val[string]     `db:"notes" `
	ImageURL         null.Val[string]     `db:"image_url" `
	ThumbnailURL     null.Val[string]     `db:"thumbnail_url" `
	WarrantyUntil    null.Val[string]     `db:"warranty_until" `
	CustomAttrs      null.Val[string]     `db:"custom_attrs" `
	TagID            null.Val[int64]      `db:"tag_id" `
	CheckedOutTo     null.Val[int64]      `db:"checked_out_to" `
	StorageLocation  null.Val[string]     `db:"storage_location" `
	StorageShelf     null.Val[string]     `db:"storage_shelf" `
	PurchaseSupplier null.Val[string]     `db:"purchase_supplier" `
	PurchaseOrderNo  null.Val[string]     `db:"purchase_order_no" `
	PurchaseDate     null.Val[string]     `db:"purchase_date" `
	PurchaseAmount   null.Val[string]     `db:"purchase_amount" `
	PurchaseCurrency null.Val[string]     `db:"purchase_currency" `
	CreatedBy        int64                `db:"created_by" `
	CreatedAt        types.SQLiteDatetime `db:"created_at" `
	UpdatedAt        types.SQLiteDatetime `db:"updated_at" `

	R assetR `db:"-" `
}

// AssetSlice is an alias for a slice of pointers to Asset.
// This should almost always be used instead of []*Asset.
type AssetSlice []*Asset

// Assets contains methods to work with the assets table
var Assets = sqlite.NewTablex[*Asset, AssetSlice, *AssetSetter]("", "assets")

// AssetsQuery is a query on the assets table
type AssetsQuery = *sqlite.ViewQuery[*Asset, AssetSlice]

// AssetsStmt is a prepared statment on assets
type AssetsStmt = bob.QueryStmt[*Asset, AssetSlice]

// assetR is where relationships are stored.
type assetR struct {
	CreatedByUser       *User      // fk_assets_0
	CheckedOutToUser    *User      // fk_assets_1
	Tag                 *Tag       // fk_assets_2
	ParentAsset         *Asset     // fk_assets_3
	ReverseParentAssets AssetSlice // fk_assets_3__self_join_reverse
}

// AssetSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type AssetSetter struct {
	ID               omit.Val[int64]                `db:"id,pk"`
	ParentAssetID    omitnull.Val[int64]            `db:"parent_asset_id"`
	Status           omit.Val[string]               `db:"status"`
	Name             omit.Val[string]               `db:"name"`
	SerialNo         omitnull.Val[string]           `db:"serial_no"`
	ModelNo          omitnull.Val[string]           `db:"model_no"`
	Manufacturer     omitnull.Val[string]           `db:"manufacturer"`
	Notes            omitnull.Val[string]           `db:"notes"`
	ImageURL         omitnull.Val[string]           `db:"image_url"`
	ThumbnailURL     omitnull.Val[string]           `db:"thumbnail_url"`
	WarrantyUntil    omitnull.Val[string]           `db:"warranty_until"`
	CustomAttrs      omitnull.Val[string]           `db:"custom_attrs"`
	TagID            omitnull.Val[int64]            `db:"tag_id"`
	CheckedOutTo     omitnull.Val[int64]            `db:"checked_out_to"`
	StorageLocation  omitnull.Val[string]           `db:"storage_location"`
	StorageShelf     omitnull.Val[string]           `db:"storage_shelf"`
	PurchaseSupplier omitnull.Val[string]           `db:"purchase_supplier"`
	PurchaseOrderNo  omitnull.Val[string]           `db:"purchase_order_no"`
	PurchaseDate     omitnull.Val[string]           `db:"purchase_date"`
	PurchaseAmount   omitnull.Val[string]           `db:"purchase_amount"`
	PurchaseCurrency omitnull.Val[string]           `db:"purchase_currency"`
	CreatedBy        omit.Val[int64]                `db:"created_by"`
	CreatedAt        omit.Val[types.SQLiteDatetime] `db:"created_at"`
	UpdatedAt        omit.Val[types.SQLiteDatetime] `db:"updated_at"`
}

func (s AssetSetter) SetColumns() []string {
	vals := make([]string, 0, 24)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.ParentAssetID.IsUnset() {
		vals = append(vals, "parent_asset_id")
	}

	if !s.Status.IsUnset() {
		vals = append(vals, "status")
	}

	if !s.Name.IsUnset() {
		vals = append(vals, "name")
	}

	if !s.SerialNo.IsUnset() {
		vals = append(vals, "serial_no")
	}

	if !s.ModelNo.IsUnset() {
		vals = append(vals, "model_no")
	}

	if !s.Manufacturer.IsUnset() {
		vals = append(vals, "manufacturer")
	}

	if !s.Notes.IsUnset() {
		vals = append(vals, "notes")
	}

	if !s.ImageURL.IsUnset() {
		vals = append(vals, "image_url")
	}

	if !s.ThumbnailURL.IsUnset() {
		vals = append(vals, "thumbnail_url")
	}

	if !s.WarrantyUntil.IsUnset() {
		vals = append(vals, "warranty_until")
	}

	if !s.CustomAttrs.IsUnset() {
		vals = append(vals, "custom_attrs")
	}

	if !s.TagID.IsUnset() {
		vals = append(vals, "tag_id")
	}

	if !s.CheckedOutTo.IsUnset() {
		vals = append(vals, "checked_out_to")
	}

	if !s.StorageLocation.IsUnset() {
		vals = append(vals, "storage_location")
	}

	if !s.StorageShelf.IsUnset() {
		vals = append(vals, "storage_shelf")
	}

	if !s.PurchaseSupplier.IsUnset() {
		vals = append(vals, "purchase_supplier")
	}

	if !s.PurchaseOrderNo.IsUnset() {
		vals = append(vals, "purchase_order_no")
	}

	if !s.PurchaseDate.IsUnset() {
		vals = append(vals, "purchase_date")
	}

	if !s.PurchaseAmount.IsUnset() {
		vals = append(vals, "purchase_amount")
	}

	if !s.PurchaseCurrency.IsUnset() {
		vals = append(vals, "purchase_currency")
	}

	if !s.CreatedBy.IsUnset() {
		vals = append(vals, "created_by")
	}

	if !s.CreatedAt.IsUnset() {
		vals = append(vals, "created_at")
	}

	if !s.UpdatedAt.IsUnset() {
		vals = append(vals, "updated_at")
	}

	return vals
}

func (s AssetSetter) Overwrite(t *Asset) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.ParentAssetID.IsUnset() {
		t.ParentAssetID, _ = s.ParentAssetID.GetNull()
	}
	if !s.Status.IsUnset() {
		t.Status, _ = s.Status.Get()
	}
	if !s.Name.IsUnset() {
		t.Name, _ = s.Name.Get()
	}
	if !s.SerialNo.IsUnset() {
		t.SerialNo, _ = s.SerialNo.GetNull()
	}
	if !s.ModelNo.IsUnset() {
		t.ModelNo, _ = s.ModelNo.GetNull()
	}
	if !s.Manufacturer.IsUnset() {
		t.Manufacturer, _ = s.Manufacturer.GetNull()
	}
	if !s.Notes.IsUnset() {
		t.Notes, _ = s.Notes.GetNull()
	}
	if !s.ImageURL.IsUnset() {
		t.ImageURL, _ = s.ImageURL.GetNull()
	}
	if !s.ThumbnailURL.IsUnset() {
		t.ThumbnailURL, _ = s.ThumbnailURL.GetNull()
	}
	if !s.WarrantyUntil.IsUnset() {
		t.WarrantyUntil, _ = s.WarrantyUntil.GetNull()
	}
	if !s.CustomAttrs.IsUnset() {
		t.CustomAttrs, _ = s.CustomAttrs.GetNull()
	}
	if !s.TagID.IsUnset() {
		t.TagID, _ = s.TagID.GetNull()
	}
	if !s.CheckedOutTo.IsUnset() {
		t.CheckedOutTo, _ = s.CheckedOutTo.GetNull()
	}
	if !s.StorageLocation.IsUnset() {
		t.StorageLocation, _ = s.StorageLocation.GetNull()
	}
	if !s.StorageShelf.IsUnset() {
		t.StorageShelf, _ = s.StorageShelf.GetNull()
	}
	if !s.PurchaseSupplier.IsUnset() {
		t.PurchaseSupplier, _ = s.PurchaseSupplier.GetNull()
	}
	if !s.PurchaseOrderNo.IsUnset() {
		t.PurchaseOrderNo, _ = s.PurchaseOrderNo.GetNull()
	}
	if !s.PurchaseDate.IsUnset() {
		t.PurchaseDate, _ = s.PurchaseDate.GetNull()
	}
	if !s.PurchaseAmount.IsUnset() {
		t.PurchaseAmount, _ = s.PurchaseAmount.GetNull()
	}
	if !s.PurchaseCurrency.IsUnset() {
		t.PurchaseCurrency, _ = s.PurchaseCurrency.GetNull()
	}
	if !s.CreatedBy.IsUnset() {
		t.CreatedBy, _ = s.CreatedBy.Get()
	}
	if !s.CreatedAt.IsUnset() {
		t.CreatedAt, _ = s.CreatedAt.Get()
	}
	if !s.UpdatedAt.IsUnset() {
		t.UpdatedAt, _ = s.UpdatedAt.Get()
	}
}

func (s AssetSetter) Apply(q *dialect.UpdateQuery) {
	if !s.ID.IsUnset() {
		um.Set("id").ToArg(s.ID).Apply(q)
	}
	if !s.ParentAssetID.IsUnset() {
		um.Set("parent_asset_id").ToArg(s.ParentAssetID).Apply(q)
	}
	if !s.Status.IsUnset() {
		um.Set("status").ToArg(s.Status).Apply(q)
	}
	if !s.Name.IsUnset() {
		um.Set("name").ToArg(s.Name).Apply(q)
	}
	if !s.SerialNo.IsUnset() {
		um.Set("serial_no").ToArg(s.SerialNo).Apply(q)
	}
	if !s.ModelNo.IsUnset() {
		um.Set("model_no").ToArg(s.ModelNo).Apply(q)
	}
	if !s.Manufacturer.IsUnset() {
		um.Set("manufacturer").ToArg(s.Manufacturer).Apply(q)
	}
	if !s.Notes.IsUnset() {
		um.Set("notes").ToArg(s.Notes).Apply(q)
	}
	if !s.ImageURL.IsUnset() {
		um.Set("image_url").ToArg(s.ImageURL).Apply(q)
	}
	if !s.ThumbnailURL.IsUnset() {
		um.Set("thumbnail_url").ToArg(s.ThumbnailURL).Apply(q)
	}
	if !s.WarrantyUntil.IsUnset() {
		um.Set("warranty_until").ToArg(s.WarrantyUntil).Apply(q)
	}
	if !s.CustomAttrs.IsUnset() {
		um.Set("custom_attrs").ToArg(s.CustomAttrs).Apply(q)
	}
	if !s.TagID.IsUnset() {
		um.Set("tag_id").ToArg(s.TagID).Apply(q)
	}
	if !s.CheckedOutTo.IsUnset() {
		um.Set("checked_out_to").ToArg(s.CheckedOutTo).Apply(q)
	}
	if !s.StorageLocation.IsUnset() {
		um.Set("storage_location").ToArg(s.StorageLocation).Apply(q)
	}
	if !s.StorageShelf.IsUnset() {
		um.Set("storage_shelf").ToArg(s.StorageShelf).Apply(q)
	}
	if !s.PurchaseSupplier.IsUnset() {
		um.Set("purchase_supplier").ToArg(s.PurchaseSupplier).Apply(q)
	}
	if !s.PurchaseOrderNo.IsUnset() {
		um.Set("purchase_order_no").ToArg(s.PurchaseOrderNo).Apply(q)
	}
	if !s.PurchaseDate.IsUnset() {
		um.Set("purchase_date").ToArg(s.PurchaseDate).Apply(q)
	}
	if !s.PurchaseAmount.IsUnset() {
		um.Set("purchase_amount").ToArg(s.PurchaseAmount).Apply(q)
	}
	if !s.PurchaseCurrency.IsUnset() {
		um.Set("purchase_currency").ToArg(s.PurchaseCurrency).Apply(q)
	}
	if !s.CreatedBy.IsUnset() {
		um.Set("created_by").ToArg(s.CreatedBy).Apply(q)
	}
	if !s.CreatedAt.IsUnset() {
		um.Set("created_at").ToArg(s.CreatedAt).Apply(q)
	}
	if !s.UpdatedAt.IsUnset() {
		um.Set("updated_at").ToArg(s.UpdatedAt).Apply(q)
	}
}

func (s AssetSetter) Insert() bob.Mod[*dialect.InsertQuery] {
	vals := make([]bob.Expression, 0, 24)
	if !s.ID.IsUnset() {
		vals = append(vals, sqlite.Arg(s.ID))
	}

	if !s.ParentAssetID.IsUnset() {
		vals = append(vals, sqlite.Arg(s.ParentAssetID))
	}

	if !s.Status.IsUnset() {
		vals = append(vals, sqlite.Arg(s.Status))
	}

	if !s.Name.IsUnset() {
		vals = append(vals, sqlite.Arg(s.Name))
	}

	if !s.SerialNo.IsUnset() {
		vals = append(vals, sqlite.Arg(s.SerialNo))
	}

	if !s.ModelNo.IsUnset() {
		vals = append(vals, sqlite.Arg(s.ModelNo))
	}

	if !s.Manufacturer.IsUnset() {
		vals = append(vals, sqlite.Arg(s.Manufacturer))
	}

	if !s.Notes.IsUnset() {
		vals = append(vals, sqlite.Arg(s.Notes))
	}

	if !s.ImageURL.IsUnset() {
		vals = append(vals, sqlite.Arg(s.ImageURL))
	}

	if !s.ThumbnailURL.IsUnset() {
		vals = append(vals, sqlite.Arg(s.ThumbnailURL))
	}

	if !s.WarrantyUntil.IsUnset() {
		vals = append(vals, sqlite.Arg(s.WarrantyUntil))
	}

	if !s.CustomAttrs.IsUnset() {
		vals = append(vals, sqlite.Arg(s.CustomAttrs))
	}

	if !s.TagID.IsUnset() {
		vals = append(vals, sqlite.Arg(s.TagID))
	}

	if !s.CheckedOutTo.IsUnset() {
		vals = append(vals, sqlite.Arg(s.CheckedOutTo))
	}

	if !s.StorageLocation.IsUnset() {
		vals = append(vals, sqlite.Arg(s.StorageLocation))
	}

	if !s.StorageShelf.IsUnset() {
		vals = append(vals, sqlite.Arg(s.StorageShelf))
	}

	if !s.PurchaseSupplier.IsUnset() {
		vals = append(vals, sqlite.Arg(s.PurchaseSupplier))
	}

	if !s.PurchaseOrderNo.IsUnset() {
		vals = append(vals, sqlite.Arg(s.PurchaseOrderNo))
	}

	if !s.PurchaseDate.IsUnset() {
		vals = append(vals, sqlite.Arg(s.PurchaseDate))
	}

	if !s.PurchaseAmount.IsUnset() {
		vals = append(vals, sqlite.Arg(s.PurchaseAmount))
	}

	if !s.PurchaseCurrency.IsUnset() {
		vals = append(vals, sqlite.Arg(s.PurchaseCurrency))
	}

	if !s.CreatedBy.IsUnset() {
		vals = append(vals, sqlite.Arg(s.CreatedBy))
	}

	if !s.CreatedAt.IsUnset() {
		vals = append(vals, sqlite.Arg(s.CreatedAt))
	}

	if !s.UpdatedAt.IsUnset() {
		vals = append(vals, sqlite.Arg(s.UpdatedAt))
	}

	return im.Values(vals...)
}

type assetColumnNames struct {
	ID               string
	ParentAssetID    string
	Status           string
	Name             string
	SerialNo         string
	ModelNo          string
	Manufacturer     string
	Notes            string
	ImageURL         string
	ThumbnailURL     string
	WarrantyUntil    string
	CustomAttrs      string
	TagID            string
	CheckedOutTo     string
	StorageLocation  string
	StorageShelf     string
	PurchaseSupplier string
	PurchaseOrderNo  string
	PurchaseDate     string
	PurchaseAmount   string
	PurchaseCurrency string
	CreatedBy        string
	CreatedAt        string
	UpdatedAt        string
}

type assetRelationshipJoins[Q dialect.Joinable] struct {
	CreatedByUser       bob.Mod[Q]
	CheckedOutToUser    bob.Mod[Q]
	Tag                 bob.Mod[Q]
	ParentAsset         bob.Mod[Q]
	ReverseParentAssets bob.Mod[Q]
}

func buildassetRelationshipJoins[Q dialect.Joinable](ctx context.Context, typ string) assetRelationshipJoins[Q] {
	return assetRelationshipJoins[Q]{
		CreatedByUser:       assetsJoinCreatedByUser[Q](ctx, typ),
		CheckedOutToUser:    assetsJoinCheckedOutToUser[Q](ctx, typ),
		Tag:                 assetsJoinTag[Q](ctx, typ),
		ParentAsset:         assetsJoinParentAsset[Q](ctx, typ),
		ReverseParentAssets: assetsJoinReverseParentAssets[Q](ctx, typ),
	}
}

func assetsJoin[Q dialect.Joinable](ctx context.Context) joinSet[assetRelationshipJoins[Q]] {
	return joinSet[assetRelationshipJoins[Q]]{
		InnerJoin: buildassetRelationshipJoins[Q](ctx, clause.InnerJoin),
		LeftJoin:  buildassetRelationshipJoins[Q](ctx, clause.LeftJoin),
		RightJoin: buildassetRelationshipJoins[Q](ctx, clause.RightJoin),
	}
}

var AssetColumns = struct {
	ID               sqlite.Expression
	ParentAssetID    sqlite.Expression
	Status           sqlite.Expression
	Name             sqlite.Expression
	SerialNo         sqlite.Expression
	ModelNo          sqlite.Expression
	Manufacturer     sqlite.Expression
	Notes            sqlite.Expression
	ImageURL         sqlite.Expression
	ThumbnailURL     sqlite.Expression
	WarrantyUntil    sqlite.Expression
	CustomAttrs      sqlite.Expression
	TagID            sqlite.Expression
	CheckedOutTo     sqlite.Expression
	StorageLocation  sqlite.Expression
	StorageShelf     sqlite.Expression
	PurchaseSupplier sqlite.Expression
	PurchaseOrderNo  sqlite.Expression
	PurchaseDate     sqlite.Expression
	PurchaseAmount   sqlite.Expression
	PurchaseCurrency sqlite.Expression
	CreatedBy        sqlite.Expression
	CreatedAt        sqlite.Expression
	UpdatedAt        sqlite.Expression
}{
	ID:               sqlite.Quote("assets", "id"),
	ParentAssetID:    sqlite.Quote("assets", "parent_asset_id"),
	Status:           sqlite.Quote("assets", "status"),
	Name:             sqlite.Quote("assets", "name"),
	SerialNo:         sqlite.Quote("assets", "serial_no"),
	ModelNo:          sqlite.Quote("assets", "model_no"),
	Manufacturer:     sqlite.Quote("assets", "manufacturer"),
	Notes:            sqlite.Quote("assets", "notes"),
	ImageURL:         sqlite.Quote("assets", "image_url"),
	ThumbnailURL:     sqlite.Quote("assets", "thumbnail_url"),
	WarrantyUntil:    sqlite.Quote("assets", "warranty_until"),
	CustomAttrs:      sqlite.Quote("assets", "custom_attrs"),
	TagID:            sqlite.Quote("assets", "tag_id"),
	CheckedOutTo:     sqlite.Quote("assets", "checked_out_to"),
	StorageLocation:  sqlite.Quote("assets", "storage_location"),
	StorageShelf:     sqlite.Quote("assets", "storage_shelf"),
	PurchaseSupplier: sqlite.Quote("assets", "purchase_supplier"),
	PurchaseOrderNo:  sqlite.Quote("assets", "purchase_order_no"),
	PurchaseDate:     sqlite.Quote("assets", "purchase_date"),
	PurchaseAmount:   sqlite.Quote("assets", "purchase_amount"),
	PurchaseCurrency: sqlite.Quote("assets", "purchase_currency"),
	CreatedBy:        sqlite.Quote("assets", "created_by"),
	CreatedAt:        sqlite.Quote("assets", "created_at"),
	UpdatedAt:        sqlite.Quote("assets", "updated_at"),
}

type assetWhere[Q sqlite.Filterable] struct {
	ID               sqlite.WhereMod[Q, int64]
	ParentAssetID    sqlite.WhereNullMod[Q, int64]
	Status           sqlite.WhereMod[Q, string]
	Name             sqlite.WhereMod[Q, string]
	SerialNo         sqlite.WhereNullMod[Q, string]
	ModelNo          sqlite.WhereNullMod[Q, string]
	Manufacturer     sqlite.WhereNullMod[Q, string]
	Notes            sqlite.WhereNullMod[Q, string]
	ImageURL         sqlite.WhereNullMod[Q, string]
	ThumbnailURL     sqlite.WhereNullMod[Q, string]
	WarrantyUntil    sqlite.WhereNullMod[Q, string]
	CustomAttrs      sqlite.WhereNullMod[Q, string]
	TagID            sqlite.WhereNullMod[Q, int64]
	CheckedOutTo     sqlite.WhereNullMod[Q, int64]
	StorageLocation  sqlite.WhereNullMod[Q, string]
	StorageShelf     sqlite.WhereNullMod[Q, string]
	PurchaseSupplier sqlite.WhereNullMod[Q, string]
	PurchaseOrderNo  sqlite.WhereNullMod[Q, string]
	PurchaseDate     sqlite.WhereNullMod[Q, string]
	PurchaseAmount   sqlite.WhereNullMod[Q, string]
	PurchaseCurrency sqlite.WhereNullMod[Q, string]
	CreatedBy        sqlite.WhereMod[Q, int64]
	CreatedAt        sqlite.WhereMod[Q, types.SQLiteDatetime]
	UpdatedAt        sqlite.WhereMod[Q, types.SQLiteDatetime]
}

func AssetWhere[Q sqlite.Filterable]() assetWhere[Q] {
	return assetWhere[Q]{
		ID:               sqlite.Where[Q, int64](AssetColumns.ID),
		ParentAssetID:    sqlite.WhereNull[Q, int64](AssetColumns.ParentAssetID),
		Status:           sqlite.Where[Q, string](AssetColumns.Status),
		Name:             sqlite.Where[Q, string](AssetColumns.Name),
		SerialNo:         sqlite.WhereNull[Q, string](AssetColumns.SerialNo),
		ModelNo:          sqlite.WhereNull[Q, string](AssetColumns.ModelNo),
		Manufacturer:     sqlite.WhereNull[Q, string](AssetColumns.Manufacturer),
		Notes:            sqlite.WhereNull[Q, string](AssetColumns.Notes),
		ImageURL:         sqlite.WhereNull[Q, string](AssetColumns.ImageURL),
		ThumbnailURL:     sqlite.WhereNull[Q, string](AssetColumns.ThumbnailURL),
		WarrantyUntil:    sqlite.WhereNull[Q, string](AssetColumns.WarrantyUntil),
		CustomAttrs:      sqlite.WhereNull[Q, string](AssetColumns.CustomAttrs),
		TagID:            sqlite.WhereNull[Q, int64](AssetColumns.TagID),
		CheckedOutTo:     sqlite.WhereNull[Q, int64](AssetColumns.CheckedOutTo),
		StorageLocation:  sqlite.WhereNull[Q, string](AssetColumns.StorageLocation),
		StorageShelf:     sqlite.WhereNull[Q, string](AssetColumns.StorageShelf),
		PurchaseSupplier: sqlite.WhereNull[Q, string](AssetColumns.PurchaseSupplier),
		PurchaseOrderNo:  sqlite.WhereNull[Q, string](AssetColumns.PurchaseOrderNo),
		PurchaseDate:     sqlite.WhereNull[Q, string](AssetColumns.PurchaseDate),
		PurchaseAmount:   sqlite.WhereNull[Q, string](AssetColumns.PurchaseAmount),
		PurchaseCurrency: sqlite.WhereNull[Q, string](AssetColumns.PurchaseCurrency),
		CreatedBy:        sqlite.Where[Q, int64](AssetColumns.CreatedBy),
		CreatedAt:        sqlite.Where[Q, types.SQLiteDatetime](AssetColumns.CreatedAt),
		UpdatedAt:        sqlite.Where[Q, types.SQLiteDatetime](AssetColumns.UpdatedAt),
	}
}

// FindAsset retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindAsset(ctx context.Context, exec bob.Executor, IDPK int64, cols ...string) (*Asset, error) {
	if len(cols) == 0 {
		return Assets.Query(
			ctx, exec,
			SelectWhere.Assets.ID.EQ(IDPK),
		).One()
	}

	return Assets.Query(
		ctx, exec,
		SelectWhere.Assets.ID.EQ(IDPK),
		sm.Columns(Assets.Columns().Only(cols...)),
	).One()
}

// AssetExists checks the presence of a single record by primary key
func AssetExists(ctx context.Context, exec bob.Executor, IDPK int64) (bool, error) {
	return Assets.Query(
		ctx, exec,
		SelectWhere.Assets.ID.EQ(IDPK),
	).Exists()
}

// PrimaryKeyVals returns the primary key values of the Asset
func (o *Asset) PrimaryKeyVals() bob.Expression {
	return sqlite.Arg(o.ID)
}

// Update uses an executor to update the Asset
func (o *Asset) Update(ctx context.Context, exec bob.Executor, s *AssetSetter) error {
	return Assets.Update(ctx, exec, s, o)
}

// Delete deletes a single Asset record with an executor
func (o *Asset) Delete(ctx context.Context, exec bob.Executor) error {
	return Assets.Delete(ctx, exec, o)
}

// Reload refreshes the Asset using the executor
func (o *Asset) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Assets.Query(
		ctx, exec,
		SelectWhere.Assets.ID.EQ(o.ID),
	).One()
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

func (o AssetSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals AssetSetter) error {
	return Assets.Update(ctx, exec, &vals, o...)
}

func (o AssetSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	return Assets.Delete(ctx, exec, o...)
}

func (o AssetSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	IDPK := make([]int64, len(o))

	for i, o := range o {
		IDPK[i] = o.ID
	}

	mods = append(mods,
		SelectWhere.Assets.ID.In(IDPK...),
	)

	o2, err := Assets.Query(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			*old = *new
			break
		}
	}

	return nil
}

func assetsJoinCreatedByUser[Q dialect.Joinable](ctx context.Context, typ string) bob.Mod[Q] {
	return mods.QueryMods[Q]{
		dialect.Join[Q](typ, Users.Name(ctx)).On(
			UserColumns.ID.EQ(AssetColumns.CreatedBy),
		),
	}
}
func assetsJoinCheckedOutToUser[Q dialect.Joinable](ctx context.Context, typ string) bob.Mod[Q] {
	return mods.QueryMods[Q]{
		dialect.Join[Q](typ, Users.Name(ctx)).On(
			UserColumns.ID.EQ(AssetColumns.CheckedOutTo),
		),
	}
}
func assetsJoinTag[Q dialect.Joinable](ctx context.Context, typ string) bob.Mod[Q] {
	return mods.QueryMods[Q]{
		dialect.Join[Q](typ, Tags.Name(ctx)).On(
			TagColumns.ID.EQ(AssetColumns.TagID),
		),
	}
}
func assetsJoinParentAsset[Q dialect.Joinable](ctx context.Context, typ string) bob.Mod[Q] {
	return mods.QueryMods[Q]{
		dialect.Join[Q](typ, Assets.Name(ctx)).On(
			AssetColumns.ID.EQ(AssetColumns.ParentAssetID),
		),
	}
}
func assetsJoinReverseParentAssets[Q dialect.Joinable](ctx context.Context, typ string) bob.Mod[Q] {
	return mods.QueryMods[Q]{
		dialect.Join[Q](typ, Assets.Name(ctx)).On(
			AssetColumns.ParentAssetID.EQ(AssetColumns.ID),
		),
	}
}

// CreatedByUser starts a query for related objects on users
func (o *Asset) CreatedByUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(ctx, exec, append(mods,
		sm.Where(UserColumns.ID.EQ(sqlite.Arg(o.CreatedBy))),
	)...)
}

func (os AssetSlice) CreatedByUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = sqlite.ArgGroup(o.CreatedBy)
	}

	return Users.Query(ctx, exec, append(mods,
		sm.Where(sqlite.Group(UserColumns.ID).In(PKArgs...)),
	)...)
}

// CheckedOutToUser starts a query for related objects on users
func (o *Asset) CheckedOutToUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(ctx, exec, append(mods,
		sm.Where(UserColumns.ID.EQ(sqlite.Arg(o.CheckedOutTo))),
	)...)
}

func (os AssetSlice) CheckedOutToUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = sqlite.ArgGroup(o.CheckedOutTo)
	}

	return Users.Query(ctx, exec, append(mods,
		sm.Where(sqlite.Group(UserColumns.ID).In(PKArgs...)),
	)...)
}

// Tag starts a query for related objects on tags
func (o *Asset) Tag(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) TagsQuery {
	return Tags.Query(ctx, exec, append(mods,
		sm.Where(TagColumns.ID.EQ(sqlite.Arg(o.TagID))),
	)...)
}

func (os AssetSlice) Tag(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) TagsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = sqlite.ArgGroup(o.TagID)
	}

	return Tags.Query(ctx, exec, append(mods,
		sm.Where(sqlite.Group(TagColumns.ID).In(PKArgs...)),
	)...)
}

// ParentAsset starts a query for related objects on assets
func (o *Asset) ParentAsset(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) AssetsQuery {
	return Assets.Query(ctx, exec, append(mods,
		sm.Where(AssetColumns.ID.EQ(sqlite.Arg(o.ParentAssetID))),
	)...)
}

func (os AssetSlice) ParentAsset(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) AssetsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = sqlite.ArgGroup(o.ParentAssetID)
	}

	return Assets.Query(ctx, exec, append(mods,
		sm.Where(sqlite.Group(AssetColumns.ID).In(PKArgs...)),
	)...)
}

// ReverseParentAssets starts a query for related objects on assets
func (o *Asset) ReverseParentAssets(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) AssetsQuery {
	return Assets.Query(ctx, exec, append(mods,
		sm.Where(AssetColumns.ParentAssetID.EQ(sqlite.Arg(o.ID))),
	)...)
}

func (os AssetSlice) ReverseParentAssets(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) AssetsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = sqlite.ArgGroup(o.ID)
	}

	return Assets.Query(ctx, exec, append(mods,
		sm.Where(sqlite.Group(AssetColumns.ParentAssetID).In(PKArgs...)),
	)...)
}

func (o *Asset) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "CreatedByUser":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("asset cannot load %T as %q", retrieved, name)
		}

		o.R.CreatedByUser = rel

		if rel != nil {
			rel.R.CreatedByAssets = AssetSlice{o}
		}
		return nil
	case "CheckedOutToUser":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("asset cannot load %T as %q", retrieved, name)
		}

		o.R.CheckedOutToUser = rel

		if rel != nil {
			rel.R.CheckedOutToAssets = AssetSlice{o}
		}
		return nil
	case "Tag":
		rel, ok := retrieved.(*Tag)
		if !ok {
			return fmt.Errorf("asset cannot load %T as %q", retrieved, name)
		}

		o.R.Tag = rel

		if rel != nil {
			rel.R.Assets = AssetSlice{o}
		}
		return nil
	case "ParentAsset":
		rel, ok := retrieved.(*Asset)
		if !ok {
			return fmt.Errorf("asset cannot load %T as %q", retrieved, name)
		}

		o.R.ParentAsset = rel

		if rel != nil {
			rel.R.ParentAsset = o
		}
		return nil
	case "ReverseParentAssets":
		rels, ok := retrieved.(AssetSlice)
		if !ok {
			return fmt.Errorf("asset cannot load %T as %q", retrieved, name)
		}

		o.R.ReverseParentAssets = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.ReverseParentAssets = AssetSlice{o}
			}
		}
		return nil
	default:
		return fmt.Errorf("asset has no relationship %q", name)
	}
}

func PreloadAssetCreatedByUser(opts ...sqlite.PreloadOption) sqlite.Preloader {
	return sqlite.Preload[*User, UserSlice](orm.Relationship{
		Name: "CreatedByUser",
		Sides: []orm.RelSide{
			{
				From: "assets",
				To:   TableNames.Users,
				ToExpr: func(ctx context.Context) bob.Expression {
					return Users.Name(ctx)
				},
				FromColumns: []string{
					ColumnNames.Assets.CreatedBy,
				},
				ToColumns: []string{
					ColumnNames.Users.ID,
				},
			},
		},
	}, Users.Columns().Names(), opts...)
}

func ThenLoadAssetCreatedByUser(queryMods ...bob.Mod[*dialect.SelectQuery]) sqlite.Loader {
	return sqlite.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadAssetCreatedByUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load AssetCreatedByUser", retrieved)
		}

		err := loader.LoadAssetCreatedByUser(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadAssetCreatedByUser loads the asset's CreatedByUser into the .R struct
func (o *Asset) LoadAssetCreatedByUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.CreatedByUser = nil

	related, err := o.CreatedByUser(ctx, exec, mods...).One()
	if err != nil {
		return err
	}

	related.R.CreatedByAssets = AssetSlice{o}

	o.R.CreatedByUser = related
	return nil
}

// LoadAssetCreatedByUser loads the asset's CreatedByUser into the .R struct
func (os AssetSlice) LoadAssetCreatedByUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.CreatedByUser(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.CreatedBy != rel.ID {
				continue
			}

			rel.R.CreatedByAssets = append(rel.R.CreatedByAssets, o)

			o.R.CreatedByUser = rel
			break
		}
	}

	return nil
}

func PreloadAssetCheckedOutToUser(opts ...sqlite.PreloadOption) sqlite.Preloader {
	return sqlite.Preload[*User, UserSlice](orm.Relationship{
		Name: "CheckedOutToUser",
		Sides: []orm.RelSide{
			{
				From: "assets",
				To:   TableNames.Users,
				ToExpr: func(ctx context.Context) bob.Expression {
					return Users.Name(ctx)
				},
				FromColumns: []string{
					ColumnNames.Assets.CheckedOutTo,
				},
				ToColumns: []string{
					ColumnNames.Users.ID,
				},
			},
		},
	}, Users.Columns().Names(), opts...)
}

func ThenLoadAssetCheckedOutToUser(queryMods ...bob.Mod[*dialect.SelectQuery]) sqlite.Loader {
	return sqlite.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadAssetCheckedOutToUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load AssetCheckedOutToUser", retrieved)
		}

		err := loader.LoadAssetCheckedOutToUser(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadAssetCheckedOutToUser loads the asset's CheckedOutToUser into the .R struct
func (o *Asset) LoadAssetCheckedOutToUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.CheckedOutToUser = nil

	related, err := o.CheckedOutToUser(ctx, exec, mods...).One()
	if err != nil {
		return err
	}

	related.R.CheckedOutToAssets = AssetSlice{o}

	o.R.CheckedOutToUser = related
	return nil
}

// LoadAssetCheckedOutToUser loads the asset's CheckedOutToUser into the .R struct
func (os AssetSlice) LoadAssetCheckedOutToUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.CheckedOutToUser(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.CheckedOutTo.GetOrZero() != rel.ID {
				continue
			}

			rel.R.CheckedOutToAssets = append(rel.R.CheckedOutToAssets, o)

			o.R.CheckedOutToUser = rel
			break
		}
	}

	return nil
}

func PreloadAssetTag(opts ...sqlite.PreloadOption) sqlite.Preloader {
	return sqlite.Preload[*Tag, TagSlice](orm.Relationship{
		Name: "Tag",
		Sides: []orm.RelSide{
			{
				From: "assets",
				To:   TableNames.Tags,
				ToExpr: func(ctx context.Context) bob.Expression {
					return Tags.Name(ctx)
				},
				FromColumns: []string{
					ColumnNames.Assets.TagID,
				},
				ToColumns: []string{
					ColumnNames.Tags.ID,
				},
			},
		},
	}, Tags.Columns().Names(), opts...)
}

func ThenLoadAssetTag(queryMods ...bob.Mod[*dialect.SelectQuery]) sqlite.Loader {
	return sqlite.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadAssetTag(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load AssetTag", retrieved)
		}

		err := loader.LoadAssetTag(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadAssetTag loads the asset's Tag into the .R struct
func (o *Asset) LoadAssetTag(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Tag = nil

	related, err := o.Tag(ctx, exec, mods...).One()
	if err != nil {
		return err
	}

	related.R.Assets = AssetSlice{o}

	o.R.Tag = related
	return nil
}

// LoadAssetTag loads the asset's Tag into the .R struct
func (os AssetSlice) LoadAssetTag(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	tags, err := os.Tag(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range tags {
			if o.TagID.GetOrZero() != rel.ID {
				continue
			}

			rel.R.Assets = append(rel.R.Assets, o)

			o.R.Tag = rel
			break
		}
	}

	return nil
}

func PreloadAssetParentAsset(opts ...sqlite.PreloadOption) sqlite.Preloader {
	return sqlite.Preload[*Asset, AssetSlice](orm.Relationship{
		Name: "ParentAsset",
		Sides: []orm.RelSide{
			{
				From: "assets",
				To:   TableNames.Assets,
				ToExpr: func(ctx context.Context) bob.Expression {
					return Assets.Name(ctx)
				},
				FromColumns: []string{
					ColumnNames.Assets.ParentAssetID,
				},
				ToColumns: []string{
					ColumnNames.Assets.ID,
				},
			},
		},
	}, Assets.Columns().Names(), opts...)
}

func ThenLoadAssetParentAsset(queryMods ...bob.Mod[*dialect.SelectQuery]) sqlite.Loader {
	return sqlite.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadAssetParentAsset(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load AssetParentAsset", retrieved)
		}

		err := loader.LoadAssetParentAsset(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadAssetParentAsset loads the asset's ParentAsset into the .R struct
func (o *Asset) LoadAssetParentAsset(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.ParentAsset = nil

	related, err := o.ParentAsset(ctx, exec, mods...).One()
	if err != nil {
		return err
	}

	related.R.ParentAsset = o

	o.R.ParentAsset = related
	return nil
}

// LoadAssetParentAsset loads the asset's ParentAsset into the .R struct
func (os AssetSlice) LoadAssetParentAsset(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	assets, err := os.ParentAsset(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range assets {
			if o.ParentAssetID.GetOrZero() != rel.ID {
				continue
			}

			rel.R.ParentAsset = o

			o.R.ParentAsset = rel
			break
		}
	}

	return nil
}

func ThenLoadAssetReverseParentAssets(queryMods ...bob.Mod[*dialect.SelectQuery]) sqlite.Loader {
	return sqlite.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadAssetReverseParentAssets(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load AssetReverseParentAssets", retrieved)
		}

		err := loader.LoadAssetReverseParentAssets(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadAssetReverseParentAssets loads the asset's ReverseParentAssets into the .R struct
func (o *Asset) LoadAssetReverseParentAssets(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.ReverseParentAssets = nil

	related, err := o.ReverseParentAssets(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.ReverseParentAssets = AssetSlice{o}
	}

	o.R.ReverseParentAssets = related
	return nil
}

// LoadAssetReverseParentAssets loads the asset's ReverseParentAssets into the .R struct
func (os AssetSlice) LoadAssetReverseParentAssets(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	assets, err := os.ReverseParentAssets(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.ReverseParentAssets = nil
	}

	for _, o := range os {
		for _, rel := range assets {
			if o.ID != rel.ParentAssetID.GetOrZero() {
				continue
			}

			rel.R.ReverseParentAssets = append(rel.R.ReverseParentAssets, o)

			o.R.ReverseParentAssets = append(o.R.ReverseParentAssets, rel)
		}
	}

	return nil
}

func attachAssetCreatedByUser0(ctx context.Context, exec bob.Executor, asset0 *Asset, user1 *User) error {
	setter := &AssetSetter{
		CreatedBy: omit.From(user1.ID),
	}

	err := Assets.Update(ctx, exec, setter, asset0)
	if err != nil {
		return fmt.Errorf("attachAssetCreatedByUser0: %w", err)
	}

	return nil
}

func (asset0 *Asset) InsertCreatedByUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := Users.Insert(ctx, exec, related)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	err = attachAssetCreatedByUser0(ctx, exec, asset0, user1)
	if err != nil {
		return err
	}

	asset0.R.CreatedByUser = user1

	user1.R.CreatedByAssets = append(user1.R.CreatedByAssets, asset0)

	return nil
}

func (asset0 *Asset) AttachCreatedByUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	err = attachAssetCreatedByUser0(ctx, exec, asset0, user1)
	if err != nil {
		return err
	}

	asset0.R.CreatedByUser = user1

	user1.R.CreatedByAssets = append(user1.R.CreatedByAssets, asset0)

	return nil
}

func attachAssetCheckedOutToUser0(ctx context.Context, exec bob.Executor, asset0 *Asset, user1 *User) error {
	setter := &AssetSetter{
		CheckedOutTo: omitnull.From(user1.ID),
	}

	err := Assets.Update(ctx, exec, setter, asset0)
	if err != nil {
		return fmt.Errorf("attachAssetCheckedOutToUser0: %w", err)
	}

	return nil
}

func (asset0 *Asset) InsertCheckedOutToUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := Users.Insert(ctx, exec, related)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	err = attachAssetCheckedOutToUser0(ctx, exec, asset0, user1)
	if err != nil {
		return err
	}

	asset0.R.CheckedOutToUser = user1

	user1.R.CheckedOutToAssets = append(user1.R.CheckedOutToAssets, asset0)

	return nil
}

func (asset0 *Asset) AttachCheckedOutToUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	err = attachAssetCheckedOutToUser0(ctx, exec, asset0, user1)
	if err != nil {
		return err
	}

	asset0.R.CheckedOutToUser = user1

	user1.R.CheckedOutToAssets = append(user1.R.CheckedOutToAssets, asset0)

	return nil
}

func attachAssetTag0(ctx context.Context, exec bob.Executor, asset0 *Asset, tag1 *Tag) error {
	setter := &AssetSetter{
		TagID: omitnull.From(tag1.ID),
	}

	err := Assets.Update(ctx, exec, setter, asset0)
	if err != nil {
		return fmt.Errorf("attachAssetTag0: %w", err)
	}

	return nil
}

func (asset0 *Asset) InsertTag(ctx context.Context, exec bob.Executor, related *TagSetter) error {
	tag1, err := Tags.Insert(ctx, exec, related)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	err = attachAssetTag0(ctx, exec, asset0, tag1)
	if err != nil {
		return err
	}

	asset0.R.Tag = tag1

	tag1.R.Assets = append(tag1.R.Assets, asset0)

	return nil
}

func (asset0 *Asset) AttachTag(ctx context.Context, exec bob.Executor, tag1 *Tag) error {
	var err error

	err = attachAssetTag0(ctx, exec, asset0, tag1)
	if err != nil {
		return err
	}

	asset0.R.Tag = tag1

	tag1.R.Assets = append(tag1.R.Assets, asset0)

	return nil
}

func attachAssetParentAsset0(ctx context.Context, exec bob.Executor, asset0 *Asset, asset1 *Asset) error {
	setter := &AssetSetter{
		ParentAssetID: omitnull.From(asset1.ID),
	}

	err := Assets.Update(ctx, exec, setter, asset0)
	if err != nil {
		return fmt.Errorf("attachAssetParentAsset0: %w", err)
	}

	return nil
}

func (asset0 *Asset) InsertParentAsset(ctx context.Context, exec bob.Executor, related *AssetSetter) error {
	asset1, err := Assets.Insert(ctx, exec, related)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	err = attachAssetParentAsset0(ctx, exec, asset0, asset1)
	if err != nil {
		return err
	}

	asset0.R.ParentAsset = asset1

	asset1.R.ParentAsset = asset0

	return nil
}

func (asset0 *Asset) AttachParentAsset(ctx context.Context, exec bob.Executor, asset1 *Asset) error {
	var err error

	err = attachAssetParentAsset0(ctx, exec, asset0, asset1)
	if err != nil {
		return err
	}

	asset0.R.ParentAsset = asset1

	asset1.R.ParentAsset = asset0

	return nil
}

func insertAssetReverseParentAssets0(ctx context.Context, exec bob.Executor, assets1 []*AssetSetter, asset0 *Asset) (AssetSlice, error) {
	for _, asset1 := range assets1 {
		asset1.ParentAssetID = omitnull.From(asset0.ID)
	}

	ret, err := Assets.InsertMany(ctx, exec, assets1...)
	if err != nil {
		return ret, fmt.Errorf("insertAssetReverseParentAssets0: %w", err)
	}

	return ret, nil
}

func attachAssetReverseParentAssets0(ctx context.Context, exec bob.Executor, assets1 AssetSlice, asset0 *Asset) error {
	setter := &AssetSetter{
		ParentAssetID: omitnull.From(asset0.ID),
	}

	err := Assets.Update(ctx, exec, setter, assets1...)
	if err != nil {
		return fmt.Errorf("attachAssetReverseParentAssets0: %w", err)
	}

	return nil
}

func (asset0 *Asset) InsertReverseParentAssets(ctx context.Context, exec bob.Executor, related ...*AssetSetter) error {
	if len(related) == 0 {
		return nil
	}

	asset1, err := insertAssetReverseParentAssets0(ctx, exec, related, asset0)
	if err != nil {
		return err
	}

	asset0.R.ReverseParentAssets = append(asset0.R.ReverseParentAssets, asset1...)

	for _, rel := range asset1 {
		rel.R.ReverseParentAssets = append(rel.R.ReverseParentAssets, asset0)
	}

	return nil
}

func (asset0 *Asset) AttachReverseParentAssets(ctx context.Context, exec bob.Executor, related ...*Asset) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	asset1 := AssetSlice(related)

	err = attachAssetReverseParentAssets0(ctx, exec, asset1, asset0)
	if err != nil {
		return err
	}

	asset0.R.ReverseParentAssets = append(asset0.R.ReverseParentAssets, asset1...)

	for _, rel := range related {
		rel.R.ReverseParentAssets = append(rel.R.ReverseParentAssets, asset0)
	}

	return nil
}
