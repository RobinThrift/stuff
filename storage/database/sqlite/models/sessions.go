// Code generated by BobGen sqlite v0.22.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"

	"github.com/RobinThrift/stuff/storage/database/sqlite/types"
	"github.com/aarondl/opt/omit"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/sqlite"
	"github.com/stephenafamo/bob/dialect/sqlite/dialect"
	"github.com/stephenafamo/bob/dialect/sqlite/im"
	"github.com/stephenafamo/bob/dialect/sqlite/sm"
	"github.com/stephenafamo/bob/dialect/sqlite/um"
)

// Session is an object representing the database table.
type Session struct {
	ID        int64                `db:"id,pk" `
	Token     string               `db:"token" `
	Data      []byte               `db:"data" `
	ExpiresAt types.SQLiteDatetime `db:"expires_at" `
}

// SessionSlice is an alias for a slice of pointers to Session.
// This should almost always be used instead of []*Session.
type SessionSlice []*Session

// Sessions contains methods to work with the sessions table
var Sessions = sqlite.NewTablex[*Session, SessionSlice, *SessionSetter]("", "sessions")

// SessionsQuery is a query on the sessions table
type SessionsQuery = *sqlite.ViewQuery[*Session, SessionSlice]

// SessionsStmt is a prepared statment on sessions
type SessionsStmt = bob.QueryStmt[*Session, SessionSlice]

// SessionSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type SessionSetter struct {
	ID        omit.Val[int64]                `db:"id,pk"`
	Token     omit.Val[string]               `db:"token"`
	Data      omit.Val[[]byte]               `db:"data"`
	ExpiresAt omit.Val[types.SQLiteDatetime] `db:"expires_at"`
}

func (s SessionSetter) SetColumns() []string {
	vals := make([]string, 0, 4)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.Token.IsUnset() {
		vals = append(vals, "token")
	}

	if !s.Data.IsUnset() {
		vals = append(vals, "data")
	}

	if !s.ExpiresAt.IsUnset() {
		vals = append(vals, "expires_at")
	}

	return vals
}

func (s SessionSetter) Overwrite(t *Session) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.Token.IsUnset() {
		t.Token, _ = s.Token.Get()
	}
	if !s.Data.IsUnset() {
		t.Data, _ = s.Data.Get()
	}
	if !s.ExpiresAt.IsUnset() {
		t.ExpiresAt, _ = s.ExpiresAt.Get()
	}
}

func (s SessionSetter) Apply(q *dialect.UpdateQuery) {
	if !s.ID.IsUnset() {
		um.Set("id").ToArg(s.ID).Apply(q)
	}
	if !s.Token.IsUnset() {
		um.Set("token").ToArg(s.Token).Apply(q)
	}
	if !s.Data.IsUnset() {
		um.Set("data").ToArg(s.Data).Apply(q)
	}
	if !s.ExpiresAt.IsUnset() {
		um.Set("expires_at").ToArg(s.ExpiresAt).Apply(q)
	}
}

func (s SessionSetter) Insert() bob.Mod[*dialect.InsertQuery] {
	vals := make([]bob.Expression, 0, 4)
	if !s.ID.IsUnset() {
		vals = append(vals, sqlite.Arg(s.ID))
	}

	if !s.Token.IsUnset() {
		vals = append(vals, sqlite.Arg(s.Token))
	}

	if !s.Data.IsUnset() {
		vals = append(vals, sqlite.Arg(s.Data))
	}

	if !s.ExpiresAt.IsUnset() {
		vals = append(vals, sqlite.Arg(s.ExpiresAt))
	}

	return im.Values(vals...)
}

type sessionColumnNames struct {
	ID        string
	Token     string
	Data      string
	ExpiresAt string
}

var SessionColumns = struct {
	ID        sqlite.Expression
	Token     sqlite.Expression
	Data      sqlite.Expression
	ExpiresAt sqlite.Expression
}{
	ID:        sqlite.Quote("sessions", "id"),
	Token:     sqlite.Quote("sessions", "token"),
	Data:      sqlite.Quote("sessions", "data"),
	ExpiresAt: sqlite.Quote("sessions", "expires_at"),
}

type sessionWhere[Q sqlite.Filterable] struct {
	ID        sqlite.WhereMod[Q, int64]
	Token     sqlite.WhereMod[Q, string]
	Data      sqlite.WhereMod[Q, []byte]
	ExpiresAt sqlite.WhereMod[Q, types.SQLiteDatetime]
}

func SessionWhere[Q sqlite.Filterable]() sessionWhere[Q] {
	return sessionWhere[Q]{
		ID:        sqlite.Where[Q, int64](SessionColumns.ID),
		Token:     sqlite.Where[Q, string](SessionColumns.Token),
		Data:      sqlite.Where[Q, []byte](SessionColumns.Data),
		ExpiresAt: sqlite.Where[Q, types.SQLiteDatetime](SessionColumns.ExpiresAt),
	}
}

// FindSession retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindSession(ctx context.Context, exec bob.Executor, IDPK int64, cols ...string) (*Session, error) {
	if len(cols) == 0 {
		return Sessions.Query(
			ctx, exec,
			SelectWhere.Sessions.ID.EQ(IDPK),
		).One()
	}

	return Sessions.Query(
		ctx, exec,
		SelectWhere.Sessions.ID.EQ(IDPK),
		sm.Columns(Sessions.Columns().Only(cols...)),
	).One()
}

// SessionExists checks the presence of a single record by primary key
func SessionExists(ctx context.Context, exec bob.Executor, IDPK int64) (bool, error) {
	return Sessions.Query(
		ctx, exec,
		SelectWhere.Sessions.ID.EQ(IDPK),
	).Exists()
}

// PrimaryKeyVals returns the primary key values of the Session
func (o *Session) PrimaryKeyVals() bob.Expression {
	return sqlite.Arg(o.ID)
}

// Update uses an executor to update the Session
func (o *Session) Update(ctx context.Context, exec bob.Executor, s *SessionSetter) error {
	return Sessions.Update(ctx, exec, s, o)
}

// Delete deletes a single Session record with an executor
func (o *Session) Delete(ctx context.Context, exec bob.Executor) error {
	return Sessions.Delete(ctx, exec, o)
}

// Reload refreshes the Session using the executor
func (o *Session) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Sessions.Query(
		ctx, exec,
		SelectWhere.Sessions.ID.EQ(o.ID),
	).One()
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

func (o SessionSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals SessionSetter) error {
	return Sessions.Update(ctx, exec, &vals, o...)
}

func (o SessionSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	return Sessions.Delete(ctx, exec, o...)
}

func (o SessionSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	IDPK := make([]int64, len(o))

	for i, o := range o {
		IDPK[i] = o.ID
	}

	mods = append(mods,
		SelectWhere.Sessions.ID.In(IDPK...),
	)

	o2, err := Sessions.Query(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.ID != old.ID {
				continue
			}

			*old = *new
			break
		}
	}

	return nil
}
