// Code generated by BobGen sqlite v0.22.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"

	"github.com/RobinThrift/stuff/storage/database/sqlite/types"
	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/clause"
	"github.com/stephenafamo/bob/dialect/sqlite"
	"github.com/stephenafamo/bob/dialect/sqlite/dialect"
	"github.com/stephenafamo/bob/dialect/sqlite/im"
	"github.com/stephenafamo/bob/dialect/sqlite/sm"
	"github.com/stephenafamo/bob/dialect/sqlite/um"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// AssetPurchase is an object representing the database table.
type AssetPurchase struct {
	ID        int64                          `db:"id,pk" `
	AssetID   int64                          `db:"asset_id" `
	Supplier  null.Val[string]               `db:"supplier" `
	OrderNo   null.Val[string]               `db:"order_no" `
	OrderDate null.Val[types.SQLiteDatetime] `db:"order_date" `
	Amount    null.Val[int64]                `db:"amount" `
	Currency  null.Val[string]               `db:"currency" `
	CreatedBy int64                          `db:"created_by" `
	CreatedAt types.SQLiteDatetime           `db:"created_at" `
	UpdatedAt types.SQLiteDatetime           `db:"updated_at" `

	R assetPurchaseR `db:"-" `
}

// AssetPurchaseSlice is an alias for a slice of pointers to AssetPurchase.
// This should almost always be used instead of []*AssetPurchase.
type AssetPurchaseSlice []*AssetPurchase

// AssetPurchases contains methods to work with the asset_purchases table
var AssetPurchases = sqlite.NewTablex[*AssetPurchase, AssetPurchaseSlice, *AssetPurchaseSetter]("", "asset_purchases")

// AssetPurchasesQuery is a query on the asset_purchases table
type AssetPurchasesQuery = *sqlite.ViewQuery[*AssetPurchase, AssetPurchaseSlice]

// AssetPurchasesStmt is a prepared statment on asset_purchases
type AssetPurchasesStmt = bob.QueryStmt[*AssetPurchase, AssetPurchaseSlice]

// assetPurchaseR is where relationships are stored.
type assetPurchaseR struct {
	CreatedByUser *User  // fk_asset_purchases_0
	Asset         *Asset // fk_asset_purchases_1
}

// AssetPurchaseSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type AssetPurchaseSetter struct {
	ID        omit.Val[int64]                    `db:"id,pk"`
	AssetID   omit.Val[int64]                    `db:"asset_id"`
	Supplier  omitnull.Val[string]               `db:"supplier"`
	OrderNo   omitnull.Val[string]               `db:"order_no"`
	OrderDate omitnull.Val[types.SQLiteDatetime] `db:"order_date"`
	Amount    omitnull.Val[int64]                `db:"amount"`
	Currency  omitnull.Val[string]               `db:"currency"`
	CreatedBy omit.Val[int64]                    `db:"created_by"`
	CreatedAt omit.Val[types.SQLiteDatetime]     `db:"created_at"`
	UpdatedAt omit.Val[types.SQLiteDatetime]     `db:"updated_at"`
}

func (s AssetPurchaseSetter) SetColumns() []string {
	vals := make([]string, 0, 10)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.AssetID.IsUnset() {
		vals = append(vals, "asset_id")
	}

	if !s.Supplier.IsUnset() {
		vals = append(vals, "supplier")
	}

	if !s.OrderNo.IsUnset() {
		vals = append(vals, "order_no")
	}

	if !s.OrderDate.IsUnset() {
		vals = append(vals, "order_date")
	}

	if !s.Amount.IsUnset() {
		vals = append(vals, "amount")
	}

	if !s.Currency.IsUnset() {
		vals = append(vals, "currency")
	}

	if !s.CreatedBy.IsUnset() {
		vals = append(vals, "created_by")
	}

	if !s.CreatedAt.IsUnset() {
		vals = append(vals, "created_at")
	}

	if !s.UpdatedAt.IsUnset() {
		vals = append(vals, "updated_at")
	}

	return vals
}

func (s AssetPurchaseSetter) Overwrite(t *AssetPurchase) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.AssetID.IsUnset() {
		t.AssetID, _ = s.AssetID.Get()
	}
	if !s.Supplier.IsUnset() {
		t.Supplier, _ = s.Supplier.GetNull()
	}
	if !s.OrderNo.IsUnset() {
		t.OrderNo, _ = s.OrderNo.GetNull()
	}
	if !s.OrderDate.IsUnset() {
		t.OrderDate, _ = s.OrderDate.GetNull()
	}
	if !s.Amount.IsUnset() {
		t.Amount, _ = s.Amount.GetNull()
	}
	if !s.Currency.IsUnset() {
		t.Currency, _ = s.Currency.GetNull()
	}
	if !s.CreatedBy.IsUnset() {
		t.CreatedBy, _ = s.CreatedBy.Get()
	}
	if !s.CreatedAt.IsUnset() {
		t.CreatedAt, _ = s.CreatedAt.Get()
	}
	if !s.UpdatedAt.IsUnset() {
		t.UpdatedAt, _ = s.UpdatedAt.Get()
	}
}

func (s AssetPurchaseSetter) Apply(q *dialect.UpdateQuery) {
	if !s.ID.IsUnset() {
		um.Set("id").ToArg(s.ID).Apply(q)
	}
	if !s.AssetID.IsUnset() {
		um.Set("asset_id").ToArg(s.AssetID).Apply(q)
	}
	if !s.Supplier.IsUnset() {
		um.Set("supplier").ToArg(s.Supplier).Apply(q)
	}
	if !s.OrderNo.IsUnset() {
		um.Set("order_no").ToArg(s.OrderNo).Apply(q)
	}
	if !s.OrderDate.IsUnset() {
		um.Set("order_date").ToArg(s.OrderDate).Apply(q)
	}
	if !s.Amount.IsUnset() {
		um.Set("amount").ToArg(s.Amount).Apply(q)
	}
	if !s.Currency.IsUnset() {
		um.Set("currency").ToArg(s.Currency).Apply(q)
	}
	if !s.CreatedBy.IsUnset() {
		um.Set("created_by").ToArg(s.CreatedBy).Apply(q)
	}
	if !s.CreatedAt.IsUnset() {
		um.Set("created_at").ToArg(s.CreatedAt).Apply(q)
	}
	if !s.UpdatedAt.IsUnset() {
		um.Set("updated_at").ToArg(s.UpdatedAt).Apply(q)
	}
}

func (s AssetPurchaseSetter) Insert() bob.Mod[*dialect.InsertQuery] {
	vals := make([]bob.Expression, 0, 10)
	if !s.ID.IsUnset() {
		vals = append(vals, sqlite.Arg(s.ID))
	}

	if !s.AssetID.IsUnset() {
		vals = append(vals, sqlite.Arg(s.AssetID))
	}

	if !s.Supplier.IsUnset() {
		vals = append(vals, sqlite.Arg(s.Supplier))
	}

	if !s.OrderNo.IsUnset() {
		vals = append(vals, sqlite.Arg(s.OrderNo))
	}

	if !s.OrderDate.IsUnset() {
		vals = append(vals, sqlite.Arg(s.OrderDate))
	}

	if !s.Amount.IsUnset() {
		vals = append(vals, sqlite.Arg(s.Amount))
	}

	if !s.Currency.IsUnset() {
		vals = append(vals, sqlite.Arg(s.Currency))
	}

	if !s.CreatedBy.IsUnset() {
		vals = append(vals, sqlite.Arg(s.CreatedBy))
	}

	if !s.CreatedAt.IsUnset() {
		vals = append(vals, sqlite.Arg(s.CreatedAt))
	}

	if !s.UpdatedAt.IsUnset() {
		vals = append(vals, sqlite.Arg(s.UpdatedAt))
	}

	return im.Values(vals...)
}

type assetPurchaseColumnNames struct {
	ID        string
	AssetID   string
	Supplier  string
	OrderNo   string
	OrderDate string
	Amount    string
	Currency  string
	CreatedBy string
	CreatedAt string
	UpdatedAt string
}

type assetPurchaseRelationshipJoins[Q dialect.Joinable] struct {
	CreatedByUser bob.Mod[Q]
	Asset         bob.Mod[Q]
}

func buildassetPurchaseRelationshipJoins[Q dialect.Joinable](ctx context.Context, typ string) assetPurchaseRelationshipJoins[Q] {
	return assetPurchaseRelationshipJoins[Q]{
		CreatedByUser: assetPurchasesJoinCreatedByUser[Q](ctx, typ),
		Asset:         assetPurchasesJoinAsset[Q](ctx, typ),
	}
}

func assetPurchasesJoin[Q dialect.Joinable](ctx context.Context) joinSet[assetPurchaseRelationshipJoins[Q]] {
	return joinSet[assetPurchaseRelationshipJoins[Q]]{
		InnerJoin: buildassetPurchaseRelationshipJoins[Q](ctx, clause.InnerJoin),
		LeftJoin:  buildassetPurchaseRelationshipJoins[Q](ctx, clause.LeftJoin),
		RightJoin: buildassetPurchaseRelationshipJoins[Q](ctx, clause.RightJoin),
	}
}

var AssetPurchaseColumns = struct {
	ID        sqlite.Expression
	AssetID   sqlite.Expression
	Supplier  sqlite.Expression
	OrderNo   sqlite.Expression
	OrderDate sqlite.Expression
	Amount    sqlite.Expression
	Currency  sqlite.Expression
	CreatedBy sqlite.Expression
	CreatedAt sqlite.Expression
	UpdatedAt sqlite.Expression
}{
	ID:        sqlite.Quote("asset_purchases", "id"),
	AssetID:   sqlite.Quote("asset_purchases", "asset_id"),
	Supplier:  sqlite.Quote("asset_purchases", "supplier"),
	OrderNo:   sqlite.Quote("asset_purchases", "order_no"),
	OrderDate: sqlite.Quote("asset_purchases", "order_date"),
	Amount:    sqlite.Quote("asset_purchases", "amount"),
	Currency:  sqlite.Quote("asset_purchases", "currency"),
	CreatedBy: sqlite.Quote("asset_purchases", "created_by"),
	CreatedAt: sqlite.Quote("asset_purchases", "created_at"),
	UpdatedAt: sqlite.Quote("asset_purchases", "updated_at"),
}

type assetPurchaseWhere[Q sqlite.Filterable] struct {
	ID        sqlite.WhereMod[Q, int64]
	AssetID   sqlite.WhereMod[Q, int64]
	Supplier  sqlite.WhereNullMod[Q, string]
	OrderNo   sqlite.WhereNullMod[Q, string]
	OrderDate sqlite.WhereNullMod[Q, types.SQLiteDatetime]
	Amount    sqlite.WhereNullMod[Q, int64]
	Currency  sqlite.WhereNullMod[Q, string]
	CreatedBy sqlite.WhereMod[Q, int64]
	CreatedAt sqlite.WhereMod[Q, types.SQLiteDatetime]
	UpdatedAt sqlite.WhereMod[Q, types.SQLiteDatetime]
}

func AssetPurchaseWhere[Q sqlite.Filterable]() assetPurchaseWhere[Q] {
	return assetPurchaseWhere[Q]{
		ID:        sqlite.Where[Q, int64](AssetPurchaseColumns.ID),
		AssetID:   sqlite.Where[Q, int64](AssetPurchaseColumns.AssetID),
		Supplier:  sqlite.WhereNull[Q, string](AssetPurchaseColumns.Supplier),
		OrderNo:   sqlite.WhereNull[Q, string](AssetPurchaseColumns.OrderNo),
		OrderDate: sqlite.WhereNull[Q, types.SQLiteDatetime](AssetPurchaseColumns.OrderDate),
		Amount:    sqlite.WhereNull[Q, int64](AssetPurchaseColumns.Amount),
		Currency:  sqlite.WhereNull[Q, string](AssetPurchaseColumns.Currency),
		CreatedBy: sqlite.Where[Q, int64](AssetPurchaseColumns.CreatedBy),
		CreatedAt: sqlite.Where[Q, types.SQLiteDatetime](AssetPurchaseColumns.CreatedAt),
		UpdatedAt: sqlite.Where[Q, types.SQLiteDatetime](AssetPurchaseColumns.UpdatedAt),
	}
}

// FindAssetPurchase retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindAssetPurchase(ctx context.Context, exec bob.Executor, IDPK int64, cols ...string) (*AssetPurchase, error) {
	if len(cols) == 0 {
		return AssetPurchases.Query(
			ctx, exec,
			SelectWhere.AssetPurchases.ID.EQ(IDPK),
		).One()
	}

	return AssetPurchases.Query(
		ctx, exec,
		SelectWhere.AssetPurchases.ID.EQ(IDPK),
		sm.Columns(AssetPurchases.Columns().Only(cols...)),
	).One()
}

// AssetPurchaseExists checks the presence of a single record by primary key
func AssetPurchaseExists(ctx context.Context, exec bob.Executor, IDPK int64) (bool, error) {
	return AssetPurchases.Query(
		ctx, exec,
		SelectWhere.AssetPurchases.ID.EQ(IDPK),
	).Exists()
}

// PrimaryKeyVals returns the primary key values of the AssetPurchase
func (o *AssetPurchase) PrimaryKeyVals() bob.Expression {
	return sqlite.Arg(o.ID)
}

// Update uses an executor to update the AssetPurchase
func (o *AssetPurchase) Update(ctx context.Context, exec bob.Executor, s *AssetPurchaseSetter) error {
	return AssetPurchases.Update(ctx, exec, s, o)
}

// Delete deletes a single AssetPurchase record with an executor
func (o *AssetPurchase) Delete(ctx context.Context, exec bob.Executor) error {
	return AssetPurchases.Delete(ctx, exec, o)
}

// Reload refreshes the AssetPurchase using the executor
func (o *AssetPurchase) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := AssetPurchases.Query(
		ctx, exec,
		SelectWhere.AssetPurchases.ID.EQ(o.ID),
	).One()
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

func (o AssetPurchaseSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals AssetPurchaseSetter) error {
	return AssetPurchases.Update(ctx, exec, &vals, o...)
}

func (o AssetPurchaseSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	return AssetPurchases.Delete(ctx, exec, o...)
}

func (o AssetPurchaseSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	IDPK := make([]int64, len(o))

	for i, o := range o {
		IDPK[i] = o.ID
	}

	mods = append(mods,
		SelectWhere.AssetPurchases.ID.In(IDPK...),
	)

	o2, err := AssetPurchases.Query(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			*old = *new
			break
		}
	}

	return nil
}

func assetPurchasesJoinCreatedByUser[Q dialect.Joinable](ctx context.Context, typ string) bob.Mod[Q] {
	return mods.QueryMods[Q]{
		dialect.Join[Q](typ, Users.Name(ctx)).On(
			UserColumns.ID.EQ(AssetPurchaseColumns.CreatedBy),
		),
	}
}
func assetPurchasesJoinAsset[Q dialect.Joinable](ctx context.Context, typ string) bob.Mod[Q] {
	return mods.QueryMods[Q]{
		dialect.Join[Q](typ, Assets.Name(ctx)).On(
			AssetColumns.ID.EQ(AssetPurchaseColumns.AssetID),
		),
	}
}

// CreatedByUser starts a query for related objects on users
func (o *AssetPurchase) CreatedByUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(ctx, exec, append(mods,
		sm.Where(UserColumns.ID.EQ(sqlite.Arg(o.CreatedBy))),
	)...)
}

func (os AssetPurchaseSlice) CreatedByUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = sqlite.ArgGroup(o.CreatedBy)
	}

	return Users.Query(ctx, exec, append(mods,
		sm.Where(sqlite.Group(UserColumns.ID).In(PKArgs...)),
	)...)
}

// Asset starts a query for related objects on assets
func (o *AssetPurchase) Asset(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) AssetsQuery {
	return Assets.Query(ctx, exec, append(mods,
		sm.Where(AssetColumns.ID.EQ(sqlite.Arg(o.AssetID))),
	)...)
}

func (os AssetPurchaseSlice) Asset(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) AssetsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = sqlite.ArgGroup(o.AssetID)
	}

	return Assets.Query(ctx, exec, append(mods,
		sm.Where(sqlite.Group(AssetColumns.ID).In(PKArgs...)),
	)...)
}

func (o *AssetPurchase) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "CreatedByUser":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("assetPurchase cannot load %T as %q", retrieved, name)
		}

		o.R.CreatedByUser = rel

		return nil
	case "Asset":
		rel, ok := retrieved.(*Asset)
		if !ok {
			return fmt.Errorf("assetPurchase cannot load %T as %q", retrieved, name)
		}

		o.R.Asset = rel

		return nil
	default:
		return fmt.Errorf("assetPurchase has no relationship %q", name)
	}
}

func PreloadAssetPurchaseCreatedByUser(opts ...sqlite.PreloadOption) sqlite.Preloader {
	return sqlite.Preload[*User, UserSlice](orm.Relationship{
		Name: "CreatedByUser",
		Sides: []orm.RelSide{
			{
				From: "asset_purchases",
				To:   TableNames.Users,
				ToExpr: func(ctx context.Context) bob.Expression {
					return Users.Name(ctx)
				},
				FromColumns: []string{
					ColumnNames.AssetPurchases.CreatedBy,
				},
				ToColumns: []string{
					ColumnNames.Users.ID,
				},
			},
		},
	}, Users.Columns().Names(), opts...)
}

func ThenLoadAssetPurchaseCreatedByUser(queryMods ...bob.Mod[*dialect.SelectQuery]) sqlite.Loader {
	return sqlite.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadAssetPurchaseCreatedByUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load AssetPurchaseCreatedByUser", retrieved)
		}

		err := loader.LoadAssetPurchaseCreatedByUser(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadAssetPurchaseCreatedByUser loads the assetPurchase's CreatedByUser into the .R struct
func (o *AssetPurchase) LoadAssetPurchaseCreatedByUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.CreatedByUser = nil

	related, err := o.CreatedByUser(ctx, exec, mods...).One()
	if err != nil {
		return err
	}

	o.R.CreatedByUser = related
	return nil
}

// LoadAssetPurchaseCreatedByUser loads the assetPurchase's CreatedByUser into the .R struct
func (os AssetPurchaseSlice) LoadAssetPurchaseCreatedByUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.CreatedByUser(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.CreatedBy != rel.ID {
				continue
			}

			o.R.CreatedByUser = rel
			break
		}
	}

	return nil
}

func PreloadAssetPurchaseAsset(opts ...sqlite.PreloadOption) sqlite.Preloader {
	return sqlite.Preload[*Asset, AssetSlice](orm.Relationship{
		Name: "Asset",
		Sides: []orm.RelSide{
			{
				From: "asset_purchases",
				To:   TableNames.Assets,
				ToExpr: func(ctx context.Context) bob.Expression {
					return Assets.Name(ctx)
				},
				FromColumns: []string{
					ColumnNames.AssetPurchases.AssetID,
				},
				ToColumns: []string{
					ColumnNames.Assets.ID,
				},
			},
		},
	}, Assets.Columns().Names(), opts...)
}

func ThenLoadAssetPurchaseAsset(queryMods ...bob.Mod[*dialect.SelectQuery]) sqlite.Loader {
	return sqlite.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadAssetPurchaseAsset(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load AssetPurchaseAsset", retrieved)
		}

		err := loader.LoadAssetPurchaseAsset(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadAssetPurchaseAsset loads the assetPurchase's Asset into the .R struct
func (o *AssetPurchase) LoadAssetPurchaseAsset(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Asset = nil

	related, err := o.Asset(ctx, exec, mods...).One()
	if err != nil {
		return err
	}

	o.R.Asset = related
	return nil
}

// LoadAssetPurchaseAsset loads the assetPurchase's Asset into the .R struct
func (os AssetPurchaseSlice) LoadAssetPurchaseAsset(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	assets, err := os.Asset(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range assets {
			if o.AssetID != rel.ID {
				continue
			}

			o.R.Asset = rel
			break
		}
	}

	return nil
}

func attachAssetPurchaseCreatedByUser0(ctx context.Context, exec bob.Executor, assetPurchase0 *AssetPurchase, user1 *User) error {
	setter := &AssetPurchaseSetter{
		CreatedBy: omit.From(user1.ID),
	}

	err := AssetPurchases.Update(ctx, exec, setter, assetPurchase0)
	if err != nil {
		return fmt.Errorf("attachAssetPurchaseCreatedByUser0: %w", err)
	}

	return nil
}

func (assetPurchase0 *AssetPurchase) InsertCreatedByUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := Users.Insert(ctx, exec, related)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	err = attachAssetPurchaseCreatedByUser0(ctx, exec, assetPurchase0, user1)
	if err != nil {
		return err
	}

	assetPurchase0.R.CreatedByUser = user1

	return nil
}

func (assetPurchase0 *AssetPurchase) AttachCreatedByUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	err = attachAssetPurchaseCreatedByUser0(ctx, exec, assetPurchase0, user1)
	if err != nil {
		return err
	}

	assetPurchase0.R.CreatedByUser = user1

	return nil
}

func attachAssetPurchaseAsset0(ctx context.Context, exec bob.Executor, assetPurchase0 *AssetPurchase, asset1 *Asset) error {
	setter := &AssetPurchaseSetter{
		AssetID: omit.From(asset1.ID),
	}

	err := AssetPurchases.Update(ctx, exec, setter, assetPurchase0)
	if err != nil {
		return fmt.Errorf("attachAssetPurchaseAsset0: %w", err)
	}

	return nil
}

func (assetPurchase0 *AssetPurchase) InsertAsset(ctx context.Context, exec bob.Executor, related *AssetSetter) error {
	asset1, err := Assets.Insert(ctx, exec, related)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	err = attachAssetPurchaseAsset0(ctx, exec, assetPurchase0, asset1)
	if err != nil {
		return err
	}

	assetPurchase0.R.Asset = asset1

	return nil
}

func (assetPurchase0 *AssetPurchase) AttachAsset(ctx context.Context, exec bob.Executor, asset1 *Asset) error {
	var err error

	err = attachAssetPurchaseAsset0(ctx, exec, assetPurchase0, asset1)
	if err != nil {
		return err
	}

	assetPurchase0.R.Asset = asset1

	return nil
}
