// Code generated by templ@v0.2.316 DO NOT EDIT.

package views

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

func ChangePasswordPage(csrfToken string, validationErrs map[string]string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"flex items-center min-h-screen bg-white\"><div class=\"container mx-auto\"><div class=\"max-w-xl mx-auto my-10\">")
		if err != nil {
			return err
		}
		err = logo("mt-6 text-6xl").Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<div class=\"m-7 p-8 border border-gray-200 rounded-md\"><form action=\"/auth/changepassword\" method=\"post\"><input type=\"hidden\" name=\"stuff.csrf.token\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(csrfToken))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		err = input(inputProps{
			class:         "mb-6",
			_type:         "password",
			name:          "current_password",
			placeholder:   "Current Password",
			label:         "Current Password",
			icon:          lockIcon(),
			required:      true,
			autoComplete:  "current-password",
			validationErr: validationErrs["current_password"],
		}).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = input(inputProps{
			class:         "mb-6",
			_type:         "password",
			name:          "new_password",
			placeholder:   "New Password",
			label:         "New Password",
			icon:          lockIcon(),
			required:      true,
			autoComplete:  "new-password",
			validationErr: validationErrs["new_password"],
		}).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = input(inputProps{
			class:         "mb-6",
			_type:         "password",
			name:          "new_password_repeat",
			placeholder:   "Repeat New Password",
			label:         "Password",
			icon:          lockIcon(),
			required:      true,
			autoComplete:  "repeat-new-password",
			validationErr: validationErrs["new_password_repeat"],
		}).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		var_2 := templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
			templBuffer, templIsBuffer := w.(*bytes.Buffer)
			if !templIsBuffer {
				templBuffer = templ.GetBuffer()
				defer templ.ReleaseBuffer(templBuffer)
			}
			var_3 := `Change Password`
			_, err = templBuffer.WriteString(var_3)
			if err != nil {
				return err
			}
			if !templIsBuffer {
				_, err = io.Copy(w, templBuffer)
			}
			return err
		})
		err = button("submit", "w-full").Render(templ.WithChildren(ctx, var_2), templBuffer)
		if err != nil {
			return err
		}
		if validationErrs["general"] != "" {
			_, err = templBuffer.WriteString("<span class=\"text-red-500\">")
			if err != nil {
				return err
			}
			var var_4 string = validationErrs["general"]
			_, err = templBuffer.WriteString(templ.EscapeString(var_4))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</span>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</form></div></div></div></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}
