// Code generated by templ@v0.2.316 DO NOT EDIT.

package views

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

func Layout() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"md:h-screen md:w-screen w-full h-full flex flex-col\">")
		if err != nil {
			return err
		}
		err = siteHeader().Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<div class=\"overflow flex-1 flex flex-col\"><main id=\"main\" class=\"px-3 md:px-6 lg:px-8 pb-5 flex-1\">")
		if err != nil {
			return err
		}
		err = var_1.Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</main>")
		if err != nil {
			return err
		}
		err = footer().Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}

func siteHeader() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_2 := templ.GetChildren(ctx)
		if var_2 == nil {
			var_2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<header class=\"w-full bg-white border-b\"><div x-data=\"{ open: false }\" class=\"relative flex flex-col w-full bg-white md:items-center md:justify-between md:flex-row py-3 px-3 md:px-6 lg:px-8\">")
		if err != nil {
			return err
		}
		err = siteNav().Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = siteNavMobile().Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div></header>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}

func siteNav() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_3 := templ.GetChildren(ctx)
		if var_3 == nil {
			var_3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"flex flex-row items-center justify-start\"><button @click=\"open = !open\" class=\"inline-flex items-center justify-center p-2 text-neutral hover:text-blue-500 focus:outline-none focus:text-black md:hidden\">")
		if err != nil {
			return err
		}
		err = Icon("hamburger-menu", "w-6 h-6").Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button><a class=\"block\" href=\"/\">")
		if err != nil {
			return err
		}
		err = logo("text-xl", "h-6").Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}

func siteNavMobile() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_4 := templ.GetChildren(ctx)
		if var_4 == nil {
			var_4 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var var_5 = []any{templ.SafeClass("flex-col flex-grow hidden md:pb-0 md:flex md:items-center  md:items-center md:flex-row md:ml-5")}
		err = templ.RenderCSSItems(ctx, templBuffer, var_5...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<nav :class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(`{'flex': open, 'hidden': !open}`))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_5).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"><a class=\"px-2 py-2 text-sm text-neutral hover:text-purple-500\" href=\"/\">")
		if err != nil {
			return err
		}
		var_6 := `Assets`
		_, err = templBuffer.WriteString(var_6)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a><a class=\"px-2 py-2 text-sm text-neutral hover:text-purple-500\" href=\"/users\">")
		if err != nil {
			return err
		}
		var_7 := `Users`
		_, err = templBuffer.WriteString(var_7)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a><a class=\"px-2 py-2 text-sm text-neutral hover:text-purple-500 block md:hidden flex flex-row items-center\" href=\"/logout\">")
		if err != nil {
			return err
		}
		var_8 := `Logout`
		_, err = templBuffer.WriteString(var_8)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" ")
		if err != nil {
			return err
		}
		err = Icon("sign-out", "ml-1 w-[16px] h-[16px]").Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a>")
		if err != nil {
			return err
		}
		err = Input(InputProps{
			Class:       "w-full md:w-auto md:ml-auto flex items-center",
			Type:        "search",
			Placeholder: "Search",
			Name:        "search",
			Icon:        Icon("magnifying-glass", "w-[24px] h-[24px]"),
		}).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<a href=\"/logout\" class=\"hidden md:block hover:text-purple-500 ml-5\">")
		if err != nil {
			return err
		}
		err = Icon("sign-out", "w-[24px] h-[24px]").Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a></nav>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}

func footer() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_9 := templ.GetChildren(ctx)
		if var_9 == nil {
			var_9 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<footer class=\"px-3 md:px-6 lg:px-8 py-5 bg-gray-50 w-full\"><div class=\"flex flex-wrap justify-center text-sm\">")
		if err != nil {
			return err
		}
		err = logo("text-sm", "h-0").Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<span class=\"px-5\">")
		if err != nil {
			return err
		}
		var_10 := `Version X`
		_, err = templBuffer.WriteString(var_10)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</span><a href=\"https://github.com/kodeshack/stuff\" class=\"inline-block group flex flex-row justify-center items-center text-blue-400 hover:text-purple-500\" rel=\"noopener noreferrer\">")
		if err != nil {
			return err
		}
		err = Icon("github-logo-duotone", "h-[16px] w-[16px] !hidden group-hover:!inline-block").Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = Icon("github-logo", "h-[16px] w-[16px] group-hover:!hidden").Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" ")
		if err != nil {
			return err
		}
		var_11 := `GitHub`
		_, err = templBuffer.WriteString(var_11)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a></div></footer>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}
