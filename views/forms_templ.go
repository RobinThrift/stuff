// Code generated by templ@v0.2.316 DO NOT EDIT.

package views

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import "time"

type InputProps struct {
	Class             string
	InputClass        string
	InputWrapperClass string
	LabelClass        string

	Value string

	Type          string
	Label         string
	Name          string
	Placeholder   string
	Required      bool
	AutoComplete  string
	Icon          templ.Component
	ValidationErr string
}

func Input(props InputProps) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var var_2 = []any{templ.SafeClass(props.Class)}
		err = templ.RenderCSSItems(ctx, templBuffer, var_2...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<div class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_2).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		if props.Label != "" {
			var var_3 = []any{"block mb-2 text-sm text-gray-600", templ.SafeClass(props.LabelClass)}
			err = templ.RenderCSSItems(ctx, templBuffer, var_3...)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("<label for=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(props.Name))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" class=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_3).String()))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			var var_4 string = props.Label
			_, err = templBuffer.WriteString(templ.EscapeString(var_4))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</label>")
			if err != nil {
				return err
			}
		}
		var var_5 = []any{"relative", templ.SafeClass(props.InputWrapperClass)}
		err = templ.RenderCSSItems(ctx, templBuffer, var_5...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<div class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_5).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		if props.Icon != nil {
			_, err = templBuffer.WriteString("<span class=\"pointer-events-none absolute ml-3 translate-y-1/2 mt-0.5 text-gray-500\"><div class=\"h-4 w-4\">")
			if err != nil {
				return err
			}
			err = props.Icon.Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div></span>")
			if err != nil {
				return err
			}
		}
		var var_6 = []any{
			templ.SafeClass("w-full px-3 py-2 placeholder-gray-300 border border-gray-300 rounded-md focus:outline-none focus:ring focus:ring-blue-100 focus:border-blue-300"),
			templ.KV("pl-11 ", props.Icon != nil),
			templ.SafeClass(props.InputClass),
		}
		err = templ.RenderCSSItems(ctx, templBuffer, var_6...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<input")
		if err != nil {
			return err
		}
		if props.Required {
			_, err = templBuffer.WriteString(" required")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString(" type=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(props.Type))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" name=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(props.Name))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" id=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(props.Name))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		if props.Placeholder != "" {
			_, err = templBuffer.WriteString(" placeholder=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(props.Placeholder))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\"")
			if err != nil {
				return err
			}
		}
		if props.AutoComplete != "" {
			_, err = templBuffer.WriteString(" auto-complete=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(props.AutoComplete))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\"")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString(" class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_6).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		if props.Value != "" {
			_, err = templBuffer.WriteString(" value=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(props.Value))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\"")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		err = var_1.Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		if props.ValidationErr != "" {
			_, err = templBuffer.WriteString("<span class=\"block text-red-500\">")
			if err != nil {
				return err
			}
			var var_7 string = props.ValidationErr
			_, err = templBuffer.WriteString(templ.EscapeString(var_7))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</span>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}

type DatePickerProps struct {
	Class             string
	InputClass        string
	InputWrapperClass string
	LabelClass        string

	Value  time.Time
	Format string

	Type          string
	Label         string
	Name          string
	Placeholder   string
	Required      bool
	AutoComplete  string
	Icon          templ.Component
	ValidationErr string
}

func DatePicker(props DatePickerProps) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_8 := templ.GetChildren(ctx)
		if var_8 == nil {
			var_8 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var var_9 = []any{templ.SafeClass(props.Class)}
		err = templ.RenderCSSItems(ctx, templBuffer, var_9...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<div class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_9).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" x-data=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(`{
			init() {
				return import("/static/flatpickr.min.js").catch(console.error).then(() => {
					globalThis.flatpickr($refs.picker, {
						allowInput: true,
						dateFormat: 'Y-m-d',
					})
				})
			}
		}`))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		if props.Label != "" {
			var var_10 = []any{"block mb-2 text-sm text-gray-600", templ.SafeClass(props.LabelClass)}
			err = templ.RenderCSSItems(ctx, templBuffer, var_10...)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("<label for=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(props.Name))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" class=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_10).String()))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			var var_11 string = props.Label
			_, err = templBuffer.WriteString(templ.EscapeString(var_11))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</label>")
			if err != nil {
				return err
			}
		}
		var var_12 = []any{"relative", templ.SafeClass(props.InputWrapperClass)}
		err = templ.RenderCSSItems(ctx, templBuffer, var_12...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<div class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_12).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		if props.Icon != nil {
			_, err = templBuffer.WriteString("<span class=\"pointer-events-none absolute ml-3 translate-y-1/2 mt-0.5 text-gray-500\"><div class=\"h-4 w-4\">")
			if err != nil {
				return err
			}
			err = props.Icon.Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div></span>")
			if err != nil {
				return err
			}
		}
		var var_13 = []any{
			templ.SafeClass("w-full px-3 py-2 placeholder-gray-300 border border-gray-300 rounded-md focus:outline-none focus:ring focus:ring-blue-100 focus:border-blue-300"),
			templ.KV("pl-11 ", props.Icon != nil),
			templ.SafeClass(props.InputClass),
		}
		err = templ.RenderCSSItems(ctx, templBuffer, var_13...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<input x-ref=\"picker\"")
		if err != nil {
			return err
		}
		if props.Required {
			_, err = templBuffer.WriteString(" required")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString(" type=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(props.Type))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" name=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(props.Name))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" id=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(props.Name))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		if props.Placeholder != "" {
			_, err = templBuffer.WriteString(" placeholder=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(props.Placeholder))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\"")
			if err != nil {
				return err
			}
		}
		if props.AutoComplete != "" {
			_, err = templBuffer.WriteString(" auto-complete=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(props.AutoComplete))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\"")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString(" class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_13).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		if !props.Value.IsZero() {
			_, err = templBuffer.WriteString(" value=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(props.Value.Format(props.Format)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\"")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		err = var_8.Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		if props.ValidationErr != "" {
			_, err = templBuffer.WriteString("<span class=\"block text-red-500\">")
			if err != nil {
				return err
			}
			var var_14 string = props.ValidationErr
			_, err = templBuffer.WriteString(templ.EscapeString(var_14))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</span>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}

type TextareaProps struct {
	Class      string
	LabelClass string
	InputClass string

	Name        string
	Label       string
	Placeholder string

	Value string

	ValidationErr string
}

func Textarea(props TextareaProps) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_15 := templ.GetChildren(ctx)
		if var_15 == nil {
			var_15 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var var_16 = []any{templ.SafeClass(props.Class)}
		err = templ.RenderCSSItems(ctx, templBuffer, var_16...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<div class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_16).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		if props.Label != "" {
			var var_17 = []any{"block mb-2 text-sm text-gray-600", templ.SafeClass(props.LabelClass)}
			err = templ.RenderCSSItems(ctx, templBuffer, var_17...)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("<label for=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(props.Name))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" class=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_17).String()))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			var var_18 string = props.Label
			_, err = templBuffer.WriteString(templ.EscapeString(var_18))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</label>")
			if err != nil {
				return err
			}
		}
		var var_19 = []any{
			templ.SafeClass("w-full h-auto min-h-[96px] px-3 py-2 bg-white border rounded-md border-neutral-300 placeholder:text-neutral-400"),
			templ.SafeClass(props.InputClass),
		}
		err = templ.RenderCSSItems(ctx, templBuffer, var_19...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<textarea class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_19).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" type=\"text\" name=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(props.Name))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" id=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(props.Name))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" placeholder=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(props.Placeholder))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" x-data=\"{resize () { \n				$el.style.height = &#39;0px&#39;; \n				$el.style.height = $el.scrollHeight + &#39;px&#39; \n			}}\" x-init=\"resize()\" @input=\"resize()\">")
		if err != nil {
			return err
		}
		var var_20 string = props.Value
		_, err = templBuffer.WriteString(templ.EscapeString(var_20))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</textarea>")
		if err != nil {
			return err
		}
		if props.ValidationErr != "" {
			_, err = templBuffer.WriteString("<span class=\"text-red-500\">")
			if err != nil {
				return err
			}
			var var_21 string = props.ValidationErr
			_, err = templBuffer.WriteString(templ.EscapeString(var_21))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</span>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}

type SelectProps struct {
	Class      string
	InputClass string
	LabelClass string

	Name  string
	Label string

	Selected string
	Options  [][]string
}

func Select(props SelectProps) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_22 := templ.GetChildren(ctx)
		if var_22 == nil {
			var_22 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var var_23 = []any{templ.SafeClass(props.Class)}
		err = templ.RenderCSSItems(ctx, templBuffer, var_23...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<div class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_23).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"><label for=\"status\" class=\"block mb-2 text-sm text-gray-600 font-bold\">")
		if err != nil {
			return err
		}
		var_24 := `Status`
		_, err = templBuffer.WriteString(var_24)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label>")
		if err != nil {
			return err
		}
		var var_25 = []any{
			templ.SafeClass("w-full px-1 py-2.5 rounded-md border border-gray-300"),
			templ.SafeClass(props.InputClass),
		}
		err = templ.RenderCSSItems(ctx, templBuffer, var_25...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<select name=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(props.Name))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" id=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(props.Name))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_25).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		if props.Selected != "" {
			_, err = templBuffer.WriteString(" value=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(props.Selected))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\"")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		for _, o := range props.Options {
			_, err = templBuffer.WriteString("<option value=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(o[1]))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\"")
			if err != nil {
				return err
			}
			if o[1] == props.Selected {
				if true {
					_, err = templBuffer.WriteString(" selected")
					if err != nil {
						return err
					}
				}
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			var var_26 string = o[0]
			_, err = templBuffer.WriteString(templ.EscapeString(var_26))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</option>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</select></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}

type AutoCompleteProps struct {
	Class             string
	InputClass        string
	InputWrapperClass string
	LabelClass        string

	Source string
	Value  string

	Type          string
	Label         string
	Name          string
	Placeholder   string
	Required      bool
	Icon          templ.Component
	ValidationErr string
}

func AutoComplete(props AutoCompleteProps) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_27 := templ.GetChildren(ctx)
		if var_27 == nil {
			var_27 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var var_28 = []any{templ.SafeClass(props.Class)}
		err = templ.RenderCSSItems(ctx, templBuffer, var_28...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<div class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_28).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" x-data=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(`{
			open: false,
			qs: null,
			items: [],
			value: "` + props.Value + `",
			async fetch() {
				if (!this.qs) {
					this.qs = new Promise(async (resolve, reject) => {
						let { QuickScore } = await import("/static/quick-score.min.js")
						let res = await fetch("` + props.Source + `")
						let opts = await res.json()
						resolve(new QuickScore(opts))
					})
				}
			},
			async onChange(el) {
				this.fetch()
				let qs = await this.qs
				if (!el.value.length) {
					this.items = []
					this.open = false
					return
				}

				this.items = qs.search(el.value).map(i => i.item)

				this.open = this.items.length > 0
				if (this.open) {
					let pos = el.getBoundingClientRect()
					let top = pos.top + window.scrollY
					let left = pos.left + window.scrollX
					this.$refs.suggestions.style.left = left + 'px';
					this.$refs.suggestions.style.top = top + el.offsetHeight + 'px';
					this.$refs.suggestions.style.minWidth = el.offsetWidth + 'px';
				}
			},
			onClickSuggestion(newValue) {
				this.value = ""
				this.value = newValue
				this.open = false
			}
		}`))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		if props.Label != "" {
			var var_29 = []any{"block mb-2 text-sm text-gray-600", templ.SafeClass(props.LabelClass)}
			err = templ.RenderCSSItems(ctx, templBuffer, var_29...)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("<label for=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(props.Name))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" class=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_29).String()))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			var var_30 string = props.Label
			_, err = templBuffer.WriteString(templ.EscapeString(var_30))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</label>")
			if err != nil {
				return err
			}
		}
		var var_31 = []any{"relative", templ.SafeClass(props.InputWrapperClass)}
		err = templ.RenderCSSItems(ctx, templBuffer, var_31...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<div class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_31).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		if props.Icon != nil {
			_, err = templBuffer.WriteString("<span class=\"pointer-events-none absolute ml-3 translate-y-1/2 mt-0.5 text-gray-500\"><div class=\"h-4 w-4\">")
			if err != nil {
				return err
			}
			err = props.Icon.Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div></span>")
			if err != nil {
				return err
			}
		}
		var var_32 = []any{
			templ.SafeClass("w-full px-3 py-2 placeholder-gray-300 border border-gray-300 rounded-md focus:outline-none focus:ring focus:ring-blue-100 focus:border-blue-300"),
			templ.KV("pl-11 ", props.Icon != nil),
			templ.SafeClass(props.InputClass),
		}
		err = templ.RenderCSSItems(ctx, templBuffer, var_32...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<input @keyup.debounce.100ms=\"onChange($el)\"")
		if err != nil {
			return err
		}
		if props.Required {
			_, err = templBuffer.WriteString(" required")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString(" type=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(props.Type))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" name=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(props.Name))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" id=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(props.Name))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" autocomplete=\"off\"")
		if err != nil {
			return err
		}
		if props.Placeholder != "" {
			_, err = templBuffer.WriteString(" placeholder=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(props.Placeholder))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\"")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString(" class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_32).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" x-bind:value=\"value\"><template x-teleport=\"body\"><div x-ref=\"suggestions\" x-show=\"open\" class=\"absolute top-0\" @click.outside=\"open = false\"><div class=\"h-auto overflow-auto bg-white border rounded-md shadow-sm border-neutral-200/70\"><ul class=\"divide-y divide-gray-100 text-sm w-full\"><template x-for=\"item in items\"><li class=\"w-100\"><button x-text=\"item\" class=\"p-2 blcok w-full hover:bg-blue-500 hover:text-white text-left\" @click=\"onClickSuggestion(item)\"></button></li></template></ul></div></div></template>")
		if err != nil {
			return err
		}
		err = var_27.Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		if props.ValidationErr != "" {
			_, err = templBuffer.WriteString("<span class=\"block text-red-500\">")
			if err != nil {
				return err
			}
			var var_33 string = props.ValidationErr
			_, err = templBuffer.WriteString(templ.EscapeString(var_33))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</span>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}

type FormProps struct {
	Class string

	Method  string
	Action  string
	EncType string

	SubmitButtonText string
}

func Form(props FormProps) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_34 := templ.GetChildren(ctx)
		if var_34 == nil {
			var_34 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var var_35 = []any{templ.SafeClass(props.Class)}
		err = templ.RenderCSSItems(ctx, templBuffer, var_35...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<form class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_35).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" method=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(props.Method))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" action=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(props.Action))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		if props.EncType != "" {
			_, err = templBuffer.WriteString(" enctype=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(props.EncType))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\"")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		err = var_34.Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		var_36 := templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
			templBuffer, templIsBuffer := w.(*bytes.Buffer)
			if !templIsBuffer {
				templBuffer = templ.GetBuffer()
				defer templ.ReleaseBuffer(templBuffer)
			}
			var var_37 string = props.SubmitButtonText
			_, err = templBuffer.WriteString(templ.EscapeString(var_37))
			if err != nil {
				return err
			}
			if !templIsBuffer {
				_, err = io.Copy(w, templBuffer)
			}
			return err
		})
		err = Button(ButtonProps{Type: "submit", Class: "mt-5"}).Render(templ.WithChildren(ctx, var_36), templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</form>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}
