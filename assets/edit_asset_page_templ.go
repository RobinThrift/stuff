// Code generated by templ@v0.2.316 DO NOT EDIT.

package assets

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import "fmt"
import "github.com/kodeshack/stuff/views"

type editAssetPageProps struct {
	isNewAsset       bool
	asset            *Asset
	validationErrs   map[string]string
	postTarget       string
	csrfToken        string
	decimalSeparator string
}

func editAssetPage(props editAssetPageProps) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var_2 := templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
			templBuffer, templIsBuffer := w.(*bytes.Buffer)
			if !templIsBuffer {
				templBuffer = templ.GetBuffer()
				defer templ.ReleaseBuffer(templBuffer)
			}
			_, err = templBuffer.WriteString("<div class=\"container mx-auto\"><header class=\"my-5 flex items-end\"><h1 class=\"font-extrabold md:text-2xl lg:text-4xl\">")
			if err != nil {
				return err
			}
			if props.isNewAsset {
				var_3 := `New Asset`
				_, err = templBuffer.WriteString(var_3)
				if err != nil {
					return err
				}
			} else {
				var_4 := `Edit `
				_, err = templBuffer.WriteString(var_4)
				if err != nil {
					return err
				}
				var var_5 string = props.asset.Name
				_, err = templBuffer.WriteString(templ.EscapeString(var_5))
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</h1></header>")
			if err != nil {
				return err
			}
			if props.validationErrs["general"] != "" {
				_, err = templBuffer.WriteString("<span class=\"text-red-500\">")
				if err != nil {
					return err
				}
				var var_6 string = props.validationErrs["general"]
				_, err = templBuffer.WriteString(templ.EscapeString(var_6))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</span>")
				if err != nil {
					return err
				}
			}
			var_7 := templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
				templBuffer, templIsBuffer := w.(*bytes.Buffer)
				if !templIsBuffer {
					templBuffer = templ.GetBuffer()
					defer templ.ReleaseBuffer(templBuffer)
				}
				_, err = templBuffer.WriteString("<input type=\"hidden\" name=\"stuff.csrf.token\" value=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString(props.csrfToken))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\"> <div class=\"grid grid-cols-4 gap-5\"><div class=\"col-span-3 gap-5 grid grid-cols-4\">")
				if err != nil {
					return err
				}
				err = views.Input(views.InputProps{
					Class: "col-span-3", LabelClass: "font-bold", InputWrapperClass: "flex-grow",
					Name: "name", Label: "Name", Required: true,
					Value:         props.asset.Name,
					ValidationErr: props.validationErrs["name"],
				}).Render(ctx, templBuffer)
				if err != nil {
					return err
				}
				err = views.Select(views.SelectProps{
					Class:    "col-span-1",
					Name:     "status",
					Label:    "Status",
					Selected: string(props.asset.Status),
					Options: [][]string{
						{"In Storage", "IN_STORAGE"},
						{"In Use", "IN_USE"},
						{"Archived", "ARCHIVED"},
					},
				}).Render(ctx, templBuffer)
				if err != nil {
					return err
				}
				err = views.Input(views.InputProps{
					Class: "col-span-2", LabelClass: "font-bold", InputWrapperClass: "flex-grow",
					Name: "tag", Label: "Tag", Required: true,
					Value:         props.asset.Tag,
					ValidationErr: props.validationErrs["tag"],
				}).Render(ctx, templBuffer)
				if err != nil {
					return err
				}
				err = views.Input(views.InputProps{
					Class: "col-span-2", LabelClass: "font-bold", InputWrapperClass: "flex-grow",
					Name: "category", Label: "Category", Required: true,
					Value:         props.asset.Category,
					ValidationErr: props.validationErrs["category"],
				}).Render(ctx, templBuffer)
				if err != nil {
					return err
				}
				err = views.Input(views.InputProps{
					Class: "col-span-2", LabelClass: "font-bold", InputWrapperClass: "flex-grow",
					Name: "model", Label: "Model",
					Value:         props.asset.Model,
					ValidationErr: props.validationErrs["model"],
				}).Render(ctx, templBuffer)
				if err != nil {
					return err
				}
				err = views.Input(views.InputProps{
					Class: "col-span-2", LabelClass: "font-bold", InputWrapperClass: "flex-grow",
					Name: "model_no", Label: "Model No",
					Value:         props.asset.ModelNo,
					ValidationErr: props.validationErrs["model_no"],
				}).Render(ctx, templBuffer)
				if err != nil {
					return err
				}
				err = views.Input(views.InputProps{
					Class: "col-span-2", LabelClass: "font-bold", InputWrapperClass: "flex-grow",
					Name: "manufacturer", Label: "Manufacturer",
					Value:         props.asset.Manufacturer,
					ValidationErr: props.validationErrs["Manufacturer"],
				}).Render(ctx, templBuffer)
				if err != nil {
					return err
				}
				err = views.Input(views.InputProps{
					Class: "col-span-2", LabelClass: "font-bold", InputWrapperClass: "flex-grow",
					Name: "serial_no", Label: "Serial No",
					Value:         props.asset.SerialNo,
					ValidationErr: props.validationErrs["serial_no"],
				}).Render(ctx, templBuffer)
				if err != nil {
					return err
				}
				err = views.DatePicker(views.DatePickerProps{
					Class: "col-span-1 col-start-4", LabelClass: "font-bold", InputWrapperClass: "flex-grow",
					Name: "warranty_until", Label: "Warranty Until",
					Value:         props.asset.WarrantyUntil,
					Format:        "2006-01-02",
					ValidationErr: props.validationErrs["warranty_until"],
				}).Render(ctx, templBuffer)
				if err != nil {
					return err
				}
				err = views.Textarea(views.TextareaProps{
					Class: "col-span-4", LabelClass: "font-bold",
					Name: "notes", Label: "Notes",
					Value:         props.asset.Notes,
					ValidationErr: props.validationErrs["notes"],
				}).Render(ctx, templBuffer)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</div><div class=\"col-span-1 row-span-4 rounded-md bg-gray-100 mt-2 p-5 flex flex-col\" x-data=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("{ img: '%s' }", props.asset.ImageURL)))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\"><label for=\"image\" class=\"block w-full flex-1 cursor-pointer relative\" @dragover.prevent=\"$refs.icons.classList.add(&#39;drag-over&#39;)\" @dragleave.prevent=\"$refs.icons.classList.remove(&#39;drag-over&#39;)\"><div class=\"flex flex-col items-center justify-center\"><div x-show=\"!img\" class=\"group flex justify-center items-center w-full h-full\" x-ref=\"icons\">")
				if err != nil {
					return err
				}
				err = views.Icon("file-arrow-up", "drag-over-show pointer-events-none").Render(ctx, templBuffer)
				if err != nil {
					return err
				}
				err = views.Icon("images-square", "drag-over-hide pointer-events-none").Render(ctx, templBuffer)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</div><p x-show=\"!img\" class=\"mb-2 text-sm text-gray-500 dark:text-gray-400\"><span class=\"font-semibold\">")
				if err != nil {
					return err
				}
				var_8 := `Drop to upload`
				_, err = templBuffer.WriteString(var_8)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</span> ")
				if err != nil {
					return err
				}
				var_9 := `or click to select`
				_, err = templBuffer.WriteString(var_9)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</p><p x-show=\"!img\" class=\"text-xs text-gray-500 dark:text-gray-400\">")
				if err != nil {
					return err
				}
				var_10 := `PNG, JPEG, WebP`
				_, err = templBuffer.WriteString(var_10)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</p><img x-show=\"img\" x-bind:src=\"img\" class=\"w-full h-auto\"></div><input class=\"absolute top-0 left-0 bottom-0 right-0 text-sm file:text-transparent text-transparent file:border-0 file:bg-transparent\" name=\"image\" id=\"image\" type=\"file\" accept=\"image/*\" x-ref=\"fileInput\" @change=\"\n									if (!$event.target.files) {\n										return\n									}\n									reader = new FileReader();\n									reader.readAsDataURL($event.target.files[0])\n									reader.onload = e =&gt; img = e.target.result\n								\"></label><button x-show=\"img\" class=\"btn btn-outline btn-danger flex justify-center items-center\" @click.prevent=\"$refs.fileInput.value = &#39;&#39;; img = &#39;&#39;\">")
				if err != nil {
					return err
				}
				err = views.Icon("file-x", "w-[24px] h-[24px]").Render(ctx, templBuffer)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(" ")
				if err != nil {
					return err
				}
				var_11 := `Clear`
				_, err = templBuffer.WriteString(var_11)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</button></div><h3 class=\"col-span-4 font-bold text-lg md:text-xl mt-5\">")
				if err != nil {
					return err
				}
				var_12 := `Location`
				_, err = templBuffer.WriteString(var_12)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</h3><div class=\"col-span-3 grid grid-cols-4 gap-5\">")
				if err != nil {
					return err
				}
				err = views.Input(views.InputProps{
					Class: "col-span-3", LabelClass: "font-bold", InputWrapperClass: "flex-grow",
					Name: "location", Label: "Location",
					Value:         props.asset.Location,
					ValidationErr: props.validationErrs["location"],
				}).Render(ctx, templBuffer)
				if err != nil {
					return err
				}
				err = views.Input(views.InputProps{
					Class: "col-span-1", LabelClass: "font-bold", InputWrapperClass: "flex-grow",
					Name: "position_code", Label: "PositionCode",
					Value:         props.asset.PositionCode,
					ValidationErr: props.validationErrs["position_code"],
				}).Render(ctx, templBuffer)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</div><h3 class=\"col-span-4 font-bold text-lg md:text-xl mt-5\">")
				if err != nil {
					return err
				}
				var_13 := `Purchase Info`
				_, err = templBuffer.WriteString(var_13)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</h3><div class=\"col-span-3 grid grid-cols-4 gap-5\">")
				if err != nil {
					return err
				}
				err = views.Input(views.InputProps{
					Class: "col-span-3", LabelClass: "font-bold", InputWrapperClass: "flex-grow",
					Name: "purchase.order_no", Label: "Order No.",
					Value:         props.asset.PurchaseInfo.OrderNo,
					ValidationErr: props.validationErrs["purchase.order_no"],
				}).Render(ctx, templBuffer)
				if err != nil {
					return err
				}
				err = views.DatePicker(views.DatePickerProps{
					Class: "col-span-1", LabelClass: "font-bold", InputWrapperClass: "flex-grow",
					Name: "purchase.date", Label: "Purchase Date",
					Value:         props.asset.PurchaseInfo.Date,
					Format:        "2006-01-02",
					ValidationErr: props.validationErrs["purchase.date"],
				}).Render(ctx, templBuffer)
				if err != nil {
					return err
				}
				err = views.Input(views.InputProps{
					Class: "col-span-4", LabelClass: "font-bold", InputWrapperClass: "flex-grow",
					Name: "purchase.supplier", Label: "Supplier",
					Value:         props.asset.PurchaseInfo.Supplier,
					ValidationErr: props.validationErrs["purchase.supplier"],
				}).Render(ctx, templBuffer)
				if err != nil {
					return err
				}
				var_14 := templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
					templBuffer, templIsBuffer := w.(*bytes.Buffer)
					if !templIsBuffer {
						templBuffer = templ.GetBuffer()
						defer templ.ReleaseBuffer(templBuffer)
					}
					var var_15 = []any{
						"px-3 py-2 placeholder-gray-300 border border-gray-300 rounded-md rounded-l-none",
						templ.SafeClass("w-[64px] focus:outline-none focus:ring focus:ring-blue-100 focus:border-blue-300"),
						"border-l-0",
					}
					err = templ.RenderCSSItems(ctx, templBuffer, var_15...)
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("<input type=\"text\" name=\"purchase.currency\" id=\"purchase.currency\" value=\"")
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString(templ.EscapeString(props.asset.PurchaseInfo.Currency))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("\" class=\"")
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_15).String()))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("\">")
					if err != nil {
						return err
					}
					if !templIsBuffer {
						_, err = io.Copy(w, templBuffer)
					}
					return err
				})
				err = views.Input(views.InputProps{
					Class: "col-span-1 col-start-4 flex items-center mb-5", LabelClass: "font-bold mt-2 mr-5 flex items-center",
					InputWrapperClass: "flex-grow flex w-full items-center",
					InputClass:        "rounded-r-none flex-1 w-80 text-right",
					Name:              "purchase.amount", Label: "Cost",
					Value:         props.asset.PurchaseInfo.Amount.Format(props.decimalSeparator),
					ValidationErr: props.validationErrs["purchase.amount"],
				}).Render(templ.WithChildren(ctx, var_14), templBuffer)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</div></div>")
				if err != nil {
					return err
				}
				if !templIsBuffer {
					_, err = io.Copy(w, templBuffer)
				}
				return err
			})
			err = views.Form(views.FormProps{
				Action:           props.postTarget,
				Method:           "post",
				EncType:          "multipart/form-data",
				SubmitButtonText: "Save Asset",
			}).Render(templ.WithChildren(ctx, var_7), templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div>")
			if err != nil {
				return err
			}
			if !templIsBuffer {
				_, err = io.Copy(w, templBuffer)
			}
			return err
		})
		err = views.Layout().Render(templ.WithChildren(ctx, var_2), templBuffer)
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}
